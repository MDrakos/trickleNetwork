
MAC Interface Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006940  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00406940  00406940  00016940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000c8c  20000000  00406948  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000011c  20000c8c  004075d4  00020c8c  2**2
                  ALLOC
  4 .stack        00003000  20000da8  004076f0  00020c8c  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020c8c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020cb6  2**0
                  CONTENTS, READONLY
  7 .debug_info   00010523  00000000  00000000  00020d0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002dae  00000000  00000000  00031232  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000607a  00000000  00000000  00033fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ad8  00000000  00000000  0003a05a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a88  00000000  00000000  0003ab32  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00016318  00000000  00000000  0003b5ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000f202  00000000  00000000  000518d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00056d19  00000000  00000000  00060ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000020e4  00000000  00000000  000b77f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003da8 	.word	0x20003da8
  400004:	0040154d 	.word	0x0040154d
  400008:	00401549 	.word	0x00401549
  40000c:	00401549 	.word	0x00401549
  400010:	00401549 	.word	0x00401549
  400014:	00401549 	.word	0x00401549
  400018:	00401549 	.word	0x00401549
	...
  40002c:	00401549 	.word	0x00401549
  400030:	00401549 	.word	0x00401549
  400034:	00000000 	.word	0x00000000
  400038:	00401549 	.word	0x00401549
  40003c:	00401549 	.word	0x00401549
  400040:	00401549 	.word	0x00401549
  400044:	00401549 	.word	0x00401549
  400048:	00401549 	.word	0x00401549
  40004c:	00401549 	.word	0x00401549
  400050:	00401549 	.word	0x00401549
  400054:	00401549 	.word	0x00401549
  400058:	00401549 	.word	0x00401549
  40005c:	00401549 	.word	0x00401549
  400060:	00401549 	.word	0x00401549
  400064:	00401549 	.word	0x00401549
  400068:	00000000 	.word	0x00000000
  40006c:	004010ed 	.word	0x004010ed
  400070:	00401101 	.word	0x00401101
  400074:	00401115 	.word	0x00401115
  400078:	00401549 	.word	0x00401549
  40007c:	00400801 	.word	0x00400801
	...
  400088:	00401549 	.word	0x00401549
  40008c:	00401549 	.word	0x00401549
  400090:	00401549 	.word	0x00401549
  400094:	00401549 	.word	0x00401549
  400098:	00401549 	.word	0x00401549
  40009c:	00401549 	.word	0x00401549
  4000a0:	00401549 	.word	0x00401549
  4000a4:	00401549 	.word	0x00401549
  4000a8:	00401549 	.word	0x00401549
  4000ac:	00401549 	.word	0x00401549
  4000b0:	00401549 	.word	0x00401549
  4000b4:	00401549 	.word	0x00401549
  4000b8:	00401549 	.word	0x00401549
  4000bc:	00401549 	.word	0x00401549
  4000c0:	00401549 	.word	0x00401549
  4000c4:	00401549 	.word	0x00401549
  4000c8:	00401549 	.word	0x00401549

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000c8c 	.word	0x20000c8c
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00406948 	.word	0x00406948

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	20000c90 	.word	0x20000c90
  40011c:	00406948 	.word	0x00406948
  400120:	00406948 	.word	0x00406948
  400124:	00000000 	.word	0x00000000

00400128 <msg_received>:
*	This is how the lower layer notifies the MAC interface of message received.
*	In turn the callback(event) from the upper layer is called
*
*	@param msg the message received
*/
static void msg_received(Message *msg){
  400128:	b508      	push	{r3, lr}
	//msg.lqi = ...
	(*app_msg_received_callback)(msg);
  40012a:	4b02      	ldr	r3, [pc, #8]	; (400134 <msg_received+0xc>)
  40012c:	681b      	ldr	r3, [r3, #0]
  40012e:	4798      	blx	r3
  400130:	bd08      	pop	{r3, pc}
  400132:	bf00      	nop
  400134:	20000ca8 	.word	0x20000ca8

00400138 <msg_response>:
*	In turn the callback(event) from the upper layer is called
*
*	@param msg the message status
*	@param dummy_msg_id dummy id associated with the msg being acked
*/
static void msg_response(XbeeStatus msg_status, uint8_t dummy_msg_id){
  400138:	b508      	push	{r3, lr}
	(*app_ack_received_callback)(msg_status);
  40013a:	4b02      	ldr	r3, [pc, #8]	; (400144 <msg_response+0xc>)
  40013c:	681b      	ldr	r3, [r3, #0]
  40013e:	b2c0      	uxtb	r0, r0
  400140:	4798      	blx	r3
  400142:	bd08      	pop	{r3, pc}
  400144:	20000cac 	.word	0x20000cac

00400148 <mac_init>:
*	@param msg_callback When a msg is received the registered msg_callback is called
*	@param ack_callback When an ack is received the registered ack_callback is called
*
*	@return true if communication with radio was possible and stored speed rate matches RADIO_SPEED_RATE 
*/
bool mac_init( void(*msg_callback)(Message* msg), void(*ack_callback)(uint8_t) ){
  400148:	b570      	push	{r4, r5, r6, lr}
  40014a:	4606      	mov	r6, r0
  40014c:	460d      	mov	r5, r1
	
	//initializes radio
	if( !radio_init() ) return false;
  40014e:	4b12      	ldr	r3, [pc, #72]	; (400198 <mac_init+0x50>)
  400150:	4798      	blx	r3
  400152:	4604      	mov	r4, r0
  400154:	b1f0      	cbz	r0, 400194 <mac_init+0x4c>
	
	//initializes app callbacks (from mac to upper layer)
	app_msg_received_callback = msg_callback;
  400156:	4b11      	ldr	r3, [pc, #68]	; (40019c <mac_init+0x54>)
  400158:	601e      	str	r6, [r3, #0]
	app_ack_received_callback = ack_callback;
  40015a:	4b11      	ldr	r3, [pc, #68]	; (4001a0 <mac_init+0x58>)
  40015c:	601d      	str	r5, [r3, #0]
	
	//registers callbacks (from lower layer to mac) 
	xbee_register_msg_received_callback(msg_received);
  40015e:	4811      	ldr	r0, [pc, #68]	; (4001a4 <mac_init+0x5c>)
  400160:	4b11      	ldr	r3, [pc, #68]	; (4001a8 <mac_init+0x60>)
  400162:	4798      	blx	r3
	xbee_register_msg_responded_callback(msg_response);
  400164:	4811      	ldr	r0, [pc, #68]	; (4001ac <mac_init+0x64>)
  400166:	4b12      	ldr	r3, [pc, #72]	; (4001b0 <mac_init+0x68>)
  400168:	4798      	blx	r3
	
	//sets up radio and mac parameters as per the mac_config file
	radio_write_16bit_address(MAC_ADDRESS);
  40016a:	2004      	movs	r0, #4
  40016c:	4b11      	ldr	r3, [pc, #68]	; (4001b4 <mac_init+0x6c>)
  40016e:	4798      	blx	r3
	radio_write_channel(MAC_CHANNEL);
  400170:	2011      	movs	r0, #17
  400172:	4b11      	ldr	r3, [pc, #68]	; (4001b8 <mac_init+0x70>)
  400174:	4798      	blx	r3
	radio_write_panid(MAC_PAN_ID);
  400176:	20aa      	movs	r0, #170	; 0xaa
  400178:	4b10      	ldr	r3, [pc, #64]	; (4001bc <mac_init+0x74>)
  40017a:	4798      	blx	r3
	radio_write_macminbe(MAC_macMinBE);
  40017c:	2000      	movs	r0, #0
  40017e:	4b10      	ldr	r3, [pc, #64]	; (4001c0 <mac_init+0x78>)
  400180:	4798      	blx	r3
	radio_write_acks(MAC_ACKS);
  400182:	2001      	movs	r0, #1
  400184:	4b0f      	ldr	r3, [pc, #60]	; (4001c4 <mac_init+0x7c>)
  400186:	4798      	blx	r3
	//radio_write_extra_retries(MAC_EXTRA_RETRIES); //NOT WORKING!... fix this
	radio_write_tx_power(RADIO_TX_POWER);
  400188:	2000      	movs	r0, #0
  40018a:	4b0f      	ldr	r3, [pc, #60]	; (4001c8 <mac_init+0x80>)
  40018c:	4798      	blx	r3
	radio_write_cca_threshold(RADIO_CCA_THRESHOLD);	
  40018e:	202c      	movs	r0, #44	; 0x2c
  400190:	4b0e      	ldr	r3, [pc, #56]	; (4001cc <mac_init+0x84>)
  400192:	4798      	blx	r3
	
	return true;
}
  400194:	4620      	mov	r0, r4
  400196:	bd70      	pop	{r4, r5, r6, pc}
  400198:	00400249 	.word	0x00400249
  40019c:	20000ca8 	.word	0x20000ca8
  4001a0:	20000cac 	.word	0x20000cac
  4001a4:	00400129 	.word	0x00400129
  4001a8:	00400519 	.word	0x00400519
  4001ac:	00400139 	.word	0x00400139
  4001b0:	00400525 	.word	0x00400525
  4001b4:	0040026d 	.word	0x0040026d
  4001b8:	004002b5 	.word	0x004002b5
  4001bc:	00400329 	.word	0x00400329
  4001c0:	004003dd 	.word	0x004003dd
  4001c4:	004002ed 	.word	0x004002ed
  4001c8:	00400371 	.word	0x00400371
  4001cc:	004003a5 	.word	0x004003a5

004001d0 <mac_send>:
*
*	Send an IEEE 802.25.4 MAC message.
*
*	@param msg the message 
*/
void mac_send( Message* msg ){
  4001d0:	b508      	push	{r3, lr}
	xbee_send_msg( msg, dummy_id );
  4001d2:	2107      	movs	r1, #7
  4001d4:	4b01      	ldr	r3, [pc, #4]	; (4001dc <mac_send+0xc>)
  4001d6:	4798      	blx	r3
  4001d8:	bd08      	pop	{r3, pc}
  4001da:	bf00      	nop
  4001dc:	0040053d 	.word	0x0040053d

004001e0 <at_command_response>:
*	@param response the response
*/
static void at_command_response(XbeeATCommandResponse* r){
	
	//copies response in buffer
	response.status = r->status;
  4001e0:	7802      	ldrb	r2, [r0, #0]
  4001e2:	4b0f      	ldr	r3, [pc, #60]	; (400220 <at_command_response+0x40>)
  4001e4:	701a      	strb	r2, [r3, #0]
	response.value_requested_length = r->value_requested_length;
  4001e6:	7a42      	ldrb	r2, [r0, #9]
  4001e8:	725a      	strb	r2, [r3, #9]
	
	for( uint8_t i=0; i< response.value_requested_length; i++ )
  4001ea:	7a5b      	ldrb	r3, [r3, #9]
  4001ec:	f013 0fff 	tst.w	r3, #255	; 0xff
  4001f0:	d011      	beq.n	400216 <at_command_response+0x36>
*
*	This is how the lower layer (Xbee library) notifies of an AT command response received.
*
*	@param response the response
*/
static void at_command_response(XbeeATCommandResponse* r){
  4001f2:	b410      	push	{r4}
	
	//copies response in buffer
	response.status = r->status;
	response.value_requested_length = r->value_requested_length;
	
	for( uint8_t i=0; i< response.value_requested_length; i++ )
  4001f4:	2300      	movs	r3, #0
	response.value_requested[i] = r->value_requested[i];
  4001f6:	490a      	ldr	r1, [pc, #40]	; (400220 <at_command_response+0x40>)
  4001f8:	18c2      	adds	r2, r0, r3
  4001fa:	7854      	ldrb	r4, [r2, #1]
  4001fc:	18ca      	adds	r2, r1, r3
  4001fe:	7054      	strb	r4, [r2, #1]
	
	//copies response in buffer
	response.status = r->status;
	response.value_requested_length = r->value_requested_length;
	
	for( uint8_t i=0; i< response.value_requested_length; i++ )
  400200:	3301      	adds	r3, #1
  400202:	b2db      	uxtb	r3, r3
  400204:	7a4a      	ldrb	r2, [r1, #9]
  400206:	b2d2      	uxtb	r2, r2
  400208:	429a      	cmp	r2, r3
  40020a:	d8f5      	bhi.n	4001f8 <at_command_response+0x18>
	response.value_requested[i] = r->value_requested[i];
	
	//signals data is ready
	waiting_for_response = false;
  40020c:	2200      	movs	r2, #0
  40020e:	4b05      	ldr	r3, [pc, #20]	; (400224 <at_command_response+0x44>)
  400210:	701a      	strb	r2, [r3, #0]
}
  400212:	bc10      	pop	{r4}
  400214:	4770      	bx	lr
	
	for( uint8_t i=0; i< response.value_requested_length; i++ )
	response.value_requested[i] = r->value_requested[i];
	
	//signals data is ready
	waiting_for_response = false;
  400216:	2200      	movs	r2, #0
  400218:	4b02      	ldr	r3, [pc, #8]	; (400224 <at_command_response+0x44>)
  40021a:	701a      	strb	r2, [r3, #0]
  40021c:	4770      	bx	lr
  40021e:	bf00      	nop
  400220:	20000cb4 	.word	0x20000cb4
  400224:	20000cb0 	.word	0x20000cb0

00400228 <blocking_send_at_command>:
*	The underlying Xbee library is interrupt based, so this 
*	creates a blocking function that sends an AT command and 
*	returns when a response has being received.
*
*/
static void blocking_send_at_command(const uint8_t* command, const uint8_t* params, uint8_t params_length){
  400228:	b510      	push	{r4, lr}
	
	//we will be waiting for incoming command response
	waiting_for_response = true;
  40022a:	2401      	movs	r4, #1
  40022c:	4b04      	ldr	r3, [pc, #16]	; (400240 <blocking_send_at_command+0x18>)
  40022e:	701c      	strb	r4, [r3, #0]
	
	//sends command
	xbee_send_at_command( command, params, params_length);
  400230:	4b04      	ldr	r3, [pc, #16]	; (400244 <blocking_send_at_command+0x1c>)
  400232:	4798      	blx	r3
	
	//waits until response has being received
	//use semaphore instead when OS is present.... response.wait();...  FIX THIS....
	while(waiting_for_response);
  400234:	4a02      	ldr	r2, [pc, #8]	; (400240 <blocking_send_at_command+0x18>)
  400236:	7813      	ldrb	r3, [r2, #0]
  400238:	f013 0fff 	tst.w	r3, #255	; 0xff
  40023c:	d1fb      	bne.n	400236 <blocking_send_at_command+0xe>
}
  40023e:	bd10      	pop	{r4, pc}
  400240:	20000cb0 	.word	0x20000cb0
  400244:	004005e5 	.word	0x004005e5

00400248 <radio_init>:
*	Checks the radio speed rate matches RADIO_SPEED_RATE and initializes the radio. 
*	Takes ~2secs to complete. If radio not present execution halts here.
*
*	@return true if speed rates matched, false otherwise
*/
bool radio_init(void){
  400248:	b508      	push	{r3, lr}
	
	//registers event handler
	xbee_register_at_command_responded_callback(at_command_response);
  40024a:	4805      	ldr	r0, [pc, #20]	; (400260 <radio_init+0x18>)
  40024c:	4b05      	ldr	r3, [pc, #20]	; (400264 <radio_init+0x1c>)
  40024e:	4798      	blx	r3
	
	
	return xbee_init(RADIO_SPEED_RATE);  //takes ~2 secs to complete
  400250:	f44f 4061 	mov.w	r0, #57600	; 0xe100
  400254:	4b04      	ldr	r3, [pc, #16]	; (400268 <radio_init+0x20>)
  400256:	4798      	blx	r3
}
  400258:	3000      	adds	r0, #0
  40025a:	bf18      	it	ne
  40025c:	2001      	movne	r0, #1
  40025e:	bd08      	pop	{r3, pc}
  400260:	004001e1 	.word	0x004001e1
  400264:	00400531 	.word	0x00400531
  400268:	00400655 	.word	0x00400655

0040026c <radio_write_16bit_address>:
*
*	Changes the radio 16-bit address to the specified one.
*
*	@param value the address
*/
void radio_write_16bit_address(uint16_t value){
  40026c:	b510      	push	{r4, lr}
  40026e:	b082      	sub	sp, #8
  400270:	4604      	mov	r4, r0
*/
static uint16_t fix_endianness_16bit(uint16_t original){
	//Xbee arranges (in frames) the order of multibyte values as big endian
	//So if the target platform is little endian this function changes it
		
	if( xbee_cpu_is_little_endian() )
  400272:	4b0a      	ldr	r3, [pc, #40]	; (40029c <radio_write_16bit_address+0x30>)
  400274:	4798      	blx	r3
  400276:	b118      	cbz	r0, 400280 <radio_write_16bit_address+0x14>
		return xbee_cpu_swap_endianness_16bit(original);
  400278:	4620      	mov	r0, r4
  40027a:	4b09      	ldr	r3, [pc, #36]	; (4002a0 <radio_write_16bit_address+0x34>)
  40027c:	4798      	blx	r3
  40027e:	e000      	b.n	400282 <radio_write_16bit_address+0x16>
	
	return original;
  400280:	4620      	mov	r0, r4
*
*	@param value the address
*/
void radio_write_16bit_address(uint16_t value){
	
	uint16_t fixed_value = fix_endianness_16bit(value);	
  400282:	a902      	add	r1, sp, #8
  400284:	f821 0d02 	strh.w	r0, [r1, #-2]!
	
	blocking_send_at_command( (uint8_t*)"MY", (uint8_t*)(&fixed_value), 2 );	//send command
  400288:	2202      	movs	r2, #2
  40028a:	4806      	ldr	r0, [pc, #24]	; (4002a4 <radio_write_16bit_address+0x38>)
  40028c:	4c06      	ldr	r4, [pc, #24]	; (4002a8 <radio_write_16bit_address+0x3c>)
  40028e:	47a0      	blx	r4
	blocking_send_at_command( (uint8_t*)"WR", (uint8_t*)"", 0 );  						//write changes to nonvolatile
  400290:	2200      	movs	r2, #0
  400292:	4906      	ldr	r1, [pc, #24]	; (4002ac <radio_write_16bit_address+0x40>)
  400294:	4806      	ldr	r0, [pc, #24]	; (4002b0 <radio_write_16bit_address+0x44>)
  400296:	47a0      	blx	r4
}
  400298:	b002      	add	sp, #8
  40029a:	bd10      	pop	{r4, pc}
  40029c:	00400709 	.word	0x00400709
  4002a0:	0040070d 	.word	0x0040070d
  4002a4:	00406744 	.word	0x00406744
  4002a8:	00400229 	.word	0x00400229
  4002ac:	004067cc 	.word	0x004067cc
  4002b0:	00406764 	.word	0x00406764

004002b4 <radio_write_channel>:
*	Changes the radio channel to the specified one. Input must be
*	a valid IEEE 802.15.4 channel.
*
*	@param value the channel
*/
void radio_write_channel(uint8_t value){
  4002b4:	b510      	push	{r4, lr}
  4002b6:	b082      	sub	sp, #8
  4002b8:	f88d 0007 	strb.w	r0, [sp, #7]
	
	if(value < 0x0B || value > 0x1A)
  4002bc:	380b      	subs	r0, #11
  4002be:	b2c0      	uxtb	r0, r0
  4002c0:	280f      	cmp	r0, #15
  4002c2:	d809      	bhi.n	4002d8 <radio_write_channel+0x24>
		return;
		
	blocking_send_at_command( (uint8_t*)"CH", (uint8_t*)(&value), 1 );	//send command
  4002c4:	2201      	movs	r2, #1
  4002c6:	f10d 0107 	add.w	r1, sp, #7
  4002ca:	4804      	ldr	r0, [pc, #16]	; (4002dc <radio_write_channel+0x28>)
  4002cc:	4c04      	ldr	r4, [pc, #16]	; (4002e0 <radio_write_channel+0x2c>)
  4002ce:	47a0      	blx	r4
	blocking_send_at_command( (uint8_t*)"WR", (uint8_t*)"", 0 );  					//write changes to nonvolatile
  4002d0:	2200      	movs	r2, #0
  4002d2:	4904      	ldr	r1, [pc, #16]	; (4002e4 <radio_write_channel+0x30>)
  4002d4:	4804      	ldr	r0, [pc, #16]	; (4002e8 <radio_write_channel+0x34>)
  4002d6:	47a0      	blx	r4
}
  4002d8:	b002      	add	sp, #8
  4002da:	bd10      	pop	{r4, pc}
  4002dc:	0040674c 	.word	0x0040674c
  4002e0:	00400229 	.word	0x00400229
  4002e4:	004067cc 	.word	0x004067cc
  4002e8:	00406764 	.word	0x00406764

004002ec <radio_write_acks>:
*	Tells the radio whether to use packet acknowledgment or not 
*	in transmissions.
*
*	@param acks_allowed yes or not
*/
void radio_write_acks(bool acks_allowed){
  4002ec:	b510      	push	{r4, lr}
  4002ee:	b082      	sub	sp, #8
	
	uint8_t mac_mode;
	
	if(acks_allowed) mac_mode = 2; //ieee 802.15.4 with acks
  4002f0:	b118      	cbz	r0, 4002fa <radio_write_acks+0xe>
  4002f2:	2302      	movs	r3, #2
  4002f4:	f88d 3007 	strb.w	r3, [sp, #7]
  4002f8:	e002      	b.n	400300 <radio_write_acks+0x14>
	else mac_mode = 1;				//ieee 802.15.4 no acks
  4002fa:	2301      	movs	r3, #1
  4002fc:	f88d 3007 	strb.w	r3, [sp, #7]

	blocking_send_at_command( (uint8_t*)"MM", (uint8_t*)(&mac_mode), 1 );	//send command
  400300:	2201      	movs	r2, #1
  400302:	f10d 0107 	add.w	r1, sp, #7
  400306:	4804      	ldr	r0, [pc, #16]	; (400318 <radio_write_acks+0x2c>)
  400308:	4c04      	ldr	r4, [pc, #16]	; (40031c <radio_write_acks+0x30>)
  40030a:	47a0      	blx	r4
	blocking_send_at_command( (uint8_t*)"WR", (uint8_t*)"", 0 );  		//write changes to nonvolatile
  40030c:	2200      	movs	r2, #0
  40030e:	4904      	ldr	r1, [pc, #16]	; (400320 <radio_write_acks+0x34>)
  400310:	4804      	ldr	r0, [pc, #16]	; (400324 <radio_write_acks+0x38>)
  400312:	47a0      	blx	r4
}
  400314:	b002      	add	sp, #8
  400316:	bd10      	pop	{r4, pc}
  400318:	0040675c 	.word	0x0040675c
  40031c:	00400229 	.word	0x00400229
  400320:	004067cc 	.word	0x004067cc
  400324:	00406764 	.word	0x00406764

00400328 <radio_write_panid>:
*
*	Changes the radio's PAN ID to the specified one.
*
*	@param pan_id the PAN ID
*/
void radio_write_panid(uint16_t pan_id){
  400328:	b510      	push	{r4, lr}
  40032a:	b082      	sub	sp, #8
  40032c:	4604      	mov	r4, r0
*/
static uint16_t fix_endianness_16bit(uint16_t original){
	//Xbee arranges (in frames) the order of multibyte values as big endian
	//So if the target platform is little endian this function changes it
		
	if( xbee_cpu_is_little_endian() )
  40032e:	4b0a      	ldr	r3, [pc, #40]	; (400358 <radio_write_panid+0x30>)
  400330:	4798      	blx	r3
  400332:	b118      	cbz	r0, 40033c <radio_write_panid+0x14>
		return xbee_cpu_swap_endianness_16bit(original);
  400334:	4620      	mov	r0, r4
  400336:	4b09      	ldr	r3, [pc, #36]	; (40035c <radio_write_panid+0x34>)
  400338:	4798      	blx	r3
  40033a:	e000      	b.n	40033e <radio_write_panid+0x16>
	
	return original;
  40033c:	4620      	mov	r0, r4
*
*	@param pan_id the PAN ID
*/
void radio_write_panid(uint16_t pan_id){
	
	uint16_t fixed_value = fix_endianness_16bit(pan_id);
  40033e:	a902      	add	r1, sp, #8
  400340:	f821 0d02 	strh.w	r0, [r1, #-2]!
	
	blocking_send_at_command( (uint8_t*)"ID", (uint8_t*)(&fixed_value), 2 );	//send command
  400344:	2202      	movs	r2, #2
  400346:	4806      	ldr	r0, [pc, #24]	; (400360 <radio_write_panid+0x38>)
  400348:	4c06      	ldr	r4, [pc, #24]	; (400364 <radio_write_panid+0x3c>)
  40034a:	47a0      	blx	r4
	blocking_send_at_command( (uint8_t*)"WR", (uint8_t*)"", 0 );  						//write changes to nonvolatile
  40034c:	2200      	movs	r2, #0
  40034e:	4906      	ldr	r1, [pc, #24]	; (400368 <radio_write_panid+0x40>)
  400350:	4806      	ldr	r0, [pc, #24]	; (40036c <radio_write_panid+0x44>)
  400352:	47a0      	blx	r4
}
  400354:	b002      	add	sp, #8
  400356:	bd10      	pop	{r4, pc}
  400358:	00400709 	.word	0x00400709
  40035c:	0040070d 	.word	0x0040070d
  400360:	00406748 	.word	0x00406748
  400364:	00400229 	.word	0x00400229
  400368:	004067cc 	.word	0x004067cc
  40036c:	00406764 	.word	0x00406764

00400370 <radio_write_tx_power>:
*	Sets the power level at which the radio transmits
*	0 = -10dBm, 1 = -6dBm, 2 = -4dBm, 3 = -2dBm, 4 = 0dBm.
*
*	@param power the TX power level
*/
void radio_write_tx_power(uint8_t power){
  400370:	b510      	push	{r4, lr}
  400372:	b082      	sub	sp, #8
  400374:	f88d 0007 	strb.w	r0, [sp, #7]

	if(power > 4)
  400378:	2804      	cmp	r0, #4
  40037a:	d809      	bhi.n	400390 <radio_write_tx_power+0x20>
		return;
	
	blocking_send_at_command( (uint8_t*)"PL", (uint8_t*)(&power), 1 );	//send command
  40037c:	2201      	movs	r2, #1
  40037e:	f10d 0107 	add.w	r1, sp, #7
  400382:	4804      	ldr	r0, [pc, #16]	; (400394 <radio_write_tx_power+0x24>)
  400384:	4c04      	ldr	r4, [pc, #16]	; (400398 <radio_write_tx_power+0x28>)
  400386:	47a0      	blx	r4
	blocking_send_at_command( (uint8_t*)"WR", (uint8_t*)"", 0 );  		//write changes to nonvolatile
  400388:	2200      	movs	r2, #0
  40038a:	4904      	ldr	r1, [pc, #16]	; (40039c <radio_write_tx_power+0x2c>)
  40038c:	4804      	ldr	r0, [pc, #16]	; (4003a0 <radio_write_tx_power+0x30>)
  40038e:	47a0      	blx	r4
}
  400390:	b002      	add	sp, #8
  400392:	bd10      	pop	{r4, pc}
  400394:	00406754 	.word	0x00406754
  400398:	00400229 	.word	0x00400229
  40039c:	004067cc 	.word	0x004067cc
  4003a0:	00406764 	.word	0x00406764

004003a4 <radio_write_cca_threshold>:
*	the specified threshold. 
*	Min = 0x24 -dBm, Max = 0x50 -dBm.
*
*	@param threshold the threshold in -dBm
*/
void radio_write_cca_threshold(uint8_t threshold){
  4003a4:	b510      	push	{r4, lr}
  4003a6:	b082      	sub	sp, #8
  4003a8:	f88d 0007 	strb.w	r0, [sp, #7]

	if(threshold < 0x24 || threshold > 0x50)
  4003ac:	3824      	subs	r0, #36	; 0x24
  4003ae:	b2c0      	uxtb	r0, r0
  4003b0:	282c      	cmp	r0, #44	; 0x2c
  4003b2:	d809      	bhi.n	4003c8 <radio_write_cca_threshold+0x24>
		return;
	
	blocking_send_at_command( (uint8_t*)"CA", (uint8_t*)(&threshold), 1 );	//send command
  4003b4:	2201      	movs	r2, #1
  4003b6:	f10d 0107 	add.w	r1, sp, #7
  4003ba:	4804      	ldr	r0, [pc, #16]	; (4003cc <radio_write_cca_threshold+0x28>)
  4003bc:	4c04      	ldr	r4, [pc, #16]	; (4003d0 <radio_write_cca_threshold+0x2c>)
  4003be:	47a0      	blx	r4
	blocking_send_at_command( (uint8_t*)"WR", (uint8_t*)"", 0 );  		//write changes to nonvolatile
  4003c0:	2200      	movs	r2, #0
  4003c2:	4904      	ldr	r1, [pc, #16]	; (4003d4 <radio_write_cca_threshold+0x30>)
  4003c4:	4804      	ldr	r0, [pc, #16]	; (4003d8 <radio_write_cca_threshold+0x34>)
  4003c6:	47a0      	blx	r4
}
  4003c8:	b002      	add	sp, #8
  4003ca:	bd10      	pop	{r4, pc}
  4003cc:	00406758 	.word	0x00406758
  4003d0:	00400229 	.word	0x00400229
  4003d4:	004067cc 	.word	0x004067cc
  4003d8:	00406764 	.word	0x00406764

004003dc <radio_write_macminbe>:
*	Sets the minimum back off exponent (or random delay slots) of the 
*	CSMA-CA algorithm. The value must be between 0 and 3.
*
*	@param value the desired value
*/
void radio_write_macminbe(uint8_t value){
  4003dc:	b510      	push	{r4, lr}
  4003de:	b082      	sub	sp, #8
  4003e0:	f88d 0007 	strb.w	r0, [sp, #7]
	
	if( value > 3 || value < 0 )
  4003e4:	2803      	cmp	r0, #3
  4003e6:	d809      	bhi.n	4003fc <radio_write_macminbe+0x20>
		return;
		
	blocking_send_at_command( (uint8_t*)"RN", (uint8_t*)(&value), 1 );	//send command
  4003e8:	2201      	movs	r2, #1
  4003ea:	f10d 0107 	add.w	r1, sp, #7
  4003ee:	4804      	ldr	r0, [pc, #16]	; (400400 <radio_write_macminbe+0x24>)
  4003f0:	4c04      	ldr	r4, [pc, #16]	; (400404 <radio_write_macminbe+0x28>)
  4003f2:	47a0      	blx	r4
	blocking_send_at_command( (uint8_t*)"WR", (uint8_t*)"", 0 );  					//write changes to nonvolatile
  4003f4:	2200      	movs	r2, #0
  4003f6:	4904      	ldr	r1, [pc, #16]	; (400408 <radio_write_macminbe+0x2c>)
  4003f8:	4804      	ldr	r0, [pc, #16]	; (40040c <radio_write_macminbe+0x30>)
  4003fa:	47a0      	blx	r4
}
  4003fc:	b002      	add	sp, #8
  4003fe:	bd10      	pop	{r4, pc}
  400400:	00406760 	.word	0x00406760
  400404:	00400229 	.word	0x00400229
  400408:	004067cc 	.word	0x004067cc
  40040c:	00406764 	.word	0x00406764

00400410 <data_received_callback>:
*	data has being received over the UART. This is where incoming transmissions are
*	processed and delivered to upper layers accordingly. (This function is called 
*	from within UART1's handler)
*
*/
static void data_received_callback(void){
  400410:	b570      	push	{r4, r5, r6, lr}
  400412:	b088      	sub	sp, #32
	
	//ignore until start delimiter found
	while( xbee_uart_getc() != START_DELIMITER );
  400414:	4c3c      	ldr	r4, [pc, #240]	; (400508 <data_received_callback+0xf8>)
  400416:	47a0      	blx	r4
  400418:	287e      	cmp	r0, #126	; 0x7e
  40041a:	d1fc      	bne.n	400416 <data_received_callback+0x6>
	
	//length 
	uint16_t length = (uint16_t)(xbee_uart_getc())<<8;
  40041c:	4d3a      	ldr	r5, [pc, #232]	; (400508 <data_received_callback+0xf8>)
  40041e:	47a8      	blx	r5
  400420:	0200      	lsls	r0, r0, #8
  400422:	b284      	uxth	r4, r0
	length += xbee_uart_getc();
  400424:	47a8      	blx	r5
  400426:	4420      	add	r0, r4
  400428:	b284      	uxth	r4, r0
	
	//Read API (cmd) Identifier
	uint8_t api_id = xbee_uart_getc();
  40042a:	47a8      	blx	r5
	XbeeATCommandResponse response;
	XbeeStatus msg_status;
	uint8_t msg_id;
	Message msg;
	
	switch(api_id){
  40042c:	3880      	subs	r0, #128	; 0x80
  40042e:	280a      	cmp	r0, #10
  400430:	d868      	bhi.n	400504 <data_received_callback+0xf4>
  400432:	e8df f000 	tbb	[pc, r0]
  400436:	3406      	.short	0x3406
  400438:	67676767 	.word	0x67676767
  40043c:	28096767 	.word	0x28096767
  400440:	64          	.byte	0x64
  400441:	00          	.byte	0x00
			}
			break;
			
		case API_ID_MESSAGE_RECEIVED_64bit:
			// ---- ignore msg's using 64bit address ---- FOR NOW
			for(uint16_t i=0; i<length; i++){
  400442:	2c00      	cmp	r4, #0
  400444:	d153      	bne.n	4004ee <data_received_callback+0xde>
  400446:	e05d      	b.n	400504 <data_received_callback+0xf4>
*
*	@return true if checksum was OK
*/
static bool read_at_command_response( XbeeATCommandResponse *response, uint16_t length ){

	response->value_requested_length = length - 5;
  400448:	3c05      	subs	r4, #5
  40044a:	f88d 401d 	strb.w	r4, [sp, #29]
	
	//ignore frame id
	xbee_uart_getc();
  40044e:	4c2e      	ldr	r4, [pc, #184]	; (400508 <data_received_callback+0xf8>)
  400450:	47a0      	blx	r4
	
	//ignore AT command
	xbee_uart_getc();
  400452:	47a0      	blx	r4
	xbee_uart_getc();
  400454:	47a0      	blx	r4
	
	//read status
	response->status = xbee_uart_getc();
  400456:	47a0      	blx	r4
  400458:	f88d 0014 	strb.w	r0, [sp, #20]
	
	//reads value requested
	for(uint32_t i=0; i<response->value_requested_length;i++){
  40045c:	f89d 301d 	ldrb.w	r3, [sp, #29]
  400460:	b153      	cbz	r3, 400478 <data_received_callback+0x68>
  400462:	ad05      	add	r5, sp, #20
  400464:	2400      	movs	r4, #0
		response->value_requested[i] = xbee_uart_getc();
  400466:	4e28      	ldr	r6, [pc, #160]	; (400508 <data_received_callback+0xf8>)
  400468:	47b0      	blx	r6
  40046a:	f805 0f01 	strb.w	r0, [r5, #1]!
	
	//read status
	response->status = xbee_uart_getc();
	
	//reads value requested
	for(uint32_t i=0; i<response->value_requested_length;i++){
  40046e:	3401      	adds	r4, #1
  400470:	f89d 301d 	ldrb.w	r3, [sp, #29]
  400474:	429c      	cmp	r4, r3
  400476:	d3f7      	bcc.n	400468 <data_received_callback+0x58>
		response->value_requested[i] = xbee_uart_getc();
	}
	
	//ignore checksum..... fix this!
	xbee_uart_getc();
  400478:	4b23      	ldr	r3, [pc, #140]	; (400508 <data_received_callback+0xf8>)
  40047a:	4798      	blx	r3
		case API_ID_AT_COMMAND_RESPONSE: 
			// --- AT Commands response received --
			
			if( read_at_command_response(&response, length) ){
				//notify app
				(*app_at_cmd_response_callback)(&response);
  40047c:	4b23      	ldr	r3, [pc, #140]	; (40050c <data_received_callback+0xfc>)
  40047e:	681b      	ldr	r3, [r3, #0]
  400480:	a805      	add	r0, sp, #20
  400482:	4798      	blx	r3
  400484:	e03e      	b.n	400504 <data_received_callback+0xf4>

static bool read_msg_response(XbeeStatus* status, uint8_t* msg_id, uint16_t length){
	//ignore length... fix this
	
	//frame id
	*msg_id = xbee_uart_getc();
  400486:	4c20      	ldr	r4, [pc, #128]	; (400508 <data_received_callback+0xf8>)
  400488:	47a0      	blx	r4
  40048a:	4606      	mov	r6, r0
	
	//response
	*status = xbee_uart_getc();
  40048c:	47a0      	blx	r4
  40048e:	4605      	mov	r5, r0
	
	//discard checkcum... fix this later
	xbee_uart_getc();
  400490:	47a0      	blx	r4
		case API_ID_MESSAGE_RESPONSE: 
			// --- Message response received ---
			
			if( read_msg_response( &msg_status, &msg_id, length ) ){
				//notify app
				(*app_msg_reponse_callback)(msg_status, msg_id);
  400492:	4b1f      	ldr	r3, [pc, #124]	; (400510 <data_received_callback+0x100>)
  400494:	681b      	ldr	r3, [r3, #0]
  400496:	4631      	mov	r1, r6
  400498:	4628      	mov	r0, r5
  40049a:	4798      	blx	r3
  40049c:	e032      	b.n	400504 <data_received_callback+0xf4>
*/
static bool read_msg(Message* msg, uint16_t length){
	
	
	//length of rf data (aka mac payload)
	msg->data_length = length - 5;
  40049e:	3c05      	subs	r4, #5
  4004a0:	f88d 4010 	strb.w	r4, [sp, #16]
	
	//source address
	msg->address = ((uint16_t)xbee_uart_getc())<<8;
  4004a4:	4c18      	ldr	r4, [pc, #96]	; (400508 <data_received_callback+0xf8>)
  4004a6:	47a0      	blx	r4
  4004a8:	0200      	lsls	r0, r0, #8
  4004aa:	f8ad 0004 	strh.w	r0, [sp, #4]
	msg->address += xbee_uart_getc();
  4004ae:	47a0      	blx	r4
  4004b0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  4004b4:	4418      	add	r0, r3
  4004b6:	f8ad 0004 	strh.w	r0, [sp, #4]
	
	//rssi
	msg->rssi = xbee_uart_getc();
  4004ba:	47a0      	blx	r4
  4004bc:	f88d 0011 	strb.w	r0, [sp, #17]
	
	//ignore option
	xbee_uart_getc();
  4004c0:	47a0      	blx	r4
	
	for(uint32_t i=0; i<msg->data_length; i++){
  4004c2:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4004c6:	b15b      	cbz	r3, 4004e0 <data_received_callback+0xd0>
  4004c8:	f10d 0505 	add.w	r5, sp, #5
  4004cc:	2400      	movs	r4, #0
		msg->data[i] = xbee_uart_getc();
  4004ce:	4e0e      	ldr	r6, [pc, #56]	; (400508 <data_received_callback+0xf8>)
  4004d0:	47b0      	blx	r6
  4004d2:	f805 0f01 	strb.w	r0, [r5, #1]!
	msg->rssi = xbee_uart_getc();
	
	//ignore option
	xbee_uart_getc();
	
	for(uint32_t i=0; i<msg->data_length; i++){
  4004d6:	3401      	adds	r4, #1
  4004d8:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4004dc:	429c      	cmp	r4, r3
  4004de:	d3f7      	bcc.n	4004d0 <data_received_callback+0xc0>
		msg->data[i] = xbee_uart_getc();
	}
	
	//discard checkcum... fix this later
	xbee_uart_getc();
  4004e0:	4b09      	ldr	r3, [pc, #36]	; (400508 <data_received_callback+0xf8>)
  4004e2:	4798      	blx	r3
		case API_ID_MESSAGE_RECEIVED_16bit: 
			// --- Message received (16-bit address version) ---
			
			if( read_msg(&msg, length) ){
				//notify app
				(*app_msg_received_callback)(&msg);
  4004e4:	4b0b      	ldr	r3, [pc, #44]	; (400514 <data_received_callback+0x104>)
  4004e6:	681b      	ldr	r3, [r3, #0]
  4004e8:	a801      	add	r0, sp, #4
  4004ea:	4798      	blx	r3
  4004ec:	e00a      	b.n	400504 <data_received_callback+0xf4>
			}
			break;
			
		case API_ID_MESSAGE_RECEIVED_64bit:
			// ---- ignore msg's using 64bit address ---- FOR NOW
			for(uint16_t i=0; i<length; i++){
  4004ee:	2500      	movs	r5, #0
				xbee_uart_getc();	
  4004f0:	4e05      	ldr	r6, [pc, #20]	; (400508 <data_received_callback+0xf8>)
  4004f2:	47b0      	blx	r6
  4004f4:	3501      	adds	r5, #1
			}
			break;
			
		case API_ID_MESSAGE_RECEIVED_64bit:
			// ---- ignore msg's using 64bit address ---- FOR NOW
			for(uint16_t i=0; i<length; i++){
  4004f6:	b2ab      	uxth	r3, r5
  4004f8:	429c      	cmp	r4, r3
  4004fa:	d8fa      	bhi.n	4004f2 <data_received_callback+0xe2>
  4004fc:	e002      	b.n	400504 <data_received_callback+0xf4>
			//This is not used unless certain event occur in the Xbee
			// (e.g. Watchdog timer reset, Coordinator started, etc)
			// With the functionality included so far, no modem
			// status should be received.

			xbee_uart_getc();
  4004fe:	4c02      	ldr	r4, [pc, #8]	; (400508 <data_received_callback+0xf8>)
  400500:	47a0      	blx	r4
			xbee_uart_getc();
  400502:	47a0      	blx	r4
		default:
			//something went wrong
			break;
	}

}
  400504:	b008      	add	sp, #32
  400506:	bd70      	pop	{r4, r5, r6, pc}
  400508:	00400755 	.word	0x00400755
  40050c:	20000cc8 	.word	0x20000cc8
  400510:	20000cc4 	.word	0x20000cc4
  400514:	20000cc0 	.word	0x20000cc0

00400518 <xbee_register_msg_received_callback>:
*	a message is received in the Xbee.
*
*	@param app_callback	the callback function
*/
void xbee_register_msg_received_callback( void (*app_callback)(Message*) ){
	app_msg_received_callback = app_callback; 
  400518:	4b01      	ldr	r3, [pc, #4]	; (400520 <xbee_register_msg_received_callback+0x8>)
  40051a:	6018      	str	r0, [r3, #0]
  40051c:	4770      	bx	lr
  40051e:	bf00      	nop
  400520:	20000cc0 	.word	0x20000cc0

00400524 <xbee_register_msg_responded_callback>:
*	received, ACK not received (timeout), etc.
*
*	@param response_callback	the callback function
*/
void xbee_register_msg_responded_callback( void(*response_callback)(XbeeStatus, uint8_t) ){
	app_msg_reponse_callback = response_callback; 
  400524:	4b01      	ldr	r3, [pc, #4]	; (40052c <xbee_register_msg_responded_callback+0x8>)
  400526:	6018      	str	r0, [r3, #0]
  400528:	4770      	bx	lr
  40052a:	bf00      	nop
  40052c:	20000cc4 	.word	0x20000cc4

00400530 <xbee_register_at_command_responded_callback>:
*	AT command issued previously.
*
*	@param response_callback	the callback function
*/
void xbee_register_at_command_responded_callback( void(*response_callback)(XbeeATCommandResponse*) ){
	app_at_cmd_response_callback = response_callback;
  400530:	4b01      	ldr	r3, [pc, #4]	; (400538 <xbee_register_at_command_responded_callback+0x8>)
  400532:	6018      	str	r0, [r3, #0]
  400534:	4770      	bx	lr
  400536:	bf00      	nop
  400538:	20000cc8 	.word	0x20000cc8

0040053c <xbee_send_msg>:
*	Constructs and transmits a TX Request (msg delivery) command.
*
*	@param msg pointer to the msg to be sent
*	@param msg_id an id to be attached to the msg
*/
void xbee_send_msg(Message *msg, uint8_t msg_id ){
  40053c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400540:	b086      	sub	sp, #24

	//API ID
	api_frame.command_id = API_ID_TX;	//Tx request
	
	//Frame ID
	if( msg->address == MSG_BROADCAST_ADDRESS ){
  400542:	8802      	ldrh	r2, [r0, #0]
  400544:	f64f 73ff 	movw	r3, #65535	; 0xffff
  400548:	429a      	cmp	r2, r3
  40054a:	d109      	bne.n	400560 <xbee_send_msg+0x24>
		//enable response frame
		api_frame.frame_id = msg_id;
	}
	
	//Destination Address
	api_frame.dest_address[0] = (uint8_t)((msg->address)>>8);//MSB address ... careful here with endianness
  40054c:	23ff      	movs	r3, #255	; 0xff
  40054e:	f88d 300a 	strb.w	r3, [sp, #10]
	api_frame.dest_address[1] = (uint8_t)(msg->address); //LSB address
  400552:	f88d 300b 	strb.w	r3, [sp, #11]
	api_frame.command_id = API_ID_TX;	//Tx request
	
	//Frame ID
	if( msg->address == MSG_BROADCAST_ADDRESS ){
		//disable response frame
		api_frame.frame_id = 0;
  400556:	2700      	movs	r7, #0
		api_frame.frame_id = msg_id;
	}
	
	//Destination Address
	api_frame.dest_address[0] = (uint8_t)((msg->address)>>8);//MSB address ... careful here with endianness
	api_frame.dest_address[1] = (uint8_t)(msg->address); //LSB address
  400558:	461a      	mov	r2, r3
	
	//Options
	if( msg->address == MSG_BROADCAST_ADDRESS )
		api_frame.options = 0x01; //Disable ACK
  40055a:	f04f 0801 	mov.w	r8, #1
  40055e:	e008      	b.n	400572 <xbee_send_msg+0x36>
  400560:	460f      	mov	r7, r1
		//enable response frame
		api_frame.frame_id = msg_id;
	}
	
	//Destination Address
	api_frame.dest_address[0] = (uint8_t)((msg->address)>>8);//MSB address ... careful here with endianness
  400562:	0a13      	lsrs	r3, r2, #8
  400564:	f88d 300a 	strb.w	r3, [sp, #10]
	api_frame.dest_address[1] = (uint8_t)(msg->address); //LSB address
  400568:	b2d2      	uxtb	r2, r2
  40056a:	f88d 200b 	strb.w	r2, [sp, #11]
	
	//Options
	if( msg->address == MSG_BROADCAST_ADDRESS )
		api_frame.options = 0x01; //Disable ACK
	else
		api_frame.options = 0x00;
  40056e:	f04f 0800 	mov.w	r8, #0
	
	//RF Data (up to 100 bytes)
	api_frame.rf_data = msg->data;
  400572:	1c86      	adds	r6, r0, #2
	
	//Length of RF data
	api_frame.rf_data_length = msg->data_length;
  400574:	7b05      	ldrb	r5, [r0, #12]
	
	//Length of API frame
	api_frame.length = msg->data_length + 5; //rf data length + options + destination (2) + frameid + cmd id
  400576:	f105 0905 	add.w	r9, r5, #5
	//calculate checksum
	uint32_t sum = 0;
	
	sum += api_frame->command_id;
	sum += api_frame->frame_id;
	sum += api_frame->dest_address[0];
  40057a:	443b      	add	r3, r7
  40057c:	3301      	adds	r3, #1
	sum += api_frame->dest_address[1];
  40057e:	18d0      	adds	r0, r2, r3
	sum += api_frame->options;
  400580:	4440      	add	r0, r8

	for( uint32_t i = 0; i < api_frame->rf_data_length ; i++ ) //careful with the minus 1
  400582:	b135      	cbz	r5, 400592 <xbee_send_msg+0x56>
  400584:	4633      	mov	r3, r6
  400586:	1971      	adds	r1, r6, r5
	sum += api_frame->rf_data[i];
  400588:	f813 2b01 	ldrb.w	r2, [r3], #1
  40058c:	4410      	add	r0, r2
	sum += api_frame->frame_id;
	sum += api_frame->dest_address[0];
	sum += api_frame->dest_address[1];
	sum += api_frame->options;

	for( uint32_t i = 0; i < api_frame->rf_data_length ; i++ ) //careful with the minus 1
  40058e:	4299      	cmp	r1, r3
  400590:	d1fa      	bne.n	400588 <xbee_send_msg+0x4c>
	sum += api_frame->rf_data[i];
	
	api_frame->checksum = 0xFF - (uint8_t)sum;
  400592:	43c0      	mvns	r0, r0
  400594:	b2c4      	uxtb	r4, r0
	//Since the Xbee is a shared resource...
	
	//LOCK
	
	//send delimiter and length
	xbee_uart_putc( frame->start_delimiter );
  400596:	207e      	movs	r0, #126	; 0x7e
  400598:	f8df a044 	ldr.w	sl, [pc, #68]	; 4005e0 <xbee_send_msg+0xa4>
  40059c:	47d0      	blx	sl
	
	//send length
	xbee_uart_putc( (uint8_t)(frame->length >> 8) );
  40059e:	f3c9 2007 	ubfx	r0, r9, #8, #8
  4005a2:	47d0      	blx	sl
	xbee_uart_putc( (uint8_t)(frame->length) );
  4005a4:	fa5f f089 	uxtb.w	r0, r9
  4005a8:	47d0      	blx	sl
	
	//send cmd id
	xbee_uart_putc( frame->command_id );
  4005aa:	2001      	movs	r0, #1
  4005ac:	47d0      	blx	sl
	
	//send cmd id
	xbee_uart_putc( frame->frame_id );
  4005ae:	4638      	mov	r0, r7
  4005b0:	47d0      	blx	sl
	for(uint32_t i=0; i<8; i++){
		xbee_uart_putc( frame->dest_address[i] );
	}
#else
	for(uint32_t i=0; i<2; i++){
		xbee_uart_putc( frame->dest_address[i] );
  4005b2:	f89d 000a 	ldrb.w	r0, [sp, #10]
  4005b6:	47d0      	blx	sl
  4005b8:	f89d 000b 	ldrb.w	r0, [sp, #11]
  4005bc:	47d0      	blx	sl
	}
#endif

	//send options
	xbee_uart_putc( frame->options );
  4005be:	4640      	mov	r0, r8
  4005c0:	47d0      	blx	sl
	
	//send rf data
	for(uint32_t i=0; i<frame->rf_data_length; i++){
  4005c2:	b13d      	cbz	r5, 4005d4 <xbee_send_msg+0x98>
  4005c4:	4637      	mov	r7, r6
  4005c6:	4435      	add	r5, r6
		xbee_uart_putc( frame->rf_data[i] );
  4005c8:	4656      	mov	r6, sl
  4005ca:	f817 0b01 	ldrb.w	r0, [r7], #1
  4005ce:	47b0      	blx	r6

	//send options
	xbee_uart_putc( frame->options );
	
	//send rf data
	for(uint32_t i=0; i<frame->rf_data_length; i++){
  4005d0:	42bd      	cmp	r5, r7
  4005d2:	d1fa      	bne.n	4005ca <xbee_send_msg+0x8e>
		xbee_uart_putc( frame->rf_data[i] );
	}
	
	//send checksum
	xbee_uart_putc(  frame->checksum );
  4005d4:	4620      	mov	r0, r4
  4005d6:	4b02      	ldr	r3, [pc, #8]	; (4005e0 <xbee_send_msg+0xa4>)
  4005d8:	4798      	blx	r3
#endif
	
	//creates (fills the remaining of) a frame and sends
	create_msg_frame( &api_frame );
	send_msg_frame( &api_frame );
}
  4005da:	b006      	add	sp, #24
  4005dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4005e0:	00400735 	.word	0x00400735

004005e4 <xbee_send_at_command>:
*
*	@param command pointer to a null-terminated AT command
*	@param params pointer to a null-terminated list (string) of params
*	@param params_length number of parameters being passed
*/
void xbee_send_at_command( const uint8_t* command, const uint8_t* params, uint8_t params_length ){
  4005e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4005e8:	4604      	mov	r4, r0
  4005ea:	460f      	mov	r7, r1
  4005ec:	4616      	mov	r6, r2
	ApiFrameATCommand api_frame;

	//sets fields
	api_frame.command_id = API_ID_AT_COMMAND;	//At command request
	api_frame.frame_id = 0x4D;			//random frame id... no need to correlate 
	api_frame.length = 4 + params_length;// cmd_id+  frame_id + command (2) + params
  4005ee:	f102 0804 	add.w	r8, r2, #4
	uint32_t sum = 0;
	
	sum += api_frame->command_id;
	sum += api_frame->frame_id;
	sum += api_frame->at_command[0];
	sum += api_frame->at_command[1];
  4005f2:	7800      	ldrb	r0, [r0, #0]
  4005f4:	7863      	ldrb	r3, [r4, #1]
  4005f6:	4418      	add	r0, r3
  4005f8:	3055      	adds	r0, #85	; 0x55

	for( uint32_t i = 0; i < api_frame->at_param_length ; i++ ) //careful with the minus 1
  4005fa:	b132      	cbz	r2, 40060a <xbee_send_at_command+0x26>
  4005fc:	460b      	mov	r3, r1
  4005fe:	4411      	add	r1, r2
		sum += api_frame->at_param[i];
  400600:	f813 2b01 	ldrb.w	r2, [r3], #1
  400604:	4410      	add	r0, r2
	sum += api_frame->command_id;
	sum += api_frame->frame_id;
	sum += api_frame->at_command[0];
	sum += api_frame->at_command[1];

	for( uint32_t i = 0; i < api_frame->at_param_length ; i++ ) //careful with the minus 1
  400606:	428b      	cmp	r3, r1
  400608:	d1fa      	bne.n	400600 <xbee_send_at_command+0x1c>
		sum += api_frame->at_param[i];
	
	api_frame->checksum = 0xFF - (uint8_t)sum;
  40060a:	43c0      	mvns	r0, r0
  40060c:	b2c5      	uxtb	r5, r0
	
	//LOCK
	
	
	//send delimiter
	xbee_uart_putc( frame->start_delimiter );
  40060e:	207e      	movs	r0, #126	; 0x7e
  400610:	f8df 903c 	ldr.w	r9, [pc, #60]	; 400650 <xbee_send_at_command+0x6c>
  400614:	47c8      	blx	r9
	
	//send length
	xbee_uart_putc( (uint8_t)(frame->length >> 8) );
  400616:	f3c8 2007 	ubfx	r0, r8, #8, #8
  40061a:	47c8      	blx	r9
	xbee_uart_putc( (uint8_t)(frame->length));
  40061c:	fa5f f088 	uxtb.w	r0, r8
  400620:	47c8      	blx	r9
	
	//send cmd id
	xbee_uart_putc( frame->command_id );
  400622:	2008      	movs	r0, #8
  400624:	47c8      	blx	r9
	
	//send frame id
	xbee_uart_putc( frame->frame_id );
  400626:	204d      	movs	r0, #77	; 0x4d
  400628:	47c8      	blx	r9
	
	//send at command
	xbee_uart_putc( frame->at_command[0] );
  40062a:	7820      	ldrb	r0, [r4, #0]
  40062c:	47c8      	blx	r9
	xbee_uart_putc( frame->at_command[1] );
  40062e:	7860      	ldrb	r0, [r4, #1]
  400630:	47c8      	blx	r9
	
	//send parameter value
	for(uint32_t i=0; i< frame->at_param_length; i++){
  400632:	b13e      	cbz	r6, 400644 <xbee_send_at_command+0x60>
  400634:	463c      	mov	r4, r7
  400636:	443e      	add	r6, r7
		xbee_uart_putc( frame->at_param[i] );
  400638:	464f      	mov	r7, r9
  40063a:	f814 0b01 	ldrb.w	r0, [r4], #1
  40063e:	47b8      	blx	r7
	//send at command
	xbee_uart_putc( frame->at_command[0] );
	xbee_uart_putc( frame->at_command[1] );
	
	//send parameter value
	for(uint32_t i=0; i< frame->at_param_length; i++){
  400640:	42b4      	cmp	r4, r6
  400642:	d1fa      	bne.n	40063a <xbee_send_at_command+0x56>
		xbee_uart_putc( frame->at_param[i] );
	}

	//send checksum
	xbee_uart_putc( frame->checksum );
  400644:	4628      	mov	r0, r5
  400646:	4b02      	ldr	r3, [pc, #8]	; (400650 <xbee_send_at_command+0x6c>)
  400648:	4798      	blx	r3
  40064a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40064e:	bf00      	nop
  400650:	00400735 	.word	0x00400735

00400654 <xbee_init>:
*
*	@param baudrate	baudrate desired
*
*	@return true if the Xbee's baudrate matches the specified one, false otherwise
*/
uint32_t xbee_init( uint32_t baudrate ){
  400654:	b510      	push	{r4, lr}
  400656:	b082      	sub	sp, #8
  400658:	4604      	mov	r4, r0
	
	//sets data received callback
	xbee_uart_register_callback( data_received_callback ); //from uart to xbee (this is how xbee_uart notifies xbee of incoming data)
  40065a:	4823      	ldr	r0, [pc, #140]	; (4006e8 <xbee_init+0x94>)
  40065c:	4b23      	ldr	r3, [pc, #140]	; (4006ec <xbee_init+0x98>)
  40065e:	4798      	blx	r3
	
	//init uart
	xbee_uart_config_init(baudrate); //make sure xbee's baudrate matches this same baudrate
  400660:	4620      	mov	r0, r4
  400662:	4b23      	ldr	r3, [pc, #140]	; (4006f0 <xbee_init+0x9c>)
  400664:	4798      	blx	r3
*/
static bool is_xbee_baudrate_correct( uint32_t baudrate){
	
	// -- Read baud rate --
	
	xbee_send_at_command( (uint8_t*)"BD", (uint8_t*)"", 0 );
  400666:	2200      	movs	r2, #0
  400668:	4922      	ldr	r1, [pc, #136]	; (4006f4 <xbee_init+0xa0>)
  40066a:	4823      	ldr	r0, [pc, #140]	; (4006f8 <xbee_init+0xa4>)
  40066c:	4b23      	ldr	r3, [pc, #140]	; (4006fc <xbee_init+0xa8>)
  40066e:	4798      	blx	r3

	// -- Read response --
	
	while( xbee_uart_getc() != START_DELIMITER );
  400670:	4c23      	ldr	r4, [pc, #140]	; (400700 <xbee_init+0xac>)
  400672:	47a0      	blx	r4
  400674:	287e      	cmp	r0, #126	; 0x7e
  400676:	d1fc      	bne.n	400672 <xbee_init+0x1e>
	
	//length
	xbee_uart_getc();
  400678:	4c21      	ldr	r4, [pc, #132]	; (400700 <xbee_init+0xac>)
  40067a:	47a0      	blx	r4
	xbee_uart_getc();
  40067c:	47a0      	blx	r4
	
	//Read API (cmd) Identifier
	xbee_uart_getc();
  40067e:	47a0      	blx	r4
	
	//frame id
	xbee_uart_getc();
  400680:	47a0      	blx	r4
	
	//AT command
	xbee_uart_getc();
  400682:	47a0      	blx	r4
	xbee_uart_getc();
  400684:	47a0      	blx	r4
	
	//status
	xbee_uart_getc();
  400686:	47a0      	blx	r4
	
	//value requested (the baud rate)
	volatile uint8_t br = xbee_uart_getc() << 24;
  400688:	47a0      	blx	r4
  40068a:	2300      	movs	r3, #0
  40068c:	f88d 3007 	strb.w	r3, [sp, #7]
	br += xbee_uart_getc() << 16;
  400690:	47a0      	blx	r4
  400692:	f89d 3007 	ldrb.w	r3, [sp, #7]
  400696:	b2db      	uxtb	r3, r3
  400698:	f88d 3007 	strb.w	r3, [sp, #7]
	br += xbee_uart_getc() << 8;
  40069c:	47a0      	blx	r4
  40069e:	f89d 3007 	ldrb.w	r3, [sp, #7]
  4006a2:	b2db      	uxtb	r3, r3
  4006a4:	f88d 3007 	strb.w	r3, [sp, #7]
	br += xbee_uart_getc() << 0;
  4006a8:	47a0      	blx	r4
  4006aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
  4006ae:	4418      	add	r0, r3
  4006b0:	b2c0      	uxtb	r0, r0
  4006b2:	f88d 0007 	strb.w	r0, [sp, #7]
	
	//checksum
	xbee_uart_getc();
  4006b6:	47a0      	blx	r4
	
	
	// -- compare --
	
	if(br <= 7)
  4006b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
  4006bc:	b2db      	uxtb	r3, r3
  4006be:	2b07      	cmp	r3, #7
  4006c0:	d807      	bhi.n	4006d2 <xbee_init+0x7e>
		return br == baudrate_to_num( baudrate );
  4006c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
  4006c6:	b2db      	uxtb	r3, r3
  4006c8:	2b06      	cmp	r3, #6
  4006ca:	bf14      	ite	ne
  4006cc:	2300      	movne	r3, #0
  4006ce:	2301      	moveq	r3, #1
  4006d0:	e002      	b.n	4006d8 <xbee_init+0x84>
	else
		return br == baudrate;
  4006d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
  4006d6:	2300      	movs	r3, #0
	//init uart
	xbee_uart_config_init(baudrate); //make sure xbee's baudrate matches this same baudrate
	
	
	//Check Xbee baud rate is correct
	if( !is_xbee_baudrate_correct(RADIO_SPEED_RATE) )
  4006d8:	b11b      	cbz	r3, 4006e2 <xbee_init+0x8e>
		return false;

	//enable UART interrupts
	xbee_uart_enable_interrupt();
  4006da:	4b0a      	ldr	r3, [pc, #40]	; (400704 <xbee_init+0xb0>)
  4006dc:	4798      	blx	r3
	
	return true;
  4006de:	2001      	movs	r0, #1
  4006e0:	e000      	b.n	4006e4 <xbee_init+0x90>
	xbee_uart_config_init(baudrate); //make sure xbee's baudrate matches this same baudrate
	
	
	//Check Xbee baud rate is correct
	if( !is_xbee_baudrate_correct(RADIO_SPEED_RATE) )
		return false;
  4006e2:	2000      	movs	r0, #0

	//enable UART interrupts
	xbee_uart_enable_interrupt();
	
	return true;
}
  4006e4:	b002      	add	sp, #8
  4006e6:	bd10      	pop	{r4, pc}
  4006e8:	00400411 	.word	0x00400411
  4006ec:	004007f5 	.word	0x004007f5
  4006f0:	00400785 	.word	0x00400785
  4006f4:	004067cc 	.word	0x004067cc
  4006f8:	00406768 	.word	0x00406768
  4006fc:	004005e5 	.word	0x004005e5
  400700:	00400755 	.word	0x00400755
  400704:	00400715 	.word	0x00400715

00400708 <xbee_cpu_is_little_endian>:

	if (p[0] == 1)
		return true;
	else
		return false;
}
  400708:	2001      	movs	r0, #1
  40070a:	4770      	bx	lr

0040070c <xbee_cpu_swap_endianness_16bit>:
	uint8_t c1, c2;
	
	c1 = value & 0xff;
	c2 = (value >> 8) & 0xff;
	
	return (c1 << 8) + c2;
  40070c:	ba40      	rev16	r0, r0
	
}
  40070e:	b280      	uxth	r0, r0
  400710:	4770      	bx	lr
  400712:	bf00      	nop

00400714 <xbee_uart_enable_interrupt>:
/**
*	Enables UART interrupt.
*
*	Enables UART interrupt.
*/
void xbee_uart_enable_interrupt(void){
  400714:	b508      	push	{r3, lr}
	usart_enable_interrupt(USART_SERIAL, US_IER_RXRDY);
  400716:	2101      	movs	r1, #1
  400718:	4803      	ldr	r0, [pc, #12]	; (400728 <xbee_uart_enable_interrupt+0x14>)
  40071a:	4b04      	ldr	r3, [pc, #16]	; (40072c <xbee_uart_enable_interrupt+0x18>)
  40071c:	4798      	blx	r3
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40071e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400722:	4b03      	ldr	r3, [pc, #12]	; (400730 <xbee_uart_enable_interrupt+0x1c>)
  400724:	601a      	str	r2, [r3, #0]
  400726:	bd08      	pop	{r3, pc}
  400728:	40028000 	.word	0x40028000
  40072c:	0040150d 	.word	0x0040150d
  400730:	e000e100 	.word	0xe000e100

00400734 <xbee_uart_putc>:
*
*	Writes one character to the UART1. Blocks until writing to Tx is possible.
*
*	@param c the character to be written
*/
void xbee_uart_putc(uint8_t c){
  400734:	b508      	push	{r3, lr}
  400736:	4601      	mov	r1, r0
	//wait for tx to be ready
	while( !(USART_SERIAL->US_CSR & US_CSR_TXRDY) );
  400738:	4a04      	ldr	r2, [pc, #16]	; (40074c <xbee_uart_putc+0x18>)
  40073a:	6953      	ldr	r3, [r2, #20]
  40073c:	f013 0f02 	tst.w	r3, #2
  400740:	d0fb      	beq.n	40073a <xbee_uart_putc+0x6>
	//write
	usart_write(USART_SERIAL, c);
  400742:	4802      	ldr	r0, [pc, #8]	; (40074c <xbee_uart_putc+0x18>)
  400744:	4b02      	ldr	r3, [pc, #8]	; (400750 <xbee_uart_putc+0x1c>)
  400746:	4798      	blx	r3
  400748:	bd08      	pop	{r3, pc}
  40074a:	bf00      	nop
  40074c:	40028000 	.word	0x40028000
  400750:	00401515 	.word	0x00401515

00400754 <xbee_uart_getc>:
* 
*	Reads one character from the UART. Blocks until a character is ready.
*
*	@return A character from the UART buffer
*/
uint8_t xbee_uart_getc(void){
  400754:	b530      	push	{r4, r5, lr}
  400756:	b083      	sub	sp, #12
	uint8_t c;
	
	//wait for character
	uint32_t dw_status;
	do{
		dw_status = usart_get_status(USART1);
  400758:	4d07      	ldr	r5, [pc, #28]	; (400778 <xbee_uart_getc+0x24>)
  40075a:	4c08      	ldr	r4, [pc, #32]	; (40077c <xbee_uart_getc+0x28>)
  40075c:	4628      	mov	r0, r5
  40075e:	47a0      	blx	r4
	}while ( !(dw_status & US_CSR_RXRDY) );
  400760:	f010 0f01 	tst.w	r0, #1
  400764:	d0fa      	beq.n	40075c <xbee_uart_getc+0x8>
	
	//read character
	usart_read(USART1, &c);
  400766:	f10d 0107 	add.w	r1, sp, #7
  40076a:	4803      	ldr	r0, [pc, #12]	; (400778 <xbee_uart_getc+0x24>)
  40076c:	4b04      	ldr	r3, [pc, #16]	; (400780 <xbee_uart_getc+0x2c>)
  40076e:	4798      	blx	r3
	
	return c;
}
  400770:	f89d 0007 	ldrb.w	r0, [sp, #7]
  400774:	b003      	add	sp, #12
  400776:	bd30      	pop	{r4, r5, pc}
  400778:	40028000 	.word	0x40028000
  40077c:	00401511 	.word	0x00401511
  400780:	00401529 	.word	0x00401529

00400784 <xbee_uart_config_init>:
/**
*	Initializes and configures the UART.
*
*	@param baudrate baud rate
*/
void xbee_uart_config_init(uint32_t baudrate){
  400784:	b530      	push	{r4, r5, lr}
  400786:	b087      	sub	sp, #28
  400788:	4605      	mov	r5, r0
	pio_configure(PINS_USART1_PIO, PINS_USART1_TYPE, PINS_USART1_MASK, PINS_USART1_ATTR);
  40078a:	2300      	movs	r3, #0
  40078c:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
  400790:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400794:	480f      	ldr	r0, [pc, #60]	; (4007d4 <xbee_uart_config_init+0x50>)
  400796:	4c10      	ldr	r4, [pc, #64]	; (4007d8 <xbee_uart_config_init+0x54>)
  400798:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_USART1);
  40079a:	200f      	movs	r0, #15
  40079c:	4c0f      	ldr	r4, [pc, #60]	; (4007dc <xbee_uart_config_init+0x58>)
  40079e:	47a0      	blx	r4

	const sam_usart_opt_t usart_console_settings = {
  4007a0:	2300      	movs	r3, #0
  4007a2:	9303      	str	r3, [sp, #12]
  4007a4:	9304      	str	r3, [sp, #16]
  4007a6:	9305      	str	r3, [sp, #20]
  4007a8:	9500      	str	r5, [sp, #0]
  4007aa:	23c0      	movs	r3, #192	; 0xc0
  4007ac:	9301      	str	r3, [sp, #4]
  4007ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4007b2:	9302      	str	r3, [sp, #8]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4007b4:	200f      	movs	r0, #15
  4007b6:	47a0      	blx	r4
		USART_SERIAL_STOP_BIT,
		US_MR_CHMODE_NORMAL
	};

	sysclk_enable_peripheral_clock(USART_SERIAL_ID);	
	usart_init_rs232(USART_SERIAL, &usart_console_settings, sysclk_get_peripheral_hz());
  4007b8:	4c09      	ldr	r4, [pc, #36]	; (4007e0 <xbee_uart_config_init+0x5c>)
  4007ba:	4a0a      	ldr	r2, [pc, #40]	; (4007e4 <xbee_uart_config_init+0x60>)
  4007bc:	4669      	mov	r1, sp
  4007be:	4620      	mov	r0, r4
  4007c0:	4b09      	ldr	r3, [pc, #36]	; (4007e8 <xbee_uart_config_init+0x64>)
  4007c2:	4798      	blx	r3
	usart_enable_tx(USART_SERIAL);
  4007c4:	4620      	mov	r0, r4
  4007c6:	4b09      	ldr	r3, [pc, #36]	; (4007ec <xbee_uart_config_init+0x68>)
  4007c8:	4798      	blx	r3
	usart_enable_rx(USART_SERIAL);
  4007ca:	4620      	mov	r0, r4
  4007cc:	4b08      	ldr	r3, [pc, #32]	; (4007f0 <xbee_uart_config_init+0x6c>)
  4007ce:	4798      	blx	r3
}
  4007d0:	b007      	add	sp, #28
  4007d2:	bd30      	pop	{r4, r5, pc}
  4007d4:	400e0e00 	.word	0x400e0e00
  4007d8:	00400d71 	.word	0x00400d71
  4007dc:	00401295 	.word	0x00401295
  4007e0:	40028000 	.word	0x40028000
  4007e4:	07270e00 	.word	0x07270e00
  4007e8:	004014a9 	.word	0x004014a9
  4007ec:	004014fd 	.word	0x004014fd
  4007f0:	00401505 	.word	0x00401505

004007f4 <xbee_uart_register_callback>:
*	there is incoming data from UART Rx 
*
*	@param callback a pointer to the callback function
*/
void xbee_uart_register_callback( void(*callback)(void) ){
	data_received_callback = callback;
  4007f4:	4b01      	ldr	r3, [pc, #4]	; (4007fc <xbee_uart_register_callback+0x8>)
  4007f6:	6018      	str	r0, [r3, #0]
  4007f8:	4770      	bx	lr
  4007fa:	bf00      	nop
  4007fc:	20000ccc 	.word	0x20000ccc

00400800 <USART1_Handler>:
/**
*	USART1 Handler
*
*	USART1 Handler. Where everything begins... 
*/
void USART1_Handler(void){
  400800:	b508      	push	{r3, lr}
	
	uint32_t dw_status = usart_get_status(USART1);
  400802:	4805      	ldr	r0, [pc, #20]	; (400818 <USART1_Handler+0x18>)
  400804:	4b05      	ldr	r3, [pc, #20]	; (40081c <USART1_Handler+0x1c>)
  400806:	4798      	blx	r3
	
	if (dw_status & US_CSR_RXRDY) {
  400808:	f010 0f01 	tst.w	r0, #1
  40080c:	d002      	beq.n	400814 <USART1_Handler+0x14>
		(*data_received_callback)(); //notifies the upper layer data was received
  40080e:	4b04      	ldr	r3, [pc, #16]	; (400820 <USART1_Handler+0x20>)
  400810:	681b      	ldr	r3, [r3, #0]
  400812:	4798      	blx	r3
  400814:	bd08      	pop	{r3, pc}
  400816:	bf00      	nop
  400818:	40028000 	.word	0x40028000
  40081c:	00401511 	.word	0x00401511
  400820:	20000ccc 	.word	0x20000ccc

00400824 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
  400824:	b570      	push	{r4, r5, r6, lr}
  400826:	b082      	sub	sp, #8
  400828:	4606      	mov	r6, r0
	usart_spi_select_device(SSD1306_USART_SPI, &device);
	ssd1306_sel_cmd();
	usart_spi_transmit(SSD1306_USART_SPI, command);
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  40082a:	ac02      	add	r4, sp, #8
  40082c:	2302      	movs	r3, #2
  40082e:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  400832:	4d09      	ldr	r5, [pc, #36]	; (400858 <ssd1306_write_command+0x34>)
  400834:	4621      	mov	r1, r4
  400836:	4628      	mov	r0, r5
  400838:	4b08      	ldr	r3, [pc, #32]	; (40085c <ssd1306_write_command+0x38>)
  40083a:	4798      	blx	r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40083c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400840:	4b07      	ldr	r3, [pc, #28]	; (400860 <ssd1306_write_command+0x3c>)
  400842:	635a      	str	r2, [r3, #52]	; 0x34
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400844:	60ee      	str	r6, [r5, #12]
	ssd1306_sel_cmd();
	spi_write_single(SSD1306_SPI, command);
	delay_us(SSD1306_LATENCY); // At least 3us
  400846:	2056      	movs	r0, #86	; 0x56
  400848:	4b06      	ldr	r3, [pc, #24]	; (400864 <ssd1306_write_command+0x40>)
  40084a:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  40084c:	4621      	mov	r1, r4
  40084e:	4628      	mov	r0, r5
  400850:	4b05      	ldr	r3, [pc, #20]	; (400868 <ssd1306_write_command+0x44>)
  400852:	4798      	blx	r3
#endif
}
  400854:	b002      	add	sp, #8
  400856:	bd70      	pop	{r4, r5, r6, pc}
  400858:	40008000 	.word	0x40008000
  40085c:	00400b0d 	.word	0x00400b0d
  400860:	400e1200 	.word	0x400e1200
  400864:	20000001 	.word	0x20000001
  400868:	00400b39 	.word	0x00400b39

0040086c <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
  40086c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40086e:	b085      	sub	sp, #20
  400870:	4d25      	ldr	r5, [pc, #148]	; (400908 <ssd1306_init+0x9c>)
  400872:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
  400876:	636e      	str	r6, [r5, #52]	; 0x34
 * function, this command will control the RST pin.
 */
static inline void ssd1306_hard_reset(void)
{
	arch_ioport_set_pin_level(SSD1306_RES_PIN, false);
	delay_us(SSD1306_LATENCY); // At least 3us
  400878:	2056      	movs	r0, #86	; 0x56
  40087a:	4c24      	ldr	r4, [pc, #144]	; (40090c <ssd1306_init+0xa0>)
  40087c:	47a0      	blx	r4
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40087e:	632e      	str	r6, [r5, #48]	; 0x30
	arch_ioport_set_pin_level(SSD1306_RES_PIN, true);
	delay_us(SSD1306_LATENCY); // At least 3us
  400880:	2056      	movs	r0, #86	; 0x56
  400882:	47a0      	blx	r4
	};
	usart_spi_init(SSD1306_USART_SPI);
	usart_spi_setup_device(SSD1306_USART_SPI, &device, spi_flags,
			SSD1306_CLOCK_SPEED, spi_select_id);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {
  400884:	2702      	movs	r7, #2
  400886:	ae04      	add	r6, sp, #16
  400888:	f846 7d04 	str.w	r7, [r6, #-4]!
		.id = SSD1306_CS_PIN,
	};
	spi_master_init(SSD1306_SPI);
  40088c:	4c20      	ldr	r4, [pc, #128]	; (400910 <ssd1306_init+0xa4>)
  40088e:	4620      	mov	r0, r4
  400890:	4b20      	ldr	r3, [pc, #128]	; (400914 <ssd1306_init+0xa8>)
  400892:	4798      	blx	r3
	spi_master_setup_device(SSD1306_SPI, &device, spi_flags,
  400894:	2500      	movs	r5, #0
  400896:	9500      	str	r5, [sp, #0]
  400898:	4b1f      	ldr	r3, [pc, #124]	; (400918 <ssd1306_init+0xac>)
  40089a:	462a      	mov	r2, r5
  40089c:	4631      	mov	r1, r6
  40089e:	4620      	mov	r0, r4
  4008a0:	4e1e      	ldr	r6, [pc, #120]	; (40091c <ssd1306_init+0xb0>)
  4008a2:	47b0      	blx	r6
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4008a4:	2301      	movs	r3, #1
  4008a6:	6023      	str	r3, [r4, #0]

	// Initialize the interface
	ssd1306_interface_init();

	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  4008a8:	20a8      	movs	r0, #168	; 0xa8
  4008aa:	4c1d      	ldr	r4, [pc, #116]	; (400920 <ssd1306_init+0xb4>)
  4008ac:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  4008ae:	201f      	movs	r0, #31
  4008b0:	47a0      	blx	r4

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  4008b2:	20d3      	movs	r0, #211	; 0xd3
  4008b4:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  4008b6:	4628      	mov	r0, r5
  4008b8:	47a0      	blx	r4

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(0x00));
  4008ba:	2040      	movs	r0, #64	; 0x40
  4008bc:	47a0      	blx	r4

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  4008be:	20a1      	movs	r0, #161	; 0xa1
  4008c0:	47a0      	blx	r4

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  4008c2:	20c8      	movs	r0, #200	; 0xc8
  4008c4:	47a0      	blx	r4

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  4008c6:	20da      	movs	r0, #218	; 0xda
  4008c8:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  4008ca:	4638      	mov	r0, r7
  4008cc:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  4008ce:	2081      	movs	r0, #129	; 0x81
  4008d0:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  4008d2:	208f      	movs	r0, #143	; 0x8f
  4008d4:	47a0      	blx	r4

	ssd1306_set_contrast(0x8F);

	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  4008d6:	20a4      	movs	r0, #164	; 0xa4
  4008d8:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  4008da:	20a6      	movs	r0, #166	; 0xa6
  4008dc:	47a0      	blx	r4

	ssd1306_display_invert_disable();

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  4008de:	20d5      	movs	r0, #213	; 0xd5
  4008e0:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  4008e2:	2080      	movs	r0, #128	; 0x80
  4008e4:	47a0      	blx	r4

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  4008e6:	208d      	movs	r0, #141	; 0x8d
  4008e8:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  4008ea:	2014      	movs	r0, #20
  4008ec:	47a0      	blx	r4

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  4008ee:	20db      	movs	r0, #219	; 0xdb
  4008f0:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  4008f2:	2040      	movs	r0, #64	; 0x40
  4008f4:	47a0      	blx	r4

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  4008f6:	20d9      	movs	r0, #217	; 0xd9
  4008f8:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  4008fa:	20f1      	movs	r0, #241	; 0xf1
  4008fc:	47a0      	blx	r4
 *
 * This function will turn on the OLED.
 */
static inline void ssd1306_display_on(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  4008fe:	20af      	movs	r0, #175	; 0xaf
  400900:	47a0      	blx	r4

	ssd1306_display_on();
}
  400902:	b005      	add	sp, #20
  400904:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400906:	bf00      	nop
  400908:	400e1200 	.word	0x400e1200
  40090c:	20000001 	.word	0x20000001
  400910:	40008000 	.word	0x40008000
  400914:	00400a39 	.word	0x00400a39
  400918:	004c4b40 	.word	0x004c4b40
  40091c:	00400a8d 	.word	0x00400a8d
  400920:	00400825 	.word	0x00400825

00400924 <ssd1306_write_text>:
void ssd1306_write_text(const char *string)
{
	uint8_t *char_ptr;
	uint8_t i;

	while (*string != 0) {
  400924:	7803      	ldrb	r3, [r0, #0]
  400926:	2b00      	cmp	r3, #0
  400928:	d047      	beq.n	4009ba <ssd1306_write_text+0x96>
/**
 * \brief Display text on OLED screen.
 * \param string String to display.
 */
void ssd1306_write_text(const char *string)
{
  40092a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40092e:	b083      	sub	sp, #12
  400930:	4683      	mov	fp, r0
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
	spi_select_device(SSD1306_SPI, &device);
  400932:	4e22      	ldr	r6, [pc, #136]	; (4009bc <ssd1306_write_text+0x98>)
  400934:	f8df a094 	ldr.w	sl, [pc, #148]	; 4009cc <ssd1306_write_text+0xa8>
  400938:	f8df 9094 	ldr.w	r9, [pc, #148]	; 4009d0 <ssd1306_write_text+0xac>
	uint8_t *char_ptr;
	uint8_t i;

	while (*string != 0) {
		if (*string < 0x7F) {
  40093c:	2b7e      	cmp	r3, #126	; 0x7e
  40093e:	d835      	bhi.n	4009ac <ssd1306_write_text+0x88>
			char_ptr = font_table[*string - 32];
  400940:	3b20      	subs	r3, #32
  400942:	4a1f      	ldr	r2, [pc, #124]	; (4009c0 <ssd1306_write_text+0x9c>)
  400944:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
			for (i = 1; i <= char_ptr[0]; i++) {
  400948:	783b      	ldrb	r3, [r7, #0]
  40094a:	b1db      	cbz	r3, 400984 <ssd1306_write_text+0x60>
  40094c:	2401      	movs	r4, #1
				ssd1306_write_data(char_ptr[i]);
  40094e:	f817 8004 	ldrb.w	r8, [r7, r4]
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  400952:	ad02      	add	r5, sp, #8
  400954:	2302      	movs	r3, #2
  400956:	f845 3d04 	str.w	r3, [r5, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  40095a:	4629      	mov	r1, r5
  40095c:	4630      	mov	r0, r6
  40095e:	47d0      	blx	sl
  400960:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  400964:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400968:	f8c6 800c 	str.w	r8, [r6, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  40096c:	2056      	movs	r0, #86	; 0x56
  40096e:	4b15      	ldr	r3, [pc, #84]	; (4009c4 <ssd1306_write_text+0xa0>)
  400970:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  400972:	4629      	mov	r1, r5
  400974:	4630      	mov	r0, r6
  400976:	4b14      	ldr	r3, [pc, #80]	; (4009c8 <ssd1306_write_text+0xa4>)
  400978:	4798      	blx	r3
	uint8_t i;

	while (*string != 0) {
		if (*string < 0x7F) {
			char_ptr = font_table[*string - 32];
			for (i = 1; i <= char_ptr[0]; i++) {
  40097a:	3401      	adds	r4, #1
  40097c:	b2e4      	uxtb	r4, r4
  40097e:	783b      	ldrb	r3, [r7, #0]
  400980:	42a3      	cmp	r3, r4
  400982:	d2e4      	bcs.n	40094e <ssd1306_write_text+0x2a>
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  400984:	ac02      	add	r4, sp, #8
  400986:	2302      	movs	r3, #2
  400988:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  40098c:	4621      	mov	r1, r4
  40098e:	4630      	mov	r0, r6
  400990:	47d0      	blx	sl
  400992:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  400996:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
  40099a:	2300      	movs	r3, #0
  40099c:	60f3      	str	r3, [r6, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  40099e:	2056      	movs	r0, #86	; 0x56
  4009a0:	4b08      	ldr	r3, [pc, #32]	; (4009c4 <ssd1306_write_text+0xa0>)
  4009a2:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  4009a4:	4621      	mov	r1, r4
  4009a6:	4630      	mov	r0, r6
  4009a8:	4b07      	ldr	r3, [pc, #28]	; (4009c8 <ssd1306_write_text+0xa4>)
  4009aa:	4798      	blx	r3
void ssd1306_write_text(const char *string)
{
	uint8_t *char_ptr;
	uint8_t i;

	while (*string != 0) {
  4009ac:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
  4009b0:	2b00      	cmp	r3, #0
  4009b2:	d1c3      	bne.n	40093c <ssd1306_write_text+0x18>
			}
			ssd1306_write_data(0x00);
		}
			string++;
	}
}
  4009b4:	b003      	add	sp, #12
  4009b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4009ba:	4770      	bx	lr
  4009bc:	40008000 	.word	0x40008000
  4009c0:	20000034 	.word	0x20000034
  4009c4:	20000001 	.word	0x20000001
  4009c8:	00400b39 	.word	0x00400b39
  4009cc:	00400b0d 	.word	0x00400b0d
  4009d0:	400e1200 	.word	0x400e1200

004009d4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4009d4:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4009d6:	480e      	ldr	r0, [pc, #56]	; (400a10 <sysclk_init+0x3c>)
  4009d8:	4b0e      	ldr	r3, [pc, #56]	; (400a14 <sysclk_init+0x40>)
  4009da:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4009dc:	213e      	movs	r1, #62	; 0x3e
  4009de:	2000      	movs	r0, #0
  4009e0:	4b0d      	ldr	r3, [pc, #52]	; (400a18 <sysclk_init+0x44>)
  4009e2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4009e4:	4c0d      	ldr	r4, [pc, #52]	; (400a1c <sysclk_init+0x48>)
  4009e6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4009e8:	2800      	cmp	r0, #0
  4009ea:	d0fc      	beq.n	4009e6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4009ec:	4b0c      	ldr	r3, [pc, #48]	; (400a20 <sysclk_init+0x4c>)
  4009ee:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4009f0:	4a0c      	ldr	r2, [pc, #48]	; (400a24 <sysclk_init+0x50>)
  4009f2:	4b0d      	ldr	r3, [pc, #52]	; (400a28 <sysclk_init+0x54>)
  4009f4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  4009f6:	4c0d      	ldr	r4, [pc, #52]	; (400a2c <sysclk_init+0x58>)
  4009f8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4009fa:	2800      	cmp	r0, #0
  4009fc:	d0fc      	beq.n	4009f8 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4009fe:	2010      	movs	r0, #16
  400a00:	4b0b      	ldr	r3, [pc, #44]	; (400a30 <sysclk_init+0x5c>)
  400a02:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400a04:	4b0b      	ldr	r3, [pc, #44]	; (400a34 <sysclk_init+0x60>)
  400a06:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400a08:	4801      	ldr	r0, [pc, #4]	; (400a10 <sysclk_init+0x3c>)
  400a0a:	4b02      	ldr	r3, [pc, #8]	; (400a14 <sysclk_init+0x40>)
  400a0c:	4798      	blx	r3
  400a0e:	bd10      	pop	{r4, pc}
  400a10:	07270e00 	.word	0x07270e00
  400a14:	00401711 	.word	0x00401711
  400a18:	00401211 	.word	0x00401211
  400a1c:	00401265 	.word	0x00401265
  400a20:	00401275 	.word	0x00401275
  400a24:	20133f01 	.word	0x20133f01
  400a28:	400e0400 	.word	0x400e0400
  400a2c:	00401285 	.word	0x00401285
  400a30:	004011a9 	.word	0x004011a9
  400a34:	004015fd 	.word	0x004015fd

00400a38 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  400a38:	b510      	push	{r4, lr}
  400a3a:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  400a3c:	4b10      	ldr	r3, [pc, #64]	; (400a80 <spi_master_init+0x48>)
  400a3e:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  400a40:	2380      	movs	r3, #128	; 0x80
  400a42:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400a44:	6863      	ldr	r3, [r4, #4]
  400a46:	f043 0301 	orr.w	r3, r3, #1
  400a4a:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400a4c:	6863      	ldr	r3, [r4, #4]
  400a4e:	f043 0310 	orr.w	r3, r3, #16
  400a52:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400a54:	6863      	ldr	r3, [r4, #4]
  400a56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  400a5a:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  400a5c:	2100      	movs	r1, #0
  400a5e:	4620      	mov	r0, r4
  400a60:	4b08      	ldr	r3, [pc, #32]	; (400a84 <spi_master_init+0x4c>)
  400a62:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_fixed_peripheral_select(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400a64:	6863      	ldr	r3, [r4, #4]
  400a66:	f023 0302 	bic.w	r3, r3, #2
  400a6a:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_peripheral_select_decode(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  400a6c:	6863      	ldr	r3, [r4, #4]
  400a6e:	f023 0304 	bic.w	r3, r3, #4
  400a72:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  400a74:	2100      	movs	r1, #0
  400a76:	4620      	mov	r0, r4
  400a78:	4b03      	ldr	r3, [pc, #12]	; (400a88 <spi_master_init+0x50>)
  400a7a:	4798      	blx	r3
  400a7c:	bd10      	pop	{r4, pc}
  400a7e:	bf00      	nop
  400a80:	004012e9 	.word	0x004012e9
  400a84:	004012f9 	.word	0x004012f9
  400a88:	00401311 	.word	0x00401311

00400a8c <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  400a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400a90:	4604      	mov	r4, r0
  400a92:	460d      	mov	r5, r1
  400a94:	4616      	mov	r6, r2
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_cpu_hz());
  400a96:	4915      	ldr	r1, [pc, #84]	; (400aec <spi_master_setup_device+0x60>)
  400a98:	4618      	mov	r0, r3
  400a9a:	4b15      	ldr	r3, [pc, #84]	; (400af0 <spi_master_setup_device+0x64>)
  400a9c:	4798      	blx	r3
  400a9e:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  400aa0:	2300      	movs	r3, #0
  400aa2:	461a      	mov	r2, r3
  400aa4:	6829      	ldr	r1, [r5, #0]
  400aa6:	4620      	mov	r0, r4
  400aa8:	f8df 805c 	ldr.w	r8, [pc, #92]	; 400b08 <spi_master_setup_device+0x7c>
  400aac:	47c0      	blx	r8
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  400aae:	2208      	movs	r2, #8
  400ab0:	6829      	ldr	r1, [r5, #0]
  400ab2:	4620      	mov	r0, r4
  400ab4:	4b0f      	ldr	r3, [pc, #60]	; (400af4 <spi_master_setup_device+0x68>)
  400ab6:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  400ab8:	b2fa      	uxtb	r2, r7
  400aba:	6829      	ldr	r1, [r5, #0]
  400abc:	4620      	mov	r0, r4
  400abe:	4b0e      	ldr	r3, [pc, #56]	; (400af8 <spi_master_setup_device+0x6c>)
  400ac0:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  400ac2:	2208      	movs	r2, #8
  400ac4:	6829      	ldr	r1, [r5, #0]
  400ac6:	4620      	mov	r0, r4
  400ac8:	4b0c      	ldr	r3, [pc, #48]	; (400afc <spi_master_setup_device+0x70>)
  400aca:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  400acc:	0872      	lsrs	r2, r6, #1
  400ace:	6829      	ldr	r1, [r5, #0]
  400ad0:	4620      	mov	r0, r4
  400ad2:	4b0b      	ldr	r3, [pc, #44]	; (400b00 <spi_master_setup_device+0x74>)
  400ad4:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  400ad6:	f086 0201 	eor.w	r2, r6, #1
  400ada:	f002 0201 	and.w	r2, r2, #1
  400ade:	6829      	ldr	r1, [r5, #0]
  400ae0:	4620      	mov	r0, r4
  400ae2:	4b08      	ldr	r3, [pc, #32]	; (400b04 <spi_master_setup_device+0x78>)
  400ae4:	4798      	blx	r3
  400ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400aea:	bf00      	nop
  400aec:	07270e00 	.word	0x07270e00
  400af0:	004013bd 	.word	0x004013bd
  400af4:	004013a9 	.word	0x004013a9
  400af8:	004013d5 	.word	0x004013d5
  400afc:	00401365 	.word	0x00401365
  400b00:	00401325 	.word	0x00401325
  400b04:	00401345 	.word	0x00401345
  400b08:	004013fd 	.word	0x004013fd

00400b0c <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  400b0c:	b508      	push	{r3, lr}
 *
 * \return 1 for decode mode, 0 for direct mode.
 */
static inline uint32_t spi_get_peripheral_select_decode_setting(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  400b0e:	6843      	ldr	r3, [r0, #4]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  400b10:	f013 0f04 	tst.w	r3, #4
  400b14:	d005      	beq.n	400b22 <spi_select_device+0x16>
		if (device->id < MAX_NUM_WITH_DECODER) {
  400b16:	6809      	ldr	r1, [r1, #0]
  400b18:	290f      	cmp	r1, #15
  400b1a:	d80a      	bhi.n	400b32 <spi_select_device+0x26>
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  400b1c:	4b05      	ldr	r3, [pc, #20]	; (400b34 <spi_select_device+0x28>)
  400b1e:	4798      	blx	r3
  400b20:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  400b22:	680b      	ldr	r3, [r1, #0]
  400b24:	2b03      	cmp	r3, #3
  400b26:	d804      	bhi.n	400b32 <spi_select_device+0x26>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  400b28:	2101      	movs	r1, #1
  400b2a:	4099      	lsls	r1, r3
  400b2c:	43c9      	mvns	r1, r1
  400b2e:	4b01      	ldr	r3, [pc, #4]	; (400b34 <spi_select_device+0x28>)
  400b30:	4798      	blx	r3
  400b32:	bd08      	pop	{r3, pc}
  400b34:	004012f9 	.word	0x004012f9

00400b38 <spi_deselect_device>:
 * \param device  SPI device.
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
void spi_deselect_device(Spi *p_spi, struct spi_device *device)
{
  400b38:	b510      	push	{r4, lr}
  400b3a:	4604      	mov	r4, r0
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400b3c:	6923      	ldr	r3, [r4, #16]
	/* avoid Cppcheck Warning */
	UNUSED(device);
	while (!spi_is_tx_empty(p_spi)) {
  400b3e:	f413 7f00 	tst.w	r3, #512	; 0x200
  400b42:	d0fb      	beq.n	400b3c <spi_deselect_device+0x4>
	}

	// Assert all lines; no peripheral is selected.
	spi_set_peripheral_chip_select_value(p_spi, NONE_CHIP_SELECT_ID);
  400b44:	210f      	movs	r1, #15
  400b46:	4620      	mov	r0, r4
  400b48:	4b02      	ldr	r3, [pc, #8]	; (400b54 <spi_deselect_device+0x1c>)
  400b4a:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_lastxfer(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_LASTXFER;
  400b4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400b50:	6023      	str	r3, [r4, #0]
  400b52:	bd10      	pop	{r4, pc}
  400b54:	004012f9 	.word	0x004012f9

00400b58 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  400b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  400b5a:	4838      	ldr	r0, [pc, #224]	; (400c3c <board_init+0xe4>)
  400b5c:	4b38      	ldr	r3, [pc, #224]	; (400c40 <board_init+0xe8>)
  400b5e:	4798      	blx	r3
  400b60:	200b      	movs	r0, #11
  400b62:	4c38      	ldr	r4, [pc, #224]	; (400c44 <board_init+0xec>)
  400b64:	47a0      	blx	r4
  400b66:	200c      	movs	r0, #12
  400b68:	47a0      	blx	r4
  400b6a:	200d      	movs	r0, #13
  400b6c:	47a0      	blx	r4
  400b6e:	4b36      	ldr	r3, [pc, #216]	; (400c48 <board_init+0xf0>)
  400b70:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400b74:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400b76:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400b78:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400b7c:	4c33      	ldr	r4, [pc, #204]	; (400c4c <board_init+0xf4>)
  400b7e:	2504      	movs	r5, #4
  400b80:	6165      	str	r5, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400b82:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  400b86:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400b88:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400b8c:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400b8e:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400b90:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400b94:	6f22      	ldr	r2, [r4, #112]	; 0x70
  400b96:	f022 0204 	bic.w	r2, r2, #4
  400b9a:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400b9c:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400b9e:	f022 0204 	bic.w	r2, r2, #4
  400ba2:	6762      	str	r2, [r4, #116]	; 0x74
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400ba4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400ba8:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400baa:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400bac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400bb0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400bb4:	6322      	str	r2, [r4, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400bb6:	6122      	str	r2, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400bb8:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400bbc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400bc0:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400bc2:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400bc4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  400bc8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400bcc:	210c      	movs	r1, #12
  400bce:	4820      	ldr	r0, [pc, #128]	; (400c50 <board_init+0xf8>)
  400bd0:	4b20      	ldr	r3, [pc, #128]	; (400c54 <board_init+0xfc>)
  400bd2:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  400bd4:	4f20      	ldr	r7, [pc, #128]	; (400c58 <board_init+0x100>)
  400bd6:	4639      	mov	r1, r7
  400bd8:	2003      	movs	r0, #3
  400bda:	4e20      	ldr	r6, [pc, #128]	; (400c5c <board_init+0x104>)
  400bdc:	47b0      	blx	r6
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  400bde:	4639      	mov	r1, r7
  400be0:	4628      	mov	r0, r5
  400be2:	47b0      	blx	r6
#endif

	/* Configure SPI pins */
#ifdef CONF_BOARD_SPI
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  400be4:	4639      	mov	r1, r7
  400be6:	200c      	movs	r0, #12
  400be8:	47b0      	blx	r6
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  400bea:	4639      	mov	r1, r7
  400bec:	200d      	movs	r0, #13
  400bee:	47b0      	blx	r6
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  400bf0:	4639      	mov	r1, r7
  400bf2:	200e      	movs	r0, #14
  400bf4:	47b0      	blx	r6

#ifdef CONF_BOARD_SPI_NPCS1
#if defined(CONF_BOARD_SPI_NPCS1_GPIO) && defined(CONF_BOARD_SPI_NPCS1_FLAGS)
	gpio_configure_pin(CONF_BOARD_SPI_NPCS1_GPIO, CONF_BOARD_SPI_NPCS1_FLAGS);
#else
	gpio_configure_pin(SPI_NPCS1_PA9_GPIO, SPI_NPCS1_PA9_FLAGS);
  400bf6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400bfa:	2009      	movs	r0, #9
  400bfc:	47b0      	blx	r6

#ifdef CONF_BOARD_SPI_NPCS2
#if defined(CONF_BOARD_SPI_NPCS2_GPIO) && defined(CONF_BOARD_SPI_NPCS2_FLAGS)
	gpio_configure_pin(CONF_BOARD_SPI_NPCS2_GPIO, CONF_BOARD_SPI_NPCS2_FLAGS);
#else
	gpio_configure_pin(SPI_NPCS2_PA10_GPIO, SPI_NPCS2_PA10_FLAGS);
  400bfe:	4918      	ldr	r1, [pc, #96]	; (400c60 <board_init+0x108>)
  400c00:	200a      	movs	r0, #10
  400c02:	47b0      	blx	r6
#endif
#endif
#endif /* CONF_BOARD_SPI */

#ifdef CONF_BOARD_OLED_UG_2832HSWEG04
	gpio_configure_pin(UG_2832HSWEG04_DATA_CMD_GPIO, UG_2832HSWEG04_DATA_CMD_FLAGS);
  400c04:	f107 5740 	add.w	r7, r7, #805306368	; 0x30000000
  400c08:	4639      	mov	r1, r7
  400c0a:	2055      	movs	r0, #85	; 0x55
  400c0c:	47b0      	blx	r6
	gpio_configure_pin(UG_2832HSWEG04_RESET_GPIO, UG_2832HSWEG04_RESET_FLAGS);
  400c0e:	4639      	mov	r1, r7
  400c10:	205f      	movs	r0, #95	; 0x5f
  400c12:	47b0      	blx	r6
#endif

#ifdef CONF_BOARD_SD_MMC_SPI
	gpio_configure_pin(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
  400c14:	4913      	ldr	r1, [pc, #76]	; (400c64 <board_init+0x10c>)
  400c16:	204c      	movs	r0, #76	; 0x4c
  400c18:	47b0      	blx	r6
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  400c1a:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400c1c:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400c20:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400c22:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400c24:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400c28:	6f23      	ldr	r3, [r4, #112]	; 0x70
  400c2a:	f023 0304 	bic.w	r3, r3, #4
  400c2e:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400c30:	6f63      	ldr	r3, [r4, #116]	; 0x74
  400c32:	f023 0304 	bic.w	r3, r3, #4
  400c36:	6763      	str	r3, [r4, #116]	; 0x74
  400c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400c3a:	bf00      	nop
  400c3c:	400e1450 	.word	0x400e1450
  400c40:	00401541 	.word	0x00401541
  400c44:	00401295 	.word	0x00401295
  400c48:	400e1200 	.word	0x400e1200
  400c4c:	400e0e00 	.word	0x400e0e00
  400c50:	400e1000 	.word	0x400e1000
  400c54:	00400f69 	.word	0x00400f69
  400c58:	08000001 	.word	0x08000001
  400c5c:	00400e45 	.word	0x00400e45
  400c60:	10000001 	.word	0x10000001
  400c64:	28000001 	.word	0x28000001

00400c68 <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  400c68:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  400c6c:	0052      	lsls	r2, r2, #1
  400c6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400c72:	fbb3 f2f2 	udiv	r2, r3, r2
  400c76:	3a01      	subs	r2, #1
  400c78:	f3c2 020d 	ubfx	r2, r2, #0, #14
  400c7c:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  400c80:	4770      	bx	lr
  400c82:	bf00      	nop

00400c84 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400c84:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400c86:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400c8a:	d02f      	beq.n	400cec <pio_set_peripheral+0x68>
  400c8c:	d807      	bhi.n	400c9e <pio_set_peripheral+0x1a>
  400c8e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400c92:	d014      	beq.n	400cbe <pio_set_peripheral+0x3a>
  400c94:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400c98:	d01e      	beq.n	400cd8 <pio_set_peripheral+0x54>
  400c9a:	b939      	cbnz	r1, 400cac <pio_set_peripheral+0x28>
  400c9c:	4770      	bx	lr
  400c9e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400ca2:	d036      	beq.n	400d12 <pio_set_peripheral+0x8e>
  400ca4:	d804      	bhi.n	400cb0 <pio_set_peripheral+0x2c>
  400ca6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400caa:	d029      	beq.n	400d00 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400cac:	6042      	str	r2, [r0, #4]
  400cae:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400cb0:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400cb4:	d02d      	beq.n	400d12 <pio_set_peripheral+0x8e>
  400cb6:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400cba:	d02a      	beq.n	400d12 <pio_set_peripheral+0x8e>
  400cbc:	e7f6      	b.n	400cac <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400cbe:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400cc0:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400cc2:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400cc4:	43d3      	mvns	r3, r2
  400cc6:	4021      	ands	r1, r4
  400cc8:	4019      	ands	r1, r3
  400cca:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400ccc:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400cce:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400cd0:	4021      	ands	r1, r4
  400cd2:	400b      	ands	r3, r1
  400cd4:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400cd6:	e01a      	b.n	400d0e <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400cd8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400cda:	4313      	orrs	r3, r2
  400cdc:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400cde:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400ce0:	6f43      	ldr	r3, [r0, #116]	; 0x74
  400ce2:	400b      	ands	r3, r1
  400ce4:	ea23 0302 	bic.w	r3, r3, r2
  400ce8:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400cea:	e7df      	b.n	400cac <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400cec:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400cee:	6f03      	ldr	r3, [r0, #112]	; 0x70
  400cf0:	400b      	ands	r3, r1
  400cf2:	ea23 0302 	bic.w	r3, r3, r2
  400cf6:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400cf8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400cfa:	4313      	orrs	r3, r2
  400cfc:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400cfe:	e7d5      	b.n	400cac <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400d00:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400d02:	4313      	orrs	r3, r2
  400d04:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400d06:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400d08:	4313      	orrs	r3, r2
  400d0a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400d0c:	e7ce      	b.n	400cac <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400d0e:	6042      	str	r2, [r0, #4]
}
  400d10:	bc10      	pop	{r4}
  400d12:	4770      	bx	lr

00400d14 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400d14:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400d16:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  400d1a:	bf14      	ite	ne
  400d1c:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400d1e:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400d20:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  400d24:	bf14      	ite	ne
  400d26:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400d28:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400d2a:	f012 0f02 	tst.w	r2, #2
  400d2e:	d002      	beq.n	400d36 <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  400d30:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  400d34:	e004      	b.n	400d40 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400d36:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  400d3a:	bf18      	it	ne
  400d3c:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400d40:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400d42:	6001      	str	r1, [r0, #0]
  400d44:	4770      	bx	lr
  400d46:	bf00      	nop

00400d48 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400d48:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400d4a:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400d4c:	9c01      	ldr	r4, [sp, #4]
  400d4e:	b10c      	cbz	r4, 400d54 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  400d50:	6641      	str	r1, [r0, #100]	; 0x64
  400d52:	e000      	b.n	400d56 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400d54:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  400d56:	b10b      	cbz	r3, 400d5c <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  400d58:	6501      	str	r1, [r0, #80]	; 0x50
  400d5a:	e000      	b.n	400d5e <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400d5c:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400d5e:	b10a      	cbz	r2, 400d64 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  400d60:	6301      	str	r1, [r0, #48]	; 0x30
  400d62:	e000      	b.n	400d66 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  400d64:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400d66:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400d68:	6001      	str	r1, [r0, #0]
}
  400d6a:	bc10      	pop	{r4}
  400d6c:	4770      	bx	lr
  400d6e:	bf00      	nop

00400d70 <pio_configure>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
  400d70:	b570      	push	{r4, r5, r6, lr}
  400d72:	b082      	sub	sp, #8
  400d74:	4605      	mov	r5, r0
  400d76:	4616      	mov	r6, r2
  400d78:	461c      	mov	r4, r3
	/* Configure pins */
	switch (ul_type) {
  400d7a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400d7e:	d014      	beq.n	400daa <pio_configure+0x3a>
  400d80:	d809      	bhi.n	400d96 <pio_configure+0x26>
  400d82:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400d86:	d010      	beq.n	400daa <pio_configure+0x3a>
  400d88:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400d8c:	d00d      	beq.n	400daa <pio_configure+0x3a>
  400d8e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400d92:	d12b      	bne.n	400dec <pio_configure+0x7c>
  400d94:	e009      	b.n	400daa <pio_configure+0x3a>
  400d96:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400d9a:	d017      	beq.n	400dcc <pio_configure+0x5c>
  400d9c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400da0:	d014      	beq.n	400dcc <pio_configure+0x5c>
  400da2:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400da6:	d00b      	beq.n	400dc0 <pio_configure+0x50>
  400da8:	e020      	b.n	400dec <pio_configure+0x7c>
	case PIO_PERIPH_B:
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_PERIPH_C:
	case PIO_PERIPH_D:
#endif
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  400daa:	4632      	mov	r2, r6
  400dac:	4628      	mov	r0, r5
  400dae:	4b11      	ldr	r3, [pc, #68]	; (400df4 <pio_configure+0x84>)
  400db0:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400db2:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400db6:	bf14      	ite	ne
  400db8:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400dba:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400dbc:	2001      	movs	r0, #1
  400dbe:	e016      	b.n	400dee <pio_configure+0x7e>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
		break;

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400dc0:	461a      	mov	r2, r3
  400dc2:	4631      	mov	r1, r6
  400dc4:	4b0c      	ldr	r3, [pc, #48]	; (400df8 <pio_configure+0x88>)
  400dc6:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  400dc8:	2001      	movs	r0, #1
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
		break;

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
		break;
  400dca:	e010      	b.n	400dee <pio_configure+0x7e>

	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400dcc:	f004 0301 	and.w	r3, r4, #1
  400dd0:	9300      	str	r3, [sp, #0]
  400dd2:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400dd6:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400dda:	bf14      	ite	ne
  400ddc:	2200      	movne	r2, #0
  400dde:	2201      	moveq	r2, #1
  400de0:	4631      	mov	r1, r6
  400de2:	4628      	mov	r0, r5
  400de4:	4c05      	ldr	r4, [pc, #20]	; (400dfc <pio_configure+0x8c>)
  400de6:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  400de8:	2001      	movs	r0, #1
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
		break;
  400dea:	e000      	b.n	400dee <pio_configure+0x7e>

	default:
		return 0;
  400dec:	2000      	movs	r0, #0
	}

	return 1;
}
  400dee:	b002      	add	sp, #8
  400df0:	bd70      	pop	{r4, r5, r6, pc}
  400df2:	bf00      	nop
  400df4:	00400c85 	.word	0x00400c85
  400df8:	00400d15 	.word	0x00400d15
  400dfc:	00400d49 	.word	0x00400d49

00400e00 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  400e00:	f012 0f10 	tst.w	r2, #16
  400e04:	d010      	beq.n	400e28 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  400e06:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400e0a:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  400e0e:	bf14      	ite	ne
  400e10:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  400e14:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  400e18:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  400e1c:	bf14      	ite	ne
  400e1e:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  400e22:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  400e26:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  400e28:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400e2c:	4770      	bx	lr
  400e2e:	bf00      	nop

00400e30 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
  400e30:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
  400e32:	6401      	str	r1, [r0, #64]	; 0x40
  400e34:	4770      	bx	lr
  400e36:	bf00      	nop

00400e38 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400e38:	6441      	str	r1, [r0, #68]	; 0x44
  400e3a:	4770      	bx	lr

00400e3c <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400e3c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400e3e:	4770      	bx	lr

00400e40 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400e40:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400e42:	4770      	bx	lr

00400e44 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  400e44:	b570      	push	{r4, r5, r6, lr}
  400e46:	b082      	sub	sp, #8
  400e48:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400e4a:	0943      	lsrs	r3, r0, #5
  400e4c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400e50:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400e54:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400e56:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  400e5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400e5e:	d047      	beq.n	400ef0 <pio_configure_pin+0xac>
  400e60:	d809      	bhi.n	400e76 <pio_configure_pin+0x32>
  400e62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400e66:	d021      	beq.n	400eac <pio_configure_pin+0x68>
  400e68:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400e6c:	d02f      	beq.n	400ece <pio_configure_pin+0x8a>
  400e6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400e72:	d16f      	bne.n	400f54 <pio_configure_pin+0x110>
  400e74:	e009      	b.n	400e8a <pio_configure_pin+0x46>
  400e76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400e7a:	d055      	beq.n	400f28 <pio_configure_pin+0xe4>
  400e7c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400e80:	d052      	beq.n	400f28 <pio_configure_pin+0xe4>
  400e82:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400e86:	d044      	beq.n	400f12 <pio_configure_pin+0xce>
  400e88:	e064      	b.n	400f54 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400e8a:	f000 001f 	and.w	r0, r0, #31
  400e8e:	2601      	movs	r6, #1
  400e90:	4086      	lsls	r6, r0
  400e92:	4632      	mov	r2, r6
  400e94:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400e98:	4620      	mov	r0, r4
  400e9a:	4b30      	ldr	r3, [pc, #192]	; (400f5c <pio_configure_pin+0x118>)
  400e9c:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400e9e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400ea2:	bf14      	ite	ne
  400ea4:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400ea6:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400ea8:	2001      	movs	r0, #1
  400eaa:	e054      	b.n	400f56 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400eac:	f000 001f 	and.w	r0, r0, #31
  400eb0:	2601      	movs	r6, #1
  400eb2:	4086      	lsls	r6, r0
  400eb4:	4632      	mov	r2, r6
  400eb6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400eba:	4620      	mov	r0, r4
  400ebc:	4b27      	ldr	r3, [pc, #156]	; (400f5c <pio_configure_pin+0x118>)
  400ebe:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400ec0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400ec4:	bf14      	ite	ne
  400ec6:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400ec8:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400eca:	2001      	movs	r0, #1
  400ecc:	e043      	b.n	400f56 <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  400ece:	f000 001f 	and.w	r0, r0, #31
  400ed2:	2601      	movs	r6, #1
  400ed4:	4086      	lsls	r6, r0
  400ed6:	4632      	mov	r2, r6
  400ed8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400edc:	4620      	mov	r0, r4
  400ede:	4b1f      	ldr	r3, [pc, #124]	; (400f5c <pio_configure_pin+0x118>)
  400ee0:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400ee2:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400ee6:	bf14      	ite	ne
  400ee8:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400eea:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400eec:	2001      	movs	r0, #1
  400eee:	e032      	b.n	400f56 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  400ef0:	f000 001f 	and.w	r0, r0, #31
  400ef4:	2601      	movs	r6, #1
  400ef6:	4086      	lsls	r6, r0
  400ef8:	4632      	mov	r2, r6
  400efa:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400efe:	4620      	mov	r0, r4
  400f00:	4b16      	ldr	r3, [pc, #88]	; (400f5c <pio_configure_pin+0x118>)
  400f02:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400f04:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400f08:	bf14      	ite	ne
  400f0a:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400f0c:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400f0e:	2001      	movs	r0, #1
  400f10:	e021      	b.n	400f56 <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  400f12:	f000 011f 	and.w	r1, r0, #31
  400f16:	2601      	movs	r6, #1
  400f18:	462a      	mov	r2, r5
  400f1a:	fa06 f101 	lsl.w	r1, r6, r1
  400f1e:	4620      	mov	r0, r4
  400f20:	4b0f      	ldr	r3, [pc, #60]	; (400f60 <pio_configure_pin+0x11c>)
  400f22:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  400f24:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  400f26:	e016      	b.n	400f56 <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400f28:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  400f2c:	f000 011f 	and.w	r1, r0, #31
  400f30:	2601      	movs	r6, #1
  400f32:	ea05 0306 	and.w	r3, r5, r6
  400f36:	9300      	str	r3, [sp, #0]
  400f38:	f3c5 0380 	ubfx	r3, r5, #2, #1
  400f3c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400f40:	bf14      	ite	ne
  400f42:	2200      	movne	r2, #0
  400f44:	2201      	moveq	r2, #1
  400f46:	fa06 f101 	lsl.w	r1, r6, r1
  400f4a:	4620      	mov	r0, r4
  400f4c:	4c05      	ldr	r4, [pc, #20]	; (400f64 <pio_configure_pin+0x120>)
  400f4e:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  400f50:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  400f52:	e000      	b.n	400f56 <pio_configure_pin+0x112>

	default:
		return 0;
  400f54:	2000      	movs	r0, #0
	}

	return 1;
}
  400f56:	b002      	add	sp, #8
  400f58:	bd70      	pop	{r4, r5, r6, pc}
  400f5a:	bf00      	nop
  400f5c:	00400c85 	.word	0x00400c85
  400f60:	00400d15 	.word	0x00400d15
  400f64:	00400d49 	.word	0x00400d49

00400f68 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  400f68:	b570      	push	{r4, r5, r6, lr}
  400f6a:	b082      	sub	sp, #8
  400f6c:	4605      	mov	r5, r0
  400f6e:	460e      	mov	r6, r1
  400f70:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400f72:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  400f76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400f7a:	d038      	beq.n	400fee <pio_configure_pin_group+0x86>
  400f7c:	d809      	bhi.n	400f92 <pio_configure_pin_group+0x2a>
  400f7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400f82:	d01c      	beq.n	400fbe <pio_configure_pin_group+0x56>
  400f84:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400f88:	d025      	beq.n	400fd6 <pio_configure_pin_group+0x6e>
  400f8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400f8e:	d150      	bne.n	401032 <pio_configure_pin_group+0xca>
  400f90:	e009      	b.n	400fa6 <pio_configure_pin_group+0x3e>
  400f92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400f96:	d03a      	beq.n	40100e <pio_configure_pin_group+0xa6>
  400f98:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400f9c:	d037      	beq.n	40100e <pio_configure_pin_group+0xa6>
  400f9e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400fa2:	d030      	beq.n	401006 <pio_configure_pin_group+0x9e>
  400fa4:	e045      	b.n	401032 <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  400fa6:	460a      	mov	r2, r1
  400fa8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400fac:	4b22      	ldr	r3, [pc, #136]	; (401038 <pio_configure_pin_group+0xd0>)
  400fae:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400fb0:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400fb4:	bf14      	ite	ne
  400fb6:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400fb8:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400fba:	2001      	movs	r0, #1
  400fbc:	e03a      	b.n	401034 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  400fbe:	460a      	mov	r2, r1
  400fc0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400fc4:	4b1c      	ldr	r3, [pc, #112]	; (401038 <pio_configure_pin_group+0xd0>)
  400fc6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400fc8:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400fcc:	bf14      	ite	ne
  400fce:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400fd0:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400fd2:	2001      	movs	r0, #1
  400fd4:	e02e      	b.n	401034 <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  400fd6:	460a      	mov	r2, r1
  400fd8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400fdc:	4b16      	ldr	r3, [pc, #88]	; (401038 <pio_configure_pin_group+0xd0>)
  400fde:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400fe0:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400fe4:	bf14      	ite	ne
  400fe6:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400fe8:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400fea:	2001      	movs	r0, #1
  400fec:	e022      	b.n	401034 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  400fee:	460a      	mov	r2, r1
  400ff0:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400ff4:	4b10      	ldr	r3, [pc, #64]	; (401038 <pio_configure_pin_group+0xd0>)
  400ff6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400ff8:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400ffc:	bf14      	ite	ne
  400ffe:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401000:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401002:	2001      	movs	r0, #1
  401004:	e016      	b.n	401034 <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  401006:	4b0d      	ldr	r3, [pc, #52]	; (40103c <pio_configure_pin_group+0xd4>)
  401008:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  40100a:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  40100c:	e012      	b.n	401034 <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  40100e:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
  401012:	f004 0301 	and.w	r3, r4, #1
  401016:	9300      	str	r3, [sp, #0]
  401018:	f3c4 0380 	ubfx	r3, r4, #2, #1
  40101c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401020:	bf14      	ite	ne
  401022:	2200      	movne	r2, #0
  401024:	2201      	moveq	r2, #1
  401026:	4631      	mov	r1, r6
  401028:	4628      	mov	r0, r5
  40102a:	4c05      	ldr	r4, [pc, #20]	; (401040 <pio_configure_pin_group+0xd8>)
  40102c:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  40102e:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  401030:	e000      	b.n	401034 <pio_configure_pin_group+0xcc>

	default:
		return 0;
  401032:	2000      	movs	r0, #0
	}

	return 1;
}
  401034:	b002      	add	sp, #8
  401036:	bd70      	pop	{r4, r5, r6, pc}
  401038:	00400c85 	.word	0x00400c85
  40103c:	00400d15 	.word	0x00400d15
  401040:	00400d49 	.word	0x00400d49

00401044 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401048:	4681      	mov	r9, r0
  40104a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40104c:	4b12      	ldr	r3, [pc, #72]	; (401098 <pio_handler_process+0x54>)
  40104e:	4798      	blx	r3
  401050:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401052:	4648      	mov	r0, r9
  401054:	4b11      	ldr	r3, [pc, #68]	; (40109c <pio_handler_process+0x58>)
  401056:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401058:	4005      	ands	r5, r0
  40105a:	d013      	beq.n	401084 <pio_handler_process+0x40>
  40105c:	4c10      	ldr	r4, [pc, #64]	; (4010a0 <pio_handler_process+0x5c>)
  40105e:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  401062:	6823      	ldr	r3, [r4, #0]
  401064:	4543      	cmp	r3, r8
  401066:	d108      	bne.n	40107a <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401068:	6861      	ldr	r1, [r4, #4]
  40106a:	4229      	tst	r1, r5
  40106c:	d005      	beq.n	40107a <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40106e:	68e3      	ldr	r3, [r4, #12]
  401070:	4640      	mov	r0, r8
  401072:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  401074:	6863      	ldr	r3, [r4, #4]
  401076:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40107a:	42b4      	cmp	r4, r6
  40107c:	d002      	beq.n	401084 <pio_handler_process+0x40>
  40107e:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  401080:	2d00      	cmp	r5, #0
  401082:	d1ee      	bne.n	401062 <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  401084:	4b07      	ldr	r3, [pc, #28]	; (4010a4 <pio_handler_process+0x60>)
  401086:	681b      	ldr	r3, [r3, #0]
  401088:	b123      	cbz	r3, 401094 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  40108a:	4b07      	ldr	r3, [pc, #28]	; (4010a8 <pio_handler_process+0x64>)
  40108c:	681b      	ldr	r3, [r3, #0]
  40108e:	b10b      	cbz	r3, 401094 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  401090:	4648      	mov	r0, r9
  401092:	4798      	blx	r3
  401094:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401098:	00400e3d 	.word	0x00400e3d
  40109c:	00400e41 	.word	0x00400e41
  4010a0:	20000cd8 	.word	0x20000cd8
  4010a4:	20000d88 	.word	0x20000d88
  4010a8:	20000cd4 	.word	0x20000cd4

004010ac <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  4010ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  4010ae:	4c0c      	ldr	r4, [pc, #48]	; (4010e0 <pio_handler_set+0x34>)
  4010b0:	6824      	ldr	r4, [r4, #0]
  4010b2:	2c06      	cmp	r4, #6
  4010b4:	d811      	bhi.n	4010da <pio_handler_set+0x2e>
  4010b6:	4615      	mov	r5, r2
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
	pSource->id = ul_id;
  4010b8:	4f0a      	ldr	r7, [pc, #40]	; (4010e4 <pio_handler_set+0x38>)
  4010ba:	0126      	lsls	r6, r4, #4
  4010bc:	19ba      	adds	r2, r7, r6
  4010be:	51b9      	str	r1, [r7, r6]
	pSource->mask = ul_mask;
  4010c0:	6055      	str	r5, [r2, #4]
	pSource->attr = ul_attr;
  4010c2:	6093      	str	r3, [r2, #8]
	pSource->handler = p_handler;
  4010c4:	9906      	ldr	r1, [sp, #24]
  4010c6:	60d1      	str	r1, [r2, #12]
	gs_ul_nb_sources++;
  4010c8:	3401      	adds	r4, #1
  4010ca:	4a05      	ldr	r2, [pc, #20]	; (4010e0 <pio_handler_set+0x34>)
  4010cc:	6014      	str	r4, [r2, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4010ce:	461a      	mov	r2, r3
  4010d0:	4629      	mov	r1, r5
  4010d2:	4b05      	ldr	r3, [pc, #20]	; (4010e8 <pio_handler_set+0x3c>)
  4010d4:	4798      	blx	r3

	return 0;
  4010d6:	2000      	movs	r0, #0
  4010d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
  4010da:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
  4010dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4010de:	bf00      	nop
  4010e0:	20000cd0 	.word	0x20000cd0
  4010e4:	20000cd8 	.word	0x20000cd8
  4010e8:	00400e01 	.word	0x00400e01

004010ec <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4010ec:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4010ee:	210b      	movs	r1, #11
  4010f0:	4801      	ldr	r0, [pc, #4]	; (4010f8 <PIOA_Handler+0xc>)
  4010f2:	4b02      	ldr	r3, [pc, #8]	; (4010fc <PIOA_Handler+0x10>)
  4010f4:	4798      	blx	r3
  4010f6:	bd08      	pop	{r3, pc}
  4010f8:	400e0e00 	.word	0x400e0e00
  4010fc:	00401045 	.word	0x00401045

00401100 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401100:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  401102:	210c      	movs	r1, #12
  401104:	4801      	ldr	r0, [pc, #4]	; (40110c <PIOB_Handler+0xc>)
  401106:	4b02      	ldr	r3, [pc, #8]	; (401110 <PIOB_Handler+0x10>)
  401108:	4798      	blx	r3
  40110a:	bd08      	pop	{r3, pc}
  40110c:	400e1000 	.word	0x400e1000
  401110:	00401045 	.word	0x00401045

00401114 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401114:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  401116:	210d      	movs	r1, #13
  401118:	4801      	ldr	r0, [pc, #4]	; (401120 <PIOC_Handler+0xc>)
  40111a:	4b02      	ldr	r3, [pc, #8]	; (401124 <PIOC_Handler+0x10>)
  40111c:	4798      	blx	r3
  40111e:	bd08      	pop	{r3, pc}
  401120:	400e1200 	.word	0x400e1200
  401124:	00401045 	.word	0x00401045

00401128 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  401128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40112a:	4605      	mov	r5, r0
  40112c:	460c      	mov	r4, r1
  40112e:	4617      	mov	r7, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  401130:	4b18      	ldr	r3, [pc, #96]	; (401194 <pio_handler_set_priority+0x6c>)
  401132:	4798      	blx	r3
  401134:	4606      	mov	r6, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  401136:	f04f 31ff 	mov.w	r1, #4294967295
  40113a:	4628      	mov	r0, r5
  40113c:	4b16      	ldr	r3, [pc, #88]	; (401198 <pio_handler_set_priority+0x70>)
  40113e:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  401140:	4628      	mov	r0, r5
  401142:	4b16      	ldr	r3, [pc, #88]	; (40119c <pio_handler_set_priority+0x74>)
  401144:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  401146:	b2e2      	uxtb	r2, r4
  401148:	f002 031f 	and.w	r3, r2, #31
  40114c:	2101      	movs	r1, #1
  40114e:	4099      	lsls	r1, r3
  401150:	0963      	lsrs	r3, r4, #5
  401152:	009b      	lsls	r3, r3, #2
  401154:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  401158:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
  40115c:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401160:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  401164:	2c00      	cmp	r4, #0
  401166:	da06      	bge.n	401176 <pio_handler_set_priority+0x4e>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401168:	f002 020f 	and.w	r2, r2, #15
  40116c:	013f      	lsls	r7, r7, #4
  40116e:	b2ff      	uxtb	r7, r7
  401170:	480b      	ldr	r0, [pc, #44]	; (4011a0 <pio_handler_set_priority+0x78>)
  401172:	5487      	strb	r7, [r0, r2]
  401174:	e007      	b.n	401186 <pio_handler_set_priority+0x5e>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  401176:	013f      	lsls	r7, r7, #4
  401178:	b2ff      	uxtb	r7, r7
  40117a:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
  40117e:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
  401182:	f884 7300 	strb.w	r7, [r4, #768]	; 0x300
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401186:	6019      	str	r1, [r3, #0]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  401188:	4631      	mov	r1, r6
  40118a:	4628      	mov	r0, r5
  40118c:	4b05      	ldr	r3, [pc, #20]	; (4011a4 <pio_handler_set_priority+0x7c>)
  40118e:	4798      	blx	r3
  401190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401192:	bf00      	nop
  401194:	00400e41 	.word	0x00400e41
  401198:	00400e39 	.word	0x00400e39
  40119c:	00400e3d 	.word	0x00400e3d
  4011a0:	e000ed14 	.word	0xe000ed14
  4011a4:	00400e31 	.word	0x00400e31

004011a8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4011a8:	4a18      	ldr	r2, [pc, #96]	; (40120c <pmc_switch_mck_to_pllack+0x64>)
  4011aa:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4011ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4011b0:	4318      	orrs	r0, r3
  4011b2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4011b4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4011b6:	f013 0f08 	tst.w	r3, #8
  4011ba:	d003      	beq.n	4011c4 <pmc_switch_mck_to_pllack+0x1c>
  4011bc:	e009      	b.n	4011d2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4011be:	3b01      	subs	r3, #1
  4011c0:	d103      	bne.n	4011ca <pmc_switch_mck_to_pllack+0x22>
  4011c2:	e01e      	b.n	401202 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4011c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4011c8:	4910      	ldr	r1, [pc, #64]	; (40120c <pmc_switch_mck_to_pllack+0x64>)
  4011ca:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4011cc:	f012 0f08 	tst.w	r2, #8
  4011d0:	d0f5      	beq.n	4011be <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4011d2:	4a0e      	ldr	r2, [pc, #56]	; (40120c <pmc_switch_mck_to_pllack+0x64>)
  4011d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4011d6:	f023 0303 	bic.w	r3, r3, #3
  4011da:	f043 0302 	orr.w	r3, r3, #2
  4011de:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4011e0:	6e90      	ldr	r0, [r2, #104]	; 0x68
  4011e2:	f010 0008 	ands.w	r0, r0, #8
  4011e6:	d004      	beq.n	4011f2 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4011e8:	2000      	movs	r0, #0
  4011ea:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  4011ec:	3b01      	subs	r3, #1
  4011ee:	d103      	bne.n	4011f8 <pmc_switch_mck_to_pllack+0x50>
  4011f0:	e009      	b.n	401206 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4011f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4011f6:	4905      	ldr	r1, [pc, #20]	; (40120c <pmc_switch_mck_to_pllack+0x64>)
  4011f8:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4011fa:	f012 0f08 	tst.w	r2, #8
  4011fe:	d0f5      	beq.n	4011ec <pmc_switch_mck_to_pllack+0x44>
  401200:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  401202:	2001      	movs	r0, #1
  401204:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  401206:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401208:	4770      	bx	lr
  40120a:	bf00      	nop
  40120c:	400e0400 	.word	0x400e0400

00401210 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401210:	b138      	cbz	r0, 401222 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401212:	4911      	ldr	r1, [pc, #68]	; (401258 <pmc_switch_mainck_to_xtal+0x48>)
  401214:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401216:	4a11      	ldr	r2, [pc, #68]	; (40125c <pmc_switch_mainck_to_xtal+0x4c>)
  401218:	401a      	ands	r2, r3
  40121a:	4b11      	ldr	r3, [pc, #68]	; (401260 <pmc_switch_mainck_to_xtal+0x50>)
  40121c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40121e:	620b      	str	r3, [r1, #32]
  401220:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401222:	480d      	ldr	r0, [pc, #52]	; (401258 <pmc_switch_mainck_to_xtal+0x48>)
  401224:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401226:	0209      	lsls	r1, r1, #8
  401228:	b289      	uxth	r1, r1
  40122a:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
  40122e:	f023 0303 	bic.w	r3, r3, #3
  401232:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401236:	f043 0301 	orr.w	r3, r3, #1
  40123a:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40123c:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40123e:	4602      	mov	r2, r0
  401240:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401242:	f013 0f01 	tst.w	r3, #1
  401246:	d0fb      	beq.n	401240 <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401248:	4a03      	ldr	r2, [pc, #12]	; (401258 <pmc_switch_mainck_to_xtal+0x48>)
  40124a:	6a13      	ldr	r3, [r2, #32]
  40124c:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  401250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401254:	6213      	str	r3, [r2, #32]
  401256:	4770      	bx	lr
  401258:	400e0400 	.word	0x400e0400
  40125c:	fec8fffc 	.word	0xfec8fffc
  401260:	01370002 	.word	0x01370002

00401264 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401264:	4b02      	ldr	r3, [pc, #8]	; (401270 <pmc_osc_is_ready_mainck+0xc>)
  401266:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401268:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  40126c:	4770      	bx	lr
  40126e:	bf00      	nop
  401270:	400e0400 	.word	0x400e0400

00401274 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401274:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401278:	4b01      	ldr	r3, [pc, #4]	; (401280 <pmc_disable_pllack+0xc>)
  40127a:	629a      	str	r2, [r3, #40]	; 0x28
  40127c:	4770      	bx	lr
  40127e:	bf00      	nop
  401280:	400e0400 	.word	0x400e0400

00401284 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401284:	4b02      	ldr	r3, [pc, #8]	; (401290 <pmc_is_locked_pllack+0xc>)
  401286:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401288:	f000 0002 	and.w	r0, r0, #2
  40128c:	4770      	bx	lr
  40128e:	bf00      	nop
  401290:	400e0400 	.word	0x400e0400

00401294 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  401294:	2822      	cmp	r0, #34	; 0x22
  401296:	d81e      	bhi.n	4012d6 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401298:	281f      	cmp	r0, #31
  40129a:	d80c      	bhi.n	4012b6 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40129c:	4b11      	ldr	r3, [pc, #68]	; (4012e4 <pmc_enable_periph_clk+0x50>)
  40129e:	699a      	ldr	r2, [r3, #24]
  4012a0:	2301      	movs	r3, #1
  4012a2:	4083      	lsls	r3, r0
  4012a4:	4393      	bics	r3, r2
  4012a6:	d018      	beq.n	4012da <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4012a8:	2301      	movs	r3, #1
  4012aa:	fa03 f000 	lsl.w	r0, r3, r0
  4012ae:	4b0d      	ldr	r3, [pc, #52]	; (4012e4 <pmc_enable_periph_clk+0x50>)
  4012b0:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4012b2:	2000      	movs	r0, #0
  4012b4:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4012b6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4012b8:	4b0a      	ldr	r3, [pc, #40]	; (4012e4 <pmc_enable_periph_clk+0x50>)
  4012ba:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4012be:	2301      	movs	r3, #1
  4012c0:	4083      	lsls	r3, r0
  4012c2:	4393      	bics	r3, r2
  4012c4:	d00b      	beq.n	4012de <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4012c6:	2301      	movs	r3, #1
  4012c8:	fa03 f000 	lsl.w	r0, r3, r0
  4012cc:	4b05      	ldr	r3, [pc, #20]	; (4012e4 <pmc_enable_periph_clk+0x50>)
  4012ce:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  4012d2:	2000      	movs	r0, #0
  4012d4:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  4012d6:	2001      	movs	r0, #1
  4012d8:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4012da:	2000      	movs	r0, #0
  4012dc:	4770      	bx	lr
  4012de:	2000      	movs	r0, #0
}
  4012e0:	4770      	bx	lr
  4012e2:	bf00      	nop
  4012e4:	400e0400 	.word	0x400e0400

004012e8 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4012e8:	b508      	push	{r3, lr}
  4012ea:	2015      	movs	r0, #21
  4012ec:	4b01      	ldr	r3, [pc, #4]	; (4012f4 <spi_enable_clock+0xc>)
  4012ee:	4798      	blx	r3
  4012f0:	bd08      	pop	{r3, pc}
  4012f2:	bf00      	nop
  4012f4:	00401295 	.word	0x00401295

004012f8 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4012f8:	6843      	ldr	r3, [r0, #4]
  4012fa:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4012fe:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  401300:	6843      	ldr	r3, [r0, #4]
  401302:	0409      	lsls	r1, r1, #16
  401304:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  401308:	430b      	orrs	r3, r1
  40130a:	6043      	str	r3, [r0, #4]
  40130c:	4770      	bx	lr
  40130e:	bf00      	nop

00401310 <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  401310:	6843      	ldr	r3, [r0, #4]
  401312:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401316:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  401318:	6843      	ldr	r3, [r0, #4]
  40131a:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  40131e:	6041      	str	r1, [r0, #4]
  401320:	4770      	bx	lr
  401322:	bf00      	nop

00401324 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  401324:	b132      	cbz	r2, 401334 <spi_set_clock_polarity+0x10>
  401326:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  40132a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40132c:	f043 0301 	orr.w	r3, r3, #1
  401330:	6303      	str	r3, [r0, #48]	; 0x30
  401332:	4770      	bx	lr
  401334:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  401338:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40133a:	f023 0301 	bic.w	r3, r3, #1
  40133e:	6303      	str	r3, [r0, #48]	; 0x30
  401340:	4770      	bx	lr
  401342:	bf00      	nop

00401344 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  401344:	b132      	cbz	r2, 401354 <spi_set_clock_phase+0x10>
  401346:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  40134a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40134c:	f043 0302 	orr.w	r3, r3, #2
  401350:	6303      	str	r3, [r0, #48]	; 0x30
  401352:	4770      	bx	lr
  401354:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  401358:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40135a:	f023 0302 	bic.w	r3, r3, #2
  40135e:	6303      	str	r3, [r0, #48]	; 0x30
  401360:	4770      	bx	lr
  401362:	bf00      	nop

00401364 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  401364:	2a04      	cmp	r2, #4
  401366:	d10a      	bne.n	40137e <spi_configure_cs_behavior+0x1a>
  401368:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40136c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40136e:	f023 0308 	bic.w	r3, r3, #8
  401372:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  401374:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401376:	f043 0304 	orr.w	r3, r3, #4
  40137a:	6303      	str	r3, [r0, #48]	; 0x30
  40137c:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  40137e:	b952      	cbnz	r2, 401396 <spi_configure_cs_behavior+0x32>
  401380:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  401384:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401386:	f023 0308 	bic.w	r3, r3, #8
  40138a:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  40138c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40138e:	f023 0304 	bic.w	r3, r3, #4
  401392:	6303      	str	r3, [r0, #48]	; 0x30
  401394:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  401396:	2a08      	cmp	r2, #8
  401398:	d105      	bne.n	4013a6 <spi_configure_cs_behavior+0x42>
  40139a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  40139e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4013a0:	f043 0308 	orr.w	r3, r3, #8
  4013a4:	6303      	str	r3, [r0, #48]	; 0x30
  4013a6:	4770      	bx	lr

004013a8 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4013a8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4013ac:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4013ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4013b2:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4013b4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4013b6:	431a      	orrs	r2, r3
  4013b8:	630a      	str	r2, [r1, #48]	; 0x30
  4013ba:	4770      	bx	lr

004013bc <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  4013bc:	1e43      	subs	r3, r0, #1
  4013be:	4419      	add	r1, r3
  4013c0:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  4013c4:	1e43      	subs	r3, r0, #1
  4013c6:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  4013c8:	bf94      	ite	ls
  4013ca:	b200      	sxthls	r0, r0
{
	int baud_div = div_ceil(mck, baudrate);

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
		return -1;
  4013cc:	f04f 30ff 	movhi.w	r0, #4294967295
	}

	return baud_div;
}
  4013d0:	4770      	bx	lr
  4013d2:	bf00      	nop

004013d4 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  4013d4:	b16a      	cbz	r2, 4013f2 <spi_set_baudrate_div+0x1e>
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  4013d6:	b410      	push	{r4}
  4013d8:	4614      	mov	r4, r2
  4013da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4013de:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4013e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4013e4:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4013e6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4013e8:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4013ec:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4013ee:	2000      	movs	r0, #0
  4013f0:	e002      	b.n	4013f8 <spi_set_baudrate_div+0x24>
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;
  4013f2:	f04f 30ff 	mov.w	r0, #4294967295
  4013f6:	4770      	bx	lr

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
    return 0;
}
  4013f8:	bc10      	pop	{r4}
  4013fa:	4770      	bx	lr

004013fc <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  4013fc:	b410      	push	{r4}
  4013fe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  401402:	6b08      	ldr	r0, [r1, #48]	; 0x30
  401404:	b280      	uxth	r0, r0
  401406:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  401408:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  40140a:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  40140e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  401412:	630a      	str	r2, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  401414:	bc10      	pop	{r4}
  401416:	4770      	bx	lr

00401418 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401418:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  40141a:	010c      	lsls	r4, r1, #4
  40141c:	4294      	cmp	r4, r2
  40141e:	d90f      	bls.n	401440 <usart_set_async_baudrate+0x28>
  401420:	e01a      	b.n	401458 <usart_set_async_baudrate+0x40>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  401422:	6841      	ldr	r1, [r0, #4]
  401424:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  401428:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40142a:	0412      	lsls	r2, r2, #16
  40142c:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  401430:	431a      	orrs	r2, r3
  401432:	6202      	str	r2, [r0, #32]

	return 0;
  401434:	2000      	movs	r0, #0
  401436:	e01c      	b.n	401472 <usart_set_async_baudrate+0x5a>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
  401438:	2001      	movs	r0, #1
  40143a:	e01a      	b.n	401472 <usart_set_async_baudrate+0x5a>
  40143c:	2001      	movs	r0, #1
  40143e:	e018      	b.n	401472 <usart_set_async_baudrate+0x5a>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401440:	0863      	lsrs	r3, r4, #1
  401442:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  401446:	fbb2 f2f4 	udiv	r2, r2, r4
	cd = cd_fp >> 3;
  40144a:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40144c:	1e5c      	subs	r4, r3, #1
  40144e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401452:	428c      	cmp	r4, r1
  401454:	d9e9      	bls.n	40142a <usart_set_async_baudrate+0x12>
  401456:	e7ef      	b.n	401438 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401458:	00c9      	lsls	r1, r1, #3
  40145a:	084b      	lsrs	r3, r1, #1
  40145c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  401460:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  401464:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401466:	1e5c      	subs	r4, r3, #1
  401468:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40146c:	428c      	cmp	r4, r1
  40146e:	d8e5      	bhi.n	40143c <usart_set_async_baudrate+0x24>
  401470:	e7d7      	b.n	401422 <usart_set_async_baudrate+0xa>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
  401472:	bc10      	pop	{r4}
  401474:	4770      	bx	lr
  401476:	bf00      	nop

00401478 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401478:	4b0a      	ldr	r3, [pc, #40]	; (4014a4 <usart_reset+0x2c>)
  40147a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  40147e:	2300      	movs	r3, #0
  401480:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  401482:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401484:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401486:	2388      	movs	r3, #136	; 0x88
  401488:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40148a:	2324      	movs	r3, #36	; 0x24
  40148c:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
  40148e:	f44f 7380 	mov.w	r3, #256	; 0x100
  401492:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
  401494:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  401498:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_DTRDIS;
  40149a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  40149e:	6003      	str	r3, [r0, #0]
  4014a0:	4770      	bx	lr
  4014a2:	bf00      	nop
  4014a4:	55534100 	.word	0x55534100

004014a8 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4014a8:	b570      	push	{r4, r5, r6, lr}
  4014aa:	4605      	mov	r5, r0
  4014ac:	460c      	mov	r4, r1
  4014ae:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  4014b0:	4b0f      	ldr	r3, [pc, #60]	; (4014f0 <usart_init_rs232+0x48>)
  4014b2:	4798      	blx	r3

	ul_reg_val = 0;
  4014b4:	2200      	movs	r2, #0
  4014b6:	4b0f      	ldr	r3, [pc, #60]	; (4014f4 <usart_init_rs232+0x4c>)
  4014b8:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4014ba:	b19c      	cbz	r4, 4014e4 <usart_init_rs232+0x3c>
  4014bc:	4632      	mov	r2, r6
  4014be:	6821      	ldr	r1, [r4, #0]
  4014c0:	4628      	mov	r0, r5
  4014c2:	4b0d      	ldr	r3, [pc, #52]	; (4014f8 <usart_init_rs232+0x50>)
  4014c4:	4798      	blx	r3
  4014c6:	4602      	mov	r2, r0
  4014c8:	b970      	cbnz	r0, 4014e8 <usart_init_rs232+0x40>
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4014ca:	6861      	ldr	r1, [r4, #4]
  4014cc:	68a3      	ldr	r3, [r4, #8]
  4014ce:	4319      	orrs	r1, r3
  4014d0:	6923      	ldr	r3, [r4, #16]
  4014d2:	4319      	orrs	r1, r3
  4014d4:	68e3      	ldr	r3, [r4, #12]
  4014d6:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4014d8:	4906      	ldr	r1, [pc, #24]	; (4014f4 <usart_init_rs232+0x4c>)
  4014da:	600b      	str	r3, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
  4014dc:	6869      	ldr	r1, [r5, #4]
  4014de:	430b      	orrs	r3, r1
  4014e0:	606b      	str	r3, [r5, #4]

	return 0;
  4014e2:	e002      	b.n	4014ea <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  4014e4:	2201      	movs	r2, #1
  4014e6:	e000      	b.n	4014ea <usart_init_rs232+0x42>
  4014e8:	2201      	movs	r2, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
  4014ea:	4610      	mov	r0, r2
  4014ec:	bd70      	pop	{r4, r5, r6, pc}
  4014ee:	bf00      	nop
  4014f0:	00401479 	.word	0x00401479
  4014f4:	20000d48 	.word	0x20000d48
  4014f8:	00401419 	.word	0x00401419

004014fc <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
  4014fc:	2340      	movs	r3, #64	; 0x40
  4014fe:	6003      	str	r3, [r0, #0]
  401500:	4770      	bx	lr
  401502:	bf00      	nop

00401504 <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
  401504:	2310      	movs	r3, #16
  401506:	6003      	str	r3, [r0, #0]
  401508:	4770      	bx	lr
  40150a:	bf00      	nop

0040150c <usart_enable_interrupt>:
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
	p_usart->US_IER = ul_sources;
  40150c:	6081      	str	r1, [r0, #8]
  40150e:	4770      	bx	lr

00401510 <usart_get_status>:
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
	return p_usart->US_CSR;
  401510:	6940      	ldr	r0, [r0, #20]
}
  401512:	4770      	bx	lr

00401514 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401514:	6943      	ldr	r3, [r0, #20]
  401516:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  40151a:	bf1d      	ittte	ne
  40151c:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  401520:	61c1      	strne	r1, [r0, #28]
	return 0;
  401522:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  401524:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  401526:	4770      	bx	lr

00401528 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401528:	6943      	ldr	r3, [r0, #20]
  40152a:	f013 0f01 	tst.w	r3, #1
  40152e:	d005      	beq.n	40153c <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401530:	6983      	ldr	r3, [r0, #24]
  401532:	f3c3 0308 	ubfx	r3, r3, #0, #9
  401536:	600b      	str	r3, [r1, #0]

	return 0;
  401538:	2000      	movs	r0, #0
  40153a:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  40153c:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  40153e:	4770      	bx	lr

00401540 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  401540:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401544:	6043      	str	r3, [r0, #4]
  401546:	4770      	bx	lr

00401548 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401548:	e7fe      	b.n	401548 <Dummy_Handler>
  40154a:	bf00      	nop

0040154c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40154c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  40154e:	4b20      	ldr	r3, [pc, #128]	; (4015d0 <Reset_Handler+0x84>)
  401550:	4a20      	ldr	r2, [pc, #128]	; (4015d4 <Reset_Handler+0x88>)
  401552:	429a      	cmp	r2, r3
  401554:	d912      	bls.n	40157c <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  401556:	4b20      	ldr	r3, [pc, #128]	; (4015d8 <Reset_Handler+0x8c>)
  401558:	4a1d      	ldr	r2, [pc, #116]	; (4015d0 <Reset_Handler+0x84>)
  40155a:	429a      	cmp	r2, r3
  40155c:	d21e      	bcs.n	40159c <Reset_Handler+0x50>
  40155e:	4611      	mov	r1, r2
  401560:	3b01      	subs	r3, #1
  401562:	1a9b      	subs	r3, r3, r2
  401564:	f023 0303 	bic.w	r3, r3, #3
  401568:	3304      	adds	r3, #4
  40156a:	4a1a      	ldr	r2, [pc, #104]	; (4015d4 <Reset_Handler+0x88>)
  40156c:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  40156e:	f852 0b04 	ldr.w	r0, [r2], #4
  401572:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  401576:	429a      	cmp	r2, r3
  401578:	d1f9      	bne.n	40156e <Reset_Handler+0x22>
  40157a:	e00f      	b.n	40159c <Reset_Handler+0x50>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  40157c:	4b14      	ldr	r3, [pc, #80]	; (4015d0 <Reset_Handler+0x84>)
  40157e:	4a15      	ldr	r2, [pc, #84]	; (4015d4 <Reset_Handler+0x88>)
  401580:	429a      	cmp	r2, r3
  401582:	d20b      	bcs.n	40159c <Reset_Handler+0x50>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  401584:	4b14      	ldr	r3, [pc, #80]	; (4015d8 <Reset_Handler+0x8c>)
  401586:	4a12      	ldr	r2, [pc, #72]	; (4015d0 <Reset_Handler+0x84>)
  401588:	1a9a      	subs	r2, r3, r2
  40158a:	4814      	ldr	r0, [pc, #80]	; (4015dc <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  40158c:	1811      	adds	r1, r2, r0
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  40158e:	b12a      	cbz	r2, 40159c <Reset_Handler+0x50>
			*pDest-- = *pSrc--;
  401590:	f851 2904 	ldr.w	r2, [r1], #-4
  401594:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  401598:	4281      	cmp	r1, r0
  40159a:	d1f9      	bne.n	401590 <Reset_Handler+0x44>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  40159c:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40159e:	4b10      	ldr	r3, [pc, #64]	; (4015e0 <Reset_Handler+0x94>)
  4015a0:	4a10      	ldr	r2, [pc, #64]	; (4015e4 <Reset_Handler+0x98>)
  4015a2:	429a      	cmp	r2, r3
  4015a4:	d20b      	bcs.n	4015be <Reset_Handler+0x72>
  4015a6:	1d13      	adds	r3, r2, #4
  4015a8:	4a0f      	ldr	r2, [pc, #60]	; (4015e8 <Reset_Handler+0x9c>)
  4015aa:	1ad2      	subs	r2, r2, r3
  4015ac:	f022 0203 	bic.w	r2, r2, #3
  4015b0:	441a      	add	r2, r3
  4015b2:	3b04      	subs	r3, #4
		*pDest++ = 0;
  4015b4:	2100      	movs	r1, #0
  4015b6:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4015ba:	429a      	cmp	r2, r3
  4015bc:	d1fb      	bne.n	4015b6 <Reset_Handler+0x6a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  4015be:	4b0b      	ldr	r3, [pc, #44]	; (4015ec <Reset_Handler+0xa0>)
  4015c0:	4a0b      	ldr	r2, [pc, #44]	; (4015f0 <Reset_Handler+0xa4>)
  4015c2:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  4015c4:	4b0b      	ldr	r3, [pc, #44]	; (4015f4 <Reset_Handler+0xa8>)
  4015c6:	4798      	blx	r3

	/* Branch to main function */
	main();
  4015c8:	4b0b      	ldr	r3, [pc, #44]	; (4015f8 <Reset_Handler+0xac>)
  4015ca:	4798      	blx	r3
  4015cc:	e7fe      	b.n	4015cc <Reset_Handler+0x80>
  4015ce:	bf00      	nop
  4015d0:	20000000 	.word	0x20000000
  4015d4:	00406948 	.word	0x00406948
  4015d8:	20000c8c 	.word	0x20000c8c
  4015dc:	00406944 	.word	0x00406944
  4015e0:	20000da8 	.word	0x20000da8
  4015e4:	20000c8c 	.word	0x20000c8c
  4015e8:	20000dab 	.word	0x20000dab
  4015ec:	e000ed00 	.word	0xe000ed00
  4015f0:	00400000 	.word	0x00400000
  4015f4:	00402671 	.word	0x00402671
  4015f8:	00401a81 	.word	0x00401a81

004015fc <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  4015fc:	4b3d      	ldr	r3, [pc, #244]	; (4016f4 <SystemCoreClockUpdate+0xf8>)
  4015fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401600:	f003 0303 	and.w	r3, r3, #3
  401604:	2b03      	cmp	r3, #3
  401606:	d85d      	bhi.n	4016c4 <SystemCoreClockUpdate+0xc8>
  401608:	e8df f003 	tbb	[pc, r3]
  40160c:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  401610:	4b39      	ldr	r3, [pc, #228]	; (4016f8 <SystemCoreClockUpdate+0xfc>)
  401612:	695b      	ldr	r3, [r3, #20]
  401614:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401618:	bf14      	ite	ne
  40161a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40161e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401622:	4b36      	ldr	r3, [pc, #216]	; (4016fc <SystemCoreClockUpdate+0x100>)
  401624:	601a      	str	r2, [r3, #0]
  401626:	e04d      	b.n	4016c4 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401628:	4b32      	ldr	r3, [pc, #200]	; (4016f4 <SystemCoreClockUpdate+0xf8>)
  40162a:	6a1b      	ldr	r3, [r3, #32]
  40162c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401630:	d003      	beq.n	40163a <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  401632:	4a33      	ldr	r2, [pc, #204]	; (401700 <SystemCoreClockUpdate+0x104>)
  401634:	4b31      	ldr	r3, [pc, #196]	; (4016fc <SystemCoreClockUpdate+0x100>)
  401636:	601a      	str	r2, [r3, #0]
  401638:	e044      	b.n	4016c4 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40163a:	4a32      	ldr	r2, [pc, #200]	; (401704 <SystemCoreClockUpdate+0x108>)
  40163c:	4b2f      	ldr	r3, [pc, #188]	; (4016fc <SystemCoreClockUpdate+0x100>)
  40163e:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401640:	4b2c      	ldr	r3, [pc, #176]	; (4016f4 <SystemCoreClockUpdate+0xf8>)
  401642:	6a1b      	ldr	r3, [r3, #32]
  401644:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401648:	2b10      	cmp	r3, #16
  40164a:	d002      	beq.n	401652 <SystemCoreClockUpdate+0x56>
  40164c:	2b20      	cmp	r3, #32
  40164e:	d004      	beq.n	40165a <SystemCoreClockUpdate+0x5e>
  401650:	e038      	b.n	4016c4 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401652:	4a2d      	ldr	r2, [pc, #180]	; (401708 <SystemCoreClockUpdate+0x10c>)
  401654:	4b29      	ldr	r3, [pc, #164]	; (4016fc <SystemCoreClockUpdate+0x100>)
  401656:	601a      	str	r2, [r3, #0]
			break;
  401658:	e034      	b.n	4016c4 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40165a:	4a29      	ldr	r2, [pc, #164]	; (401700 <SystemCoreClockUpdate+0x104>)
  40165c:	4b27      	ldr	r3, [pc, #156]	; (4016fc <SystemCoreClockUpdate+0x100>)
  40165e:	601a      	str	r2, [r3, #0]
			break;
  401660:	e030      	b.n	4016c4 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401662:	4b24      	ldr	r3, [pc, #144]	; (4016f4 <SystemCoreClockUpdate+0xf8>)
  401664:	6a1b      	ldr	r3, [r3, #32]
  401666:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40166a:	d003      	beq.n	401674 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  40166c:	4a24      	ldr	r2, [pc, #144]	; (401700 <SystemCoreClockUpdate+0x104>)
  40166e:	4b23      	ldr	r3, [pc, #140]	; (4016fc <SystemCoreClockUpdate+0x100>)
  401670:	601a      	str	r2, [r3, #0]
  401672:	e012      	b.n	40169a <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401674:	4a23      	ldr	r2, [pc, #140]	; (401704 <SystemCoreClockUpdate+0x108>)
  401676:	4b21      	ldr	r3, [pc, #132]	; (4016fc <SystemCoreClockUpdate+0x100>)
  401678:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40167a:	4b1e      	ldr	r3, [pc, #120]	; (4016f4 <SystemCoreClockUpdate+0xf8>)
  40167c:	6a1b      	ldr	r3, [r3, #32]
  40167e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401682:	2b10      	cmp	r3, #16
  401684:	d002      	beq.n	40168c <SystemCoreClockUpdate+0x90>
  401686:	2b20      	cmp	r3, #32
  401688:	d004      	beq.n	401694 <SystemCoreClockUpdate+0x98>
  40168a:	e006      	b.n	40169a <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40168c:	4a1e      	ldr	r2, [pc, #120]	; (401708 <SystemCoreClockUpdate+0x10c>)
  40168e:	4b1b      	ldr	r3, [pc, #108]	; (4016fc <SystemCoreClockUpdate+0x100>)
  401690:	601a      	str	r2, [r3, #0]
					break;
  401692:	e002      	b.n	40169a <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401694:	4a1a      	ldr	r2, [pc, #104]	; (401700 <SystemCoreClockUpdate+0x104>)
  401696:	4b19      	ldr	r3, [pc, #100]	; (4016fc <SystemCoreClockUpdate+0x100>)
  401698:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  40169a:	4b16      	ldr	r3, [pc, #88]	; (4016f4 <SystemCoreClockUpdate+0xf8>)
  40169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40169e:	f003 0303 	and.w	r3, r3, #3
  4016a2:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4016a4:	4a13      	ldr	r2, [pc, #76]	; (4016f4 <SystemCoreClockUpdate+0xf8>)
  4016a6:	bf07      	ittee	eq
  4016a8:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4016aa:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4016ac:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4016ae:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  4016b0:	4812      	ldr	r0, [pc, #72]	; (4016fc <SystemCoreClockUpdate+0x100>)
  4016b2:	f3c3 410a 	ubfx	r1, r3, #16, #11
  4016b6:	6803      	ldr	r3, [r0, #0]
  4016b8:	fb01 3303 	mla	r3, r1, r3, r3
  4016bc:	b2d2      	uxtb	r2, r2
  4016be:	fbb3 f3f2 	udiv	r3, r3, r2
  4016c2:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4016c4:	4b0b      	ldr	r3, [pc, #44]	; (4016f4 <SystemCoreClockUpdate+0xf8>)
  4016c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4016c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4016cc:	2b70      	cmp	r3, #112	; 0x70
  4016ce:	d107      	bne.n	4016e0 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  4016d0:	4a0a      	ldr	r2, [pc, #40]	; (4016fc <SystemCoreClockUpdate+0x100>)
  4016d2:	6813      	ldr	r3, [r2, #0]
  4016d4:	490d      	ldr	r1, [pc, #52]	; (40170c <SystemCoreClockUpdate+0x110>)
  4016d6:	fba1 1303 	umull	r1, r3, r1, r3
  4016da:	085b      	lsrs	r3, r3, #1
  4016dc:	6013      	str	r3, [r2, #0]
  4016de:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4016e0:	4b04      	ldr	r3, [pc, #16]	; (4016f4 <SystemCoreClockUpdate+0xf8>)
  4016e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  4016e4:	4905      	ldr	r1, [pc, #20]	; (4016fc <SystemCoreClockUpdate+0x100>)
  4016e6:	f3c3 1202 	ubfx	r2, r3, #4, #3
  4016ea:	680b      	ldr	r3, [r1, #0]
  4016ec:	40d3      	lsrs	r3, r2
  4016ee:	600b      	str	r3, [r1, #0]
  4016f0:	4770      	bx	lr
  4016f2:	bf00      	nop
  4016f4:	400e0400 	.word	0x400e0400
  4016f8:	400e1410 	.word	0x400e1410
  4016fc:	20000408 	.word	0x20000408
  401700:	00b71b00 	.word	0x00b71b00
  401704:	003d0900 	.word	0x003d0900
  401708:	007a1200 	.word	0x007a1200
  40170c:	aaaaaaab 	.word	0xaaaaaaab

00401710 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  401710:	4b1a      	ldr	r3, [pc, #104]	; (40177c <system_init_flash+0x6c>)
  401712:	4298      	cmp	r0, r3
  401714:	d807      	bhi.n	401726 <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401716:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  40171a:	4a19      	ldr	r2, [pc, #100]	; (401780 <system_init_flash+0x70>)
  40171c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40171e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401722:	6013      	str	r3, [r2, #0]
  401724:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  401726:	4b17      	ldr	r3, [pc, #92]	; (401784 <system_init_flash+0x74>)
  401728:	4298      	cmp	r0, r3
  40172a:	d806      	bhi.n	40173a <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40172c:	4b16      	ldr	r3, [pc, #88]	; (401788 <system_init_flash+0x78>)
  40172e:	4a14      	ldr	r2, [pc, #80]	; (401780 <system_init_flash+0x70>)
  401730:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401732:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401736:	6013      	str	r3, [r2, #0]
  401738:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  40173a:	4b14      	ldr	r3, [pc, #80]	; (40178c <system_init_flash+0x7c>)
  40173c:	4298      	cmp	r0, r3
  40173e:	d806      	bhi.n	40174e <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401740:	4b13      	ldr	r3, [pc, #76]	; (401790 <system_init_flash+0x80>)
  401742:	4a0f      	ldr	r2, [pc, #60]	; (401780 <system_init_flash+0x70>)
  401744:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401746:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40174a:	6013      	str	r3, [r2, #0]
  40174c:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  40174e:	4b11      	ldr	r3, [pc, #68]	; (401794 <system_init_flash+0x84>)
  401750:	4298      	cmp	r0, r3
  401752:	d806      	bhi.n	401762 <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401754:	4b10      	ldr	r3, [pc, #64]	; (401798 <system_init_flash+0x88>)
  401756:	4a0a      	ldr	r2, [pc, #40]	; (401780 <system_init_flash+0x70>)
  401758:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40175a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40175e:	6013      	str	r3, [r2, #0]
  401760:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  401762:	4b0e      	ldr	r3, [pc, #56]	; (40179c <system_init_flash+0x8c>)
  401764:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401766:	bf94      	ite	ls
  401768:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40176c:	4b0c      	ldrhi	r3, [pc, #48]	; (4017a0 <system_init_flash+0x90>)
  40176e:	4a04      	ldr	r2, [pc, #16]	; (401780 <system_init_flash+0x70>)
  401770:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401772:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401776:	6013      	str	r3, [r2, #0]
  401778:	4770      	bx	lr
  40177a:	bf00      	nop
  40177c:	01312cff 	.word	0x01312cff
  401780:	400e0a00 	.word	0x400e0a00
  401784:	026259ff 	.word	0x026259ff
  401788:	04000100 	.word	0x04000100
  40178c:	039386ff 	.word	0x039386ff
  401790:	04000200 	.word	0x04000200
  401794:	04c4b3ff 	.word	0x04c4b3ff
  401798:	04000300 	.word	0x04000300
  40179c:	05f5e0ff 	.word	0x05f5e0ff
  4017a0:	04000500 	.word	0x04000500

004017a4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4017a4:	4b09      	ldr	r3, [pc, #36]	; (4017cc <_sbrk+0x28>)
  4017a6:	681b      	ldr	r3, [r3, #0]
  4017a8:	b913      	cbnz	r3, 4017b0 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  4017aa:	4a09      	ldr	r2, [pc, #36]	; (4017d0 <_sbrk+0x2c>)
  4017ac:	4b07      	ldr	r3, [pc, #28]	; (4017cc <_sbrk+0x28>)
  4017ae:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  4017b0:	4b06      	ldr	r3, [pc, #24]	; (4017cc <_sbrk+0x28>)
  4017b2:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4017b4:	181a      	adds	r2, r3, r0
  4017b6:	4907      	ldr	r1, [pc, #28]	; (4017d4 <_sbrk+0x30>)
  4017b8:	4291      	cmp	r1, r2
  4017ba:	db04      	blt.n	4017c6 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  4017bc:	4610      	mov	r0, r2
  4017be:	4a03      	ldr	r2, [pc, #12]	; (4017cc <_sbrk+0x28>)
  4017c0:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4017c2:	4618      	mov	r0, r3
  4017c4:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  4017c6:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  4017ca:	4770      	bx	lr
  4017cc:	20000d4c 	.word	0x20000d4c
  4017d0:	20003da8 	.word	0x20003da8
  4017d4:	20027ffc 	.word	0x20027ffc

004017d8 <Button_Handler>:
uint32_t value[6];

void Button_Handler(uint32_t id, uint32_t mask)
{
	uint32_t led;
	if( ID_PIOA == id && PIO_PA2 == mask )
  4017d8:	280b      	cmp	r0, #11
  4017da:	d10e      	bne.n	4017fa <Button_Handler+0x22>
  4017dc:	2904      	cmp	r1, #4
  4017de:	d10c      	bne.n	4017fa <Button_Handler+0x22>
	{ 
		button0_state = !button0_state; 
  4017e0:	4a06      	ldr	r2, [pc, #24]	; (4017fc <Button_Handler+0x24>)
  4017e2:	7813      	ldrb	r3, [r2, #0]
  4017e4:	f083 0301 	eor.w	r3, r3, #1
  4017e8:	7013      	strb	r3, [r2, #0]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4017ea:	4b05      	ldr	r3, [pc, #20]	; (401800 <Button_Handler+0x28>)
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4017ec:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4017ee:	2201      	movs	r2, #1
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
  4017f0:	4211      	tst	r1, r2
  4017f2:	d101      	bne.n	4017f8 <Button_Handler+0x20>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4017f4:	631a      	str	r2, [r3, #48]	; 0x30
  4017f6:	4770      	bx	lr
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4017f8:	635a      	str	r2, [r3, #52]	; 0x34
  4017fa:	4770      	bx	lr
  4017fc:	20000d50 	.word	0x20000d50
  401800:	400e0e00 	.word	0x400e0e00

00401804 <msg_received>:
}


void msg_received(Message *msg_in){
	//updates the blink wait time, based on the RSSI of msg received
	blink_wait = msg_in->rssi * 18 - 700;
  401804:	7b43      	ldrb	r3, [r0, #13]
  401806:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
  40180a:	005b      	lsls	r3, r3, #1
  40180c:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
  401810:	4a02      	ldr	r2, [pc, #8]	; (40181c <msg_received+0x18>)
  401812:	6013      	str	r3, [r2, #0]
	msg_state = msg_in->data[0];
  401814:	7882      	ldrb	r2, [r0, #2]
  401816:	4b02      	ldr	r3, [pc, #8]	; (401820 <msg_received+0x1c>)
  401818:	701a      	strb	r2, [r3, #0]
  40181a:	4770      	bx	lr
  40181c:	2000040c 	.word	0x2000040c
  401820:	20000410 	.word	0x20000410

00401824 <ack_received>:
}

void ack_received(uint8_t status){}
  401824:	4770      	bx	lr
  401826:	bf00      	nop

00401828 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
  401828:	b570      	push	{r4, r5, r6, lr}
  40182a:	b082      	sub	sp, #8
  40182c:	4606      	mov	r6, r0
	usart_spi_select_device(SSD1306_USART_SPI, &device);
	ssd1306_sel_cmd();
	usart_spi_transmit(SSD1306_USART_SPI, command);
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  40182e:	ac02      	add	r4, sp, #8
  401830:	2302      	movs	r3, #2
  401832:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  401836:	4d09      	ldr	r5, [pc, #36]	; (40185c <ssd1306_write_command+0x34>)
  401838:	4621      	mov	r1, r4
  40183a:	4628      	mov	r0, r5
  40183c:	4b08      	ldr	r3, [pc, #32]	; (401860 <ssd1306_write_command+0x38>)
  40183e:	4798      	blx	r3
  401840:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401844:	4b07      	ldr	r3, [pc, #28]	; (401864 <ssd1306_write_command+0x3c>)
  401846:	635a      	str	r2, [r3, #52]	; 0x34
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  401848:	60ee      	str	r6, [r5, #12]
	ssd1306_sel_cmd();
	spi_write_single(SSD1306_SPI, command);
	delay_us(SSD1306_LATENCY); // At least 3us
  40184a:	2056      	movs	r0, #86	; 0x56
  40184c:	4b06      	ldr	r3, [pc, #24]	; (401868 <ssd1306_write_command+0x40>)
  40184e:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  401850:	4621      	mov	r1, r4
  401852:	4628      	mov	r0, r5
  401854:	4b05      	ldr	r3, [pc, #20]	; (40186c <ssd1306_write_command+0x44>)
  401856:	4798      	blx	r3
#endif
}
  401858:	b002      	add	sp, #8
  40185a:	bd70      	pop	{r4, r5, r6, pc}
  40185c:	40008000 	.word	0x40008000
  401860:	00400b0d 	.word	0x00400b0d
  401864:	400e1200 	.word	0x400e1200
  401868:	20000001 	.word	0x20000001
  40186c:	00400b39 	.word	0x00400b39

00401870 <configure_buttons>:
}


const uint32_t irq_priority = 5;
void configure_buttons(void)
{
  401870:	b530      	push	{r4, r5, lr}
  401872:	b083      	sub	sp, #12
	//Configure Pushbutton 0
	pmc_enable_periph_clk(ID_PIOA);
  401874:	200b      	movs	r0, #11
  401876:	4b0f      	ldr	r3, [pc, #60]	; (4018b4 <configure_buttons+0x44>)
  401878:	4798      	blx	r3
	pio_set_debounce_filter(PIOC, PIN_PUSHBUTTON_0_MASK, 10);
  40187a:	220a      	movs	r2, #10
  40187c:	2104      	movs	r1, #4
  40187e:	480e      	ldr	r0, [pc, #56]	; (4018b8 <configure_buttons+0x48>)
  401880:	4b0e      	ldr	r3, [pc, #56]	; (4018bc <configure_buttons+0x4c>)
  401882:	4798      	blx	r3
	pio_handler_set(PIOA, ID_PIOA,
  401884:	4c0e      	ldr	r4, [pc, #56]	; (4018c0 <configure_buttons+0x50>)
  401886:	4b0f      	ldr	r3, [pc, #60]	; (4018c4 <configure_buttons+0x54>)
  401888:	9300      	str	r3, [sp, #0]
  40188a:	2379      	movs	r3, #121	; 0x79
  40188c:	2204      	movs	r2, #4
  40188e:	210b      	movs	r1, #11
  401890:	4620      	mov	r0, r4
  401892:	4d0d      	ldr	r5, [pc, #52]	; (4018c8 <configure_buttons+0x58>)
  401894:	47a8      	blx	r5
  401896:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40189a:	4b0c      	ldr	r3, [pc, #48]	; (4018cc <configure_buttons+0x5c>)
  40189c:	601a      	str	r2, [r3, #0]
	PIN_PUSHBUTTON_0_MASK, PIN_PUSHBUTTON_0_ATTR, Button_Handler);
	NVIC_EnableIRQ((IRQn_Type) ID_PIOA);
	pio_handler_set_priority(PIOA, (IRQn_Type) ID_PIOA, irq_priority);
  40189e:	2205      	movs	r2, #5
  4018a0:	210b      	movs	r1, #11
  4018a2:	4620      	mov	r0, r4
  4018a4:	4b0a      	ldr	r3, [pc, #40]	; (4018d0 <configure_buttons+0x60>)
  4018a6:	4798      	blx	r3
	pio_enable_interrupt(PIOA, PIN_PUSHBUTTON_0_MASK);
  4018a8:	2104      	movs	r1, #4
  4018aa:	4620      	mov	r0, r4
  4018ac:	4b09      	ldr	r3, [pc, #36]	; (4018d4 <configure_buttons+0x64>)
  4018ae:	4798      	blx	r3
}
  4018b0:	b003      	add	sp, #12
  4018b2:	bd30      	pop	{r4, r5, pc}
  4018b4:	00401295 	.word	0x00401295
  4018b8:	400e1200 	.word	0x400e1200
  4018bc:	00400c69 	.word	0x00400c69
  4018c0:	400e0e00 	.word	0x400e0e00
  4018c4:	004017d9 	.word	0x004017d9
  4018c8:	004010ad 	.word	0x004010ad
  4018cc:	e000e100 	.word	0xe000e100
  4018d0:	00401129 	.word	0x00401129
  4018d4:	00400e31 	.word	0x00400e31

004018d8 <task_msgsend>:
			delay_ms(blink_wait);
		}
	}
}

void task_msgsend(bool msg_end){
  4018d8:	b500      	push	{lr}
  4018da:	b085      	sub	sp, #20
	//sends a message every now and then
	Message msg;
	msg.address = ADDRESSEE_NODE;			//Addressee node
  4018dc:	2305      	movs	r3, #5
  4018de:	f8ad 3000 	strh.w	r3, [sp]
	//msg.data[0] = 7;						//send anything (random value)
	msg.data_length = 1;					//we're sending one byte
  4018e2:	2301      	movs	r3, #1
  4018e4:	f88d 300c 	strb.w	r3, [sp, #12]
	if (msg_end == false)
  4018e8:	b910      	cbnz	r0, 4018f0 <task_msgsend+0x18>
	{
		msg.data[0] = 1;
  4018ea:	f88d 3002 	strb.w	r3, [sp, #2]
  4018ee:	e002      	b.n	4018f6 <task_msgsend+0x1e>
	}
	else
	{
		msg.data[0] = 0;
  4018f0:	2300      	movs	r3, #0
  4018f2:	f88d 3002 	strb.w	r3, [sp, #2]
	}
	mac_send(&msg);
  4018f6:	4668      	mov	r0, sp
  4018f8:	4b02      	ldr	r3, [pc, #8]	; (401904 <task_msgsend+0x2c>)
  4018fa:	4798      	blx	r3
}
  4018fc:	b005      	add	sp, #20
  4018fe:	f85d fb04 	ldr.w	pc, [sp], #4
  401902:	bf00      	nop
  401904:	004001d1 	.word	0x004001d1

00401908 <task_ledblink>:

static bool led_state = LED_ON;

void task_ledblink(void){
	//blinks led. Blink rate depends on rssi received
	ioport_set_pin_level( IOPORT_CREATE_PIN(PIOC, 23), led_state = !led_state );
  401908:	4a07      	ldr	r2, [pc, #28]	; (401928 <task_ledblink+0x20>)
  40190a:	7813      	ldrb	r3, [r2, #0]
  40190c:	f083 0301 	eor.w	r3, r3, #1
  401910:	7013      	strb	r3, [r2, #0]
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
  401912:	b123      	cbz	r3, 40191e <task_ledblink+0x16>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401914:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  401918:	4b04      	ldr	r3, [pc, #16]	; (40192c <task_ledblink+0x24>)
  40191a:	631a      	str	r2, [r3, #48]	; 0x30
  40191c:	4770      	bx	lr
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40191e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  401922:	4b02      	ldr	r3, [pc, #8]	; (40192c <task_ledblink+0x24>)
  401924:	635a      	str	r2, [r3, #52]	; 0x34
  401926:	4770      	bx	lr
  401928:	20000d51 	.word	0x20000d51
  40192c:	400e1200 	.word	0x400e1200

00401930 <oled_update>:
}

void ack_received(uint8_t status){}
	
void oled_update()
{
  401930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401934:	b083      	sub	sp, #12
  401936:	f04f 0a00 	mov.w	sl, #0
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  40193a:	f8df b088 	ldr.w	fp, [pc, #136]	; 4019c4 <oled_update+0x94>
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
	spi_select_device(SSD1306_SPI, &device);
  40193e:	4f1e      	ldr	r7, [pc, #120]	; (4019b8 <oled_update+0x88>)
  401940:	f8df 909c 	ldr.w	r9, [pc, #156]	; 4019e0 <oled_update+0xb0>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401944:	f8df 809c 	ldr.w	r8, [pc, #156]	; 4019e4 <oled_update+0xb4>
  401948:	463e      	mov	r6, r7
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  40194a:	f00a 0007 	and.w	r0, sl, #7
  40194e:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  401952:	47d8      	blx	fp
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  401954:	2010      	movs	r0, #16
  401956:	47d8      	blx	fp
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  401958:	2000      	movs	r0, #0
  40195a:	47d8      	blx	fp
  40195c:	2580      	movs	r5, #128	; 0x80
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  40195e:	ac02      	add	r4, sp, #8
  401960:	2302      	movs	r3, #2
  401962:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  401966:	4621      	mov	r1, r4
  401968:	4630      	mov	r0, r6
  40196a:	47c8      	blx	r9
  40196c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  401970:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  401974:	2300      	movs	r3, #0
  401976:	60fb      	str	r3, [r7, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  401978:	2056      	movs	r0, #86	; 0x56
  40197a:	4b10      	ldr	r3, [pc, #64]	; (4019bc <oled_update+0x8c>)
  40197c:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  40197e:	4621      	mov	r1, r4
  401980:	4630      	mov	r0, r6
  401982:	4b0f      	ldr	r3, [pc, #60]	; (4019c0 <oled_update+0x90>)
  401984:	4798      	blx	r3

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
		for (col = 0; col < 128; ++col)
  401986:	3d01      	subs	r5, #1
  401988:	d1e9      	bne.n	40195e <oled_update+0x2e>
  40198a:	f10a 0a01 	add.w	sl, sl, #1
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
  40198e:	f1ba 0f04 	cmp.w	sl, #4
  401992:	d1da      	bne.n	40194a <oled_update+0x1a>
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  401994:	20b0      	movs	r0, #176	; 0xb0
  401996:	4b0b      	ldr	r3, [pc, #44]	; (4019c4 <oled_update+0x94>)
  401998:	4798      	blx	r3
	ssd1306_clear();
	ssd1306_set_page_address(0);
	sprintf(value, "%d", blink_wait);
  40199a:	4d0b      	ldr	r5, [pc, #44]	; (4019c8 <oled_update+0x98>)
  40199c:	4b0b      	ldr	r3, [pc, #44]	; (4019cc <oled_update+0x9c>)
  40199e:	681a      	ldr	r2, [r3, #0]
  4019a0:	490b      	ldr	r1, [pc, #44]	; (4019d0 <oled_update+0xa0>)
  4019a2:	4628      	mov	r0, r5
  4019a4:	4b0b      	ldr	r3, [pc, #44]	; (4019d4 <oled_update+0xa4>)
  4019a6:	4798      	blx	r3
	ssd1306_write_text("Blink wait (ms): ");
  4019a8:	480b      	ldr	r0, [pc, #44]	; (4019d8 <oled_update+0xa8>)
  4019aa:	4c0c      	ldr	r4, [pc, #48]	; (4019dc <oled_update+0xac>)
  4019ac:	47a0      	blx	r4
	ssd1306_write_text(value);
  4019ae:	4628      	mov	r0, r5
  4019b0:	47a0      	blx	r4
}
  4019b2:	b003      	add	sp, #12
  4019b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4019b8:	40008000 	.word	0x40008000
  4019bc:	20000001 	.word	0x20000001
  4019c0:	00400b39 	.word	0x00400b39
  4019c4:	00401829 	.word	0x00401829
  4019c8:	20000d8c 	.word	0x20000d8c
  4019cc:	2000040c 	.word	0x2000040c
  4019d0:	0040676c 	.word	0x0040676c
  4019d4:	0040275d 	.word	0x0040275d
  4019d8:	00406770 	.word	0x00406770
  4019dc:	00400925 	.word	0x00400925
  4019e0:	00400b0d 	.word	0x00400b0d
  4019e4:	400e1200 	.word	0x400e1200

004019e8 <oled_pause>:

void oled_pause()
{
  4019e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4019ec:	b083      	sub	sp, #12
  4019ee:	f04f 0a00 	mov.w	sl, #0
  4019f2:	f8df b078 	ldr.w	fp, [pc, #120]	; 401a6c <oled_pause+0x84>
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
	spi_select_device(SSD1306_SPI, &device);
  4019f6:	4f1a      	ldr	r7, [pc, #104]	; (401a60 <oled_pause+0x78>)
  4019f8:	f8df 907c 	ldr.w	r9, [pc, #124]	; 401a78 <oled_pause+0x90>
  4019fc:	f8df 807c 	ldr.w	r8, [pc, #124]	; 401a7c <oled_pause+0x94>
  401a00:	463e      	mov	r6, r7
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  401a02:	f00a 0007 	and.w	r0, sl, #7
  401a06:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  401a0a:	47d8      	blx	fp
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  401a0c:	2010      	movs	r0, #16
  401a0e:	47d8      	blx	fp
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  401a10:	2000      	movs	r0, #0
  401a12:	47d8      	blx	fp
  401a14:	2580      	movs	r5, #128	; 0x80
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  401a16:	ac02      	add	r4, sp, #8
  401a18:	2302      	movs	r3, #2
  401a1a:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  401a1e:	4621      	mov	r1, r4
  401a20:	4630      	mov	r0, r6
  401a22:	47c8      	blx	r9
  401a24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  401a28:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  401a2c:	2300      	movs	r3, #0
  401a2e:	60fb      	str	r3, [r7, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  401a30:	2056      	movs	r0, #86	; 0x56
  401a32:	4b0c      	ldr	r3, [pc, #48]	; (401a64 <oled_pause+0x7c>)
  401a34:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  401a36:	4621      	mov	r1, r4
  401a38:	4630      	mov	r0, r6
  401a3a:	4b0b      	ldr	r3, [pc, #44]	; (401a68 <oled_pause+0x80>)
  401a3c:	4798      	blx	r3

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
		for (col = 0; col < 128; ++col)
  401a3e:	3d01      	subs	r5, #1
  401a40:	d1e9      	bne.n	401a16 <oled_pause+0x2e>
  401a42:	f10a 0a01 	add.w	sl, sl, #1
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
  401a46:	f1ba 0f04 	cmp.w	sl, #4
  401a4a:	d1da      	bne.n	401a02 <oled_pause+0x1a>
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  401a4c:	20b0      	movs	r0, #176	; 0xb0
  401a4e:	4b07      	ldr	r3, [pc, #28]	; (401a6c <oled_pause+0x84>)
  401a50:	4798      	blx	r3
	ssd1306_clear();
	ssd1306_set_page_address(0);
	ssd1306_write_text("Not receiving");
  401a52:	4807      	ldr	r0, [pc, #28]	; (401a70 <oled_pause+0x88>)
  401a54:	4b07      	ldr	r3, [pc, #28]	; (401a74 <oled_pause+0x8c>)
  401a56:	4798      	blx	r3
  401a58:	b003      	add	sp, #12
  401a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401a5e:	bf00      	nop
  401a60:	40008000 	.word	0x40008000
  401a64:	20000001 	.word	0x20000001
  401a68:	00400b39 	.word	0x00400b39
  401a6c:	00401829 	.word	0x00401829
  401a70:	00406784 	.word	0x00406784
  401a74:	00400925 	.word	0x00400925
  401a78:	00400b0d 	.word	0x00400b0d
  401a7c:	400e1200 	.word	0x400e1200

00401a80 <main>:
	pio_handler_set_priority(PIOA, (IRQn_Type) ID_PIOA, irq_priority);
	pio_enable_interrupt(PIOA, PIN_PUSHBUTTON_0_MASK);
}

void main(void)
{
  401a80:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	sysclk_init();
  401a84:	4b3d      	ldr	r3, [pc, #244]	; (401b7c <main+0xfc>)
  401a86:	4798      	blx	r3
	board_init();
  401a88:	4b3d      	ldr	r3, [pc, #244]	; (401b80 <main+0x100>)
  401a8a:	4798      	blx	r3
	configure_buttons();
  401a8c:	4b3d      	ldr	r3, [pc, #244]	; (401b84 <main+0x104>)
  401a8e:	4798      	blx	r3
	ssd1306_init();
  401a90:	4b3d      	ldr	r3, [pc, #244]	; (401b88 <main+0x108>)
  401a92:	4798      	blx	r3
	
	//Init MAC
	if( !mac_init( msg_received, ack_received ) )
  401a94:	493d      	ldr	r1, [pc, #244]	; (401b8c <main+0x10c>)
  401a96:	483e      	ldr	r0, [pc, #248]	; (401b90 <main+0x110>)
  401a98:	4b3e      	ldr	r3, [pc, #248]	; (401b94 <main+0x114>)
  401a9a:	4798      	blx	r3
  401a9c:	b900      	cbnz	r0, 401aa0 <main+0x20>
  401a9e:	e7fe      	b.n	401a9e <main+0x1e>
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401aa0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  401aa4:	4b3c      	ldr	r3, [pc, #240]	; (401b98 <main+0x118>)
  401aa6:	635a      	str	r2, [r3, #52]	; 0x34
  401aa8:	e00b      	b.n	401ac2 <main+0x42>
	ioport_set_pin_level( IOPORT_CREATE_PIN(PIOC, 23), LED_ON );
	while (1)
	{
		while(button0_state == false)
		{
			delay_ms(1000);
  401aaa:	483c      	ldr	r0, [pc, #240]	; (401b9c <main+0x11c>)
  401aac:	4b3c      	ldr	r3, [pc, #240]	; (401ba0 <main+0x120>)
  401aae:	4798      	blx	r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401ab0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  401ab4:	4a38      	ldr	r2, [pc, #224]	; (401b98 <main+0x118>)
  401ab6:	6313      	str	r3, [r2, #48]	; 0x30
			ioport_set_pin_level( IOPORT_CREATE_PIN(PIOC, 23), !LED_ON );
			oled_pause();
  401ab8:	4b3a      	ldr	r3, [pc, #232]	; (401ba4 <main+0x124>)
  401aba:	4798      	blx	r3
			task_msgsend(false);
  401abc:	2000      	movs	r0, #0
  401abe:	4b3a      	ldr	r3, [pc, #232]	; (401ba8 <main+0x128>)
  401ac0:	4798      	blx	r3
	
	//signal initialization went fine.
	ioport_set_pin_level( IOPORT_CREATE_PIN(PIOC, 23), LED_ON );
	while (1)
	{
		while(button0_state == false)
  401ac2:	4b3a      	ldr	r3, [pc, #232]	; (401bac <main+0x12c>)
  401ac4:	781b      	ldrb	r3, [r3, #0]
  401ac6:	2b00      	cmp	r3, #0
  401ac8:	d0ef      	beq.n	401aaa <main+0x2a>
			ioport_set_pin_level( IOPORT_CREATE_PIN(PIOC, 23), !LED_ON );
			oled_pause();
			task_msgsend(false);
		}
	
		while (msg_state == 1) 
  401aca:	4b39      	ldr	r3, [pc, #228]	; (401bb0 <main+0x130>)
  401acc:	781b      	ldrb	r3, [r3, #0]
  401ace:	2b01      	cmp	r3, #1
  401ad0:	d10c      	bne.n	401aec <main+0x6c>
  401ad2:	4c37      	ldr	r4, [pc, #220]	; (401bb0 <main+0x130>)
		{
			if (ADDRESSEE_NODE == 1)
				break;
			oled_pause();
  401ad4:	4b33      	ldr	r3, [pc, #204]	; (401ba4 <main+0x124>)
  401ad6:	4798      	blx	r3
			task_msgsend(false);
  401ad8:	2000      	movs	r0, #0
  401ada:	4b33      	ldr	r3, [pc, #204]	; (401ba8 <main+0x128>)
  401adc:	4798      	blx	r3
			ioport_set_pin_level( IOPORT_CREATE_PIN(PIOC, 23), !LED_ON );
			oled_pause();
			task_msgsend(false);
		}
	
		while (msg_state == 1) 
  401ade:	7823      	ldrb	r3, [r4, #0]
  401ae0:	2b01      	cmp	r3, #1
  401ae2:	d0f7      	beq.n	401ad4 <main+0x54>
				break;
			oled_pause();
			task_msgsend(false);
		}
	
		while(button0_state == true && msg_state == 0)
  401ae4:	4b31      	ldr	r3, [pc, #196]	; (401bac <main+0x12c>)
  401ae6:	781b      	ldrb	r3, [r3, #0]
  401ae8:	2b00      	cmp	r3, #0
  401aea:	d0ea      	beq.n	401ac2 <main+0x42>
  401aec:	4b30      	ldr	r3, [pc, #192]	; (401bb0 <main+0x130>)
  401aee:	781b      	ldrb	r3, [r3, #0]
  401af0:	2b00      	cmp	r3, #0
  401af2:	d1e6      	bne.n	401ac2 <main+0x42>
		{
			oled_update();
  401af4:	4b2f      	ldr	r3, [pc, #188]	; (401bb4 <main+0x134>)
  401af6:	4798      	blx	r3
			task_msgsend(true);
  401af8:	2001      	movs	r0, #1
  401afa:	4b2b      	ldr	r3, [pc, #172]	; (401ba8 <main+0x128>)
  401afc:	4798      	blx	r3
			task_ledblink();
  401afe:	4b2e      	ldr	r3, [pc, #184]	; (401bb8 <main+0x138>)
  401b00:	4798      	blx	r3
		
			delay_ms(blink_wait);
  401b02:	4b2e      	ldr	r3, [pc, #184]	; (401bbc <main+0x13c>)
  401b04:	681a      	ldr	r2, [r3, #0]
  401b06:	2300      	movs	r3, #0
  401b08:	00d0      	lsls	r0, r2, #3
  401b0a:	0f51      	lsrs	r1, r2, #29
  401b0c:	ea4f 1941 	mov.w	r9, r1, lsl #5
  401b10:	ea49 69d0 	orr.w	r9, r9, r0, lsr #27
  401b14:	ea4f 1840 	mov.w	r8, r0, lsl #5
  401b18:	ebb8 0000 	subs.w	r0, r8, r0
  401b1c:	eb69 0101 	sbc.w	r1, r9, r1
  401b20:	018f      	lsls	r7, r1, #6
  401b22:	ea47 6790 	orr.w	r7, r7, r0, lsr #26
  401b26:	0186      	lsls	r6, r0, #6
  401b28:	1a30      	subs	r0, r6, r0
  401b2a:	eb67 0101 	sbc.w	r1, r7, r1
  401b2e:	1880      	adds	r0, r0, r2
  401b30:	4159      	adcs	r1, r3
  401b32:	ea4f 1b01 	mov.w	fp, r1, lsl #4
  401b36:	ea4b 7b10 	orr.w	fp, fp, r0, lsr #28
  401b3a:	ea4f 1a00 	mov.w	sl, r0, lsl #4
  401b3e:	ebba 0000 	subs.w	r0, sl, r0
  401b42:	eb6b 0101 	sbc.w	r1, fp, r1
  401b46:	024b      	lsls	r3, r1, #9
  401b48:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
  401b4c:	0242      	lsls	r2, r0, #9
  401b4e:	4610      	mov	r0, r2
  401b50:	4619      	mov	r1, r3
  401b52:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401b56:	2300      	movs	r3, #0
  401b58:	f243 64af 	movw	r4, #13999	; 0x36af
  401b5c:	2500      	movs	r5, #0
  401b5e:	1900      	adds	r0, r0, r4
  401b60:	4169      	adcs	r1, r5
  401b62:	4c17      	ldr	r4, [pc, #92]	; (401bc0 <main+0x140>)
  401b64:	47a0      	blx	r4
  401b66:	4b0e      	ldr	r3, [pc, #56]	; (401ba0 <main+0x120>)
  401b68:	4798      	blx	r3
				break;
			oled_pause();
			task_msgsend(false);
		}
	
		while(button0_state == true && msg_state == 0)
  401b6a:	4b10      	ldr	r3, [pc, #64]	; (401bac <main+0x12c>)
  401b6c:	781b      	ldrb	r3, [r3, #0]
  401b6e:	2b00      	cmp	r3, #0
  401b70:	d0a7      	beq.n	401ac2 <main+0x42>
  401b72:	4b0f      	ldr	r3, [pc, #60]	; (401bb0 <main+0x130>)
  401b74:	781b      	ldrb	r3, [r3, #0]
  401b76:	2b00      	cmp	r3, #0
  401b78:	d0bc      	beq.n	401af4 <main+0x74>
  401b7a:	e7a2      	b.n	401ac2 <main+0x42>
  401b7c:	004009d5 	.word	0x004009d5
  401b80:	00400b59 	.word	0x00400b59
  401b84:	00401871 	.word	0x00401871
  401b88:	0040086d 	.word	0x0040086d
  401b8c:	00401825 	.word	0x00401825
  401b90:	00401805 	.word	0x00401805
  401b94:	00400149 	.word	0x00400149
  401b98:	400e1200 	.word	0x400e1200
  401b9c:	0082ca25 	.word	0x0082ca25
  401ba0:	20000001 	.word	0x20000001
  401ba4:	004019e9 	.word	0x004019e9
  401ba8:	004018d9 	.word	0x004018d9
  401bac:	20000d50 	.word	0x20000d50
  401bb0:	20000410 	.word	0x20000410
  401bb4:	00401931 	.word	0x00401931
  401bb8:	00401909 	.word	0x00401909
  401bbc:	2000040c 	.word	0x2000040c
  401bc0:	00402359 	.word	0x00402359

00401bc4 <__aeabi_drsub>:
  401bc4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  401bc8:	e002      	b.n	401bd0 <__adddf3>
  401bca:	bf00      	nop

00401bcc <__aeabi_dsub>:
  401bcc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00401bd0 <__adddf3>:
  401bd0:	b530      	push	{r4, r5, lr}
  401bd2:	ea4f 0441 	mov.w	r4, r1, lsl #1
  401bd6:	ea4f 0543 	mov.w	r5, r3, lsl #1
  401bda:	ea94 0f05 	teq	r4, r5
  401bde:	bf08      	it	eq
  401be0:	ea90 0f02 	teqeq	r0, r2
  401be4:	bf1f      	itttt	ne
  401be6:	ea54 0c00 	orrsne.w	ip, r4, r0
  401bea:	ea55 0c02 	orrsne.w	ip, r5, r2
  401bee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  401bf2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  401bf6:	f000 80e2 	beq.w	401dbe <__adddf3+0x1ee>
  401bfa:	ea4f 5454 	mov.w	r4, r4, lsr #21
  401bfe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  401c02:	bfb8      	it	lt
  401c04:	426d      	neglt	r5, r5
  401c06:	dd0c      	ble.n	401c22 <__adddf3+0x52>
  401c08:	442c      	add	r4, r5
  401c0a:	ea80 0202 	eor.w	r2, r0, r2
  401c0e:	ea81 0303 	eor.w	r3, r1, r3
  401c12:	ea82 0000 	eor.w	r0, r2, r0
  401c16:	ea83 0101 	eor.w	r1, r3, r1
  401c1a:	ea80 0202 	eor.w	r2, r0, r2
  401c1e:	ea81 0303 	eor.w	r3, r1, r3
  401c22:	2d36      	cmp	r5, #54	; 0x36
  401c24:	bf88      	it	hi
  401c26:	bd30      	pophi	{r4, r5, pc}
  401c28:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  401c2c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  401c30:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  401c34:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  401c38:	d002      	beq.n	401c40 <__adddf3+0x70>
  401c3a:	4240      	negs	r0, r0
  401c3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  401c40:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  401c44:	ea4f 3303 	mov.w	r3, r3, lsl #12
  401c48:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  401c4c:	d002      	beq.n	401c54 <__adddf3+0x84>
  401c4e:	4252      	negs	r2, r2
  401c50:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  401c54:	ea94 0f05 	teq	r4, r5
  401c58:	f000 80a7 	beq.w	401daa <__adddf3+0x1da>
  401c5c:	f1a4 0401 	sub.w	r4, r4, #1
  401c60:	f1d5 0e20 	rsbs	lr, r5, #32
  401c64:	db0d      	blt.n	401c82 <__adddf3+0xb2>
  401c66:	fa02 fc0e 	lsl.w	ip, r2, lr
  401c6a:	fa22 f205 	lsr.w	r2, r2, r5
  401c6e:	1880      	adds	r0, r0, r2
  401c70:	f141 0100 	adc.w	r1, r1, #0
  401c74:	fa03 f20e 	lsl.w	r2, r3, lr
  401c78:	1880      	adds	r0, r0, r2
  401c7a:	fa43 f305 	asr.w	r3, r3, r5
  401c7e:	4159      	adcs	r1, r3
  401c80:	e00e      	b.n	401ca0 <__adddf3+0xd0>
  401c82:	f1a5 0520 	sub.w	r5, r5, #32
  401c86:	f10e 0e20 	add.w	lr, lr, #32
  401c8a:	2a01      	cmp	r2, #1
  401c8c:	fa03 fc0e 	lsl.w	ip, r3, lr
  401c90:	bf28      	it	cs
  401c92:	f04c 0c02 	orrcs.w	ip, ip, #2
  401c96:	fa43 f305 	asr.w	r3, r3, r5
  401c9a:	18c0      	adds	r0, r0, r3
  401c9c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  401ca0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401ca4:	d507      	bpl.n	401cb6 <__adddf3+0xe6>
  401ca6:	f04f 0e00 	mov.w	lr, #0
  401caa:	f1dc 0c00 	rsbs	ip, ip, #0
  401cae:	eb7e 0000 	sbcs.w	r0, lr, r0
  401cb2:	eb6e 0101 	sbc.w	r1, lr, r1
  401cb6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  401cba:	d31b      	bcc.n	401cf4 <__adddf3+0x124>
  401cbc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  401cc0:	d30c      	bcc.n	401cdc <__adddf3+0x10c>
  401cc2:	0849      	lsrs	r1, r1, #1
  401cc4:	ea5f 0030 	movs.w	r0, r0, rrx
  401cc8:	ea4f 0c3c 	mov.w	ip, ip, rrx
  401ccc:	f104 0401 	add.w	r4, r4, #1
  401cd0:	ea4f 5244 	mov.w	r2, r4, lsl #21
  401cd4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  401cd8:	f080 809a 	bcs.w	401e10 <__adddf3+0x240>
  401cdc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  401ce0:	bf08      	it	eq
  401ce2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  401ce6:	f150 0000 	adcs.w	r0, r0, #0
  401cea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  401cee:	ea41 0105 	orr.w	r1, r1, r5
  401cf2:	bd30      	pop	{r4, r5, pc}
  401cf4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  401cf8:	4140      	adcs	r0, r0
  401cfa:	eb41 0101 	adc.w	r1, r1, r1
  401cfe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401d02:	f1a4 0401 	sub.w	r4, r4, #1
  401d06:	d1e9      	bne.n	401cdc <__adddf3+0x10c>
  401d08:	f091 0f00 	teq	r1, #0
  401d0c:	bf04      	itt	eq
  401d0e:	4601      	moveq	r1, r0
  401d10:	2000      	moveq	r0, #0
  401d12:	fab1 f381 	clz	r3, r1
  401d16:	bf08      	it	eq
  401d18:	3320      	addeq	r3, #32
  401d1a:	f1a3 030b 	sub.w	r3, r3, #11
  401d1e:	f1b3 0220 	subs.w	r2, r3, #32
  401d22:	da0c      	bge.n	401d3e <__adddf3+0x16e>
  401d24:	320c      	adds	r2, #12
  401d26:	dd08      	ble.n	401d3a <__adddf3+0x16a>
  401d28:	f102 0c14 	add.w	ip, r2, #20
  401d2c:	f1c2 020c 	rsb	r2, r2, #12
  401d30:	fa01 f00c 	lsl.w	r0, r1, ip
  401d34:	fa21 f102 	lsr.w	r1, r1, r2
  401d38:	e00c      	b.n	401d54 <__adddf3+0x184>
  401d3a:	f102 0214 	add.w	r2, r2, #20
  401d3e:	bfd8      	it	le
  401d40:	f1c2 0c20 	rsble	ip, r2, #32
  401d44:	fa01 f102 	lsl.w	r1, r1, r2
  401d48:	fa20 fc0c 	lsr.w	ip, r0, ip
  401d4c:	bfdc      	itt	le
  401d4e:	ea41 010c 	orrle.w	r1, r1, ip
  401d52:	4090      	lslle	r0, r2
  401d54:	1ae4      	subs	r4, r4, r3
  401d56:	bfa2      	ittt	ge
  401d58:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  401d5c:	4329      	orrge	r1, r5
  401d5e:	bd30      	popge	{r4, r5, pc}
  401d60:	ea6f 0404 	mvn.w	r4, r4
  401d64:	3c1f      	subs	r4, #31
  401d66:	da1c      	bge.n	401da2 <__adddf3+0x1d2>
  401d68:	340c      	adds	r4, #12
  401d6a:	dc0e      	bgt.n	401d8a <__adddf3+0x1ba>
  401d6c:	f104 0414 	add.w	r4, r4, #20
  401d70:	f1c4 0220 	rsb	r2, r4, #32
  401d74:	fa20 f004 	lsr.w	r0, r0, r4
  401d78:	fa01 f302 	lsl.w	r3, r1, r2
  401d7c:	ea40 0003 	orr.w	r0, r0, r3
  401d80:	fa21 f304 	lsr.w	r3, r1, r4
  401d84:	ea45 0103 	orr.w	r1, r5, r3
  401d88:	bd30      	pop	{r4, r5, pc}
  401d8a:	f1c4 040c 	rsb	r4, r4, #12
  401d8e:	f1c4 0220 	rsb	r2, r4, #32
  401d92:	fa20 f002 	lsr.w	r0, r0, r2
  401d96:	fa01 f304 	lsl.w	r3, r1, r4
  401d9a:	ea40 0003 	orr.w	r0, r0, r3
  401d9e:	4629      	mov	r1, r5
  401da0:	bd30      	pop	{r4, r5, pc}
  401da2:	fa21 f004 	lsr.w	r0, r1, r4
  401da6:	4629      	mov	r1, r5
  401da8:	bd30      	pop	{r4, r5, pc}
  401daa:	f094 0f00 	teq	r4, #0
  401dae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  401db2:	bf06      	itte	eq
  401db4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  401db8:	3401      	addeq	r4, #1
  401dba:	3d01      	subne	r5, #1
  401dbc:	e74e      	b.n	401c5c <__adddf3+0x8c>
  401dbe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  401dc2:	bf18      	it	ne
  401dc4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  401dc8:	d029      	beq.n	401e1e <__adddf3+0x24e>
  401dca:	ea94 0f05 	teq	r4, r5
  401dce:	bf08      	it	eq
  401dd0:	ea90 0f02 	teqeq	r0, r2
  401dd4:	d005      	beq.n	401de2 <__adddf3+0x212>
  401dd6:	ea54 0c00 	orrs.w	ip, r4, r0
  401dda:	bf04      	itt	eq
  401ddc:	4619      	moveq	r1, r3
  401dde:	4610      	moveq	r0, r2
  401de0:	bd30      	pop	{r4, r5, pc}
  401de2:	ea91 0f03 	teq	r1, r3
  401de6:	bf1e      	ittt	ne
  401de8:	2100      	movne	r1, #0
  401dea:	2000      	movne	r0, #0
  401dec:	bd30      	popne	{r4, r5, pc}
  401dee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  401df2:	d105      	bne.n	401e00 <__adddf3+0x230>
  401df4:	0040      	lsls	r0, r0, #1
  401df6:	4149      	adcs	r1, r1
  401df8:	bf28      	it	cs
  401dfa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  401dfe:	bd30      	pop	{r4, r5, pc}
  401e00:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  401e04:	bf3c      	itt	cc
  401e06:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  401e0a:	bd30      	popcc	{r4, r5, pc}
  401e0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401e10:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  401e14:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401e18:	f04f 0000 	mov.w	r0, #0
  401e1c:	bd30      	pop	{r4, r5, pc}
  401e1e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  401e22:	bf1a      	itte	ne
  401e24:	4619      	movne	r1, r3
  401e26:	4610      	movne	r0, r2
  401e28:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  401e2c:	bf1c      	itt	ne
  401e2e:	460b      	movne	r3, r1
  401e30:	4602      	movne	r2, r0
  401e32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  401e36:	bf06      	itte	eq
  401e38:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  401e3c:	ea91 0f03 	teqeq	r1, r3
  401e40:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  401e44:	bd30      	pop	{r4, r5, pc}
  401e46:	bf00      	nop

00401e48 <__aeabi_ui2d>:
  401e48:	f090 0f00 	teq	r0, #0
  401e4c:	bf04      	itt	eq
  401e4e:	2100      	moveq	r1, #0
  401e50:	4770      	bxeq	lr
  401e52:	b530      	push	{r4, r5, lr}
  401e54:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401e58:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401e5c:	f04f 0500 	mov.w	r5, #0
  401e60:	f04f 0100 	mov.w	r1, #0
  401e64:	e750      	b.n	401d08 <__adddf3+0x138>
  401e66:	bf00      	nop

00401e68 <__aeabi_i2d>:
  401e68:	f090 0f00 	teq	r0, #0
  401e6c:	bf04      	itt	eq
  401e6e:	2100      	moveq	r1, #0
  401e70:	4770      	bxeq	lr
  401e72:	b530      	push	{r4, r5, lr}
  401e74:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401e78:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401e7c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  401e80:	bf48      	it	mi
  401e82:	4240      	negmi	r0, r0
  401e84:	f04f 0100 	mov.w	r1, #0
  401e88:	e73e      	b.n	401d08 <__adddf3+0x138>
  401e8a:	bf00      	nop

00401e8c <__aeabi_f2d>:
  401e8c:	0042      	lsls	r2, r0, #1
  401e8e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  401e92:	ea4f 0131 	mov.w	r1, r1, rrx
  401e96:	ea4f 7002 	mov.w	r0, r2, lsl #28
  401e9a:	bf1f      	itttt	ne
  401e9c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  401ea0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  401ea4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  401ea8:	4770      	bxne	lr
  401eaa:	f092 0f00 	teq	r2, #0
  401eae:	bf14      	ite	ne
  401eb0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  401eb4:	4770      	bxeq	lr
  401eb6:	b530      	push	{r4, r5, lr}
  401eb8:	f44f 7460 	mov.w	r4, #896	; 0x380
  401ebc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401ec0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  401ec4:	e720      	b.n	401d08 <__adddf3+0x138>
  401ec6:	bf00      	nop

00401ec8 <__aeabi_ul2d>:
  401ec8:	ea50 0201 	orrs.w	r2, r0, r1
  401ecc:	bf08      	it	eq
  401ece:	4770      	bxeq	lr
  401ed0:	b530      	push	{r4, r5, lr}
  401ed2:	f04f 0500 	mov.w	r5, #0
  401ed6:	e00a      	b.n	401eee <__aeabi_l2d+0x16>

00401ed8 <__aeabi_l2d>:
  401ed8:	ea50 0201 	orrs.w	r2, r0, r1
  401edc:	bf08      	it	eq
  401ede:	4770      	bxeq	lr
  401ee0:	b530      	push	{r4, r5, lr}
  401ee2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  401ee6:	d502      	bpl.n	401eee <__aeabi_l2d+0x16>
  401ee8:	4240      	negs	r0, r0
  401eea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  401eee:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401ef2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401ef6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  401efa:	f43f aedc 	beq.w	401cb6 <__adddf3+0xe6>
  401efe:	f04f 0203 	mov.w	r2, #3
  401f02:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  401f06:	bf18      	it	ne
  401f08:	3203      	addne	r2, #3
  401f0a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  401f0e:	bf18      	it	ne
  401f10:	3203      	addne	r2, #3
  401f12:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  401f16:	f1c2 0320 	rsb	r3, r2, #32
  401f1a:	fa00 fc03 	lsl.w	ip, r0, r3
  401f1e:	fa20 f002 	lsr.w	r0, r0, r2
  401f22:	fa01 fe03 	lsl.w	lr, r1, r3
  401f26:	ea40 000e 	orr.w	r0, r0, lr
  401f2a:	fa21 f102 	lsr.w	r1, r1, r2
  401f2e:	4414      	add	r4, r2
  401f30:	e6c1      	b.n	401cb6 <__adddf3+0xe6>
  401f32:	bf00      	nop

00401f34 <__aeabi_dmul>:
  401f34:	b570      	push	{r4, r5, r6, lr}
  401f36:	f04f 0cff 	mov.w	ip, #255	; 0xff
  401f3a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  401f3e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  401f42:	bf1d      	ittte	ne
  401f44:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  401f48:	ea94 0f0c 	teqne	r4, ip
  401f4c:	ea95 0f0c 	teqne	r5, ip
  401f50:	f000 f8de 	bleq	402110 <__aeabi_dmul+0x1dc>
  401f54:	442c      	add	r4, r5
  401f56:	ea81 0603 	eor.w	r6, r1, r3
  401f5a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  401f5e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  401f62:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  401f66:	bf18      	it	ne
  401f68:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  401f6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401f70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  401f74:	d038      	beq.n	401fe8 <__aeabi_dmul+0xb4>
  401f76:	fba0 ce02 	umull	ip, lr, r0, r2
  401f7a:	f04f 0500 	mov.w	r5, #0
  401f7e:	fbe1 e502 	umlal	lr, r5, r1, r2
  401f82:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  401f86:	fbe0 e503 	umlal	lr, r5, r0, r3
  401f8a:	f04f 0600 	mov.w	r6, #0
  401f8e:	fbe1 5603 	umlal	r5, r6, r1, r3
  401f92:	f09c 0f00 	teq	ip, #0
  401f96:	bf18      	it	ne
  401f98:	f04e 0e01 	orrne.w	lr, lr, #1
  401f9c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  401fa0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  401fa4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  401fa8:	d204      	bcs.n	401fb4 <__aeabi_dmul+0x80>
  401faa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  401fae:	416d      	adcs	r5, r5
  401fb0:	eb46 0606 	adc.w	r6, r6, r6
  401fb4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  401fb8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  401fbc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  401fc0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  401fc4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  401fc8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  401fcc:	bf88      	it	hi
  401fce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  401fd2:	d81e      	bhi.n	402012 <__aeabi_dmul+0xde>
  401fd4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  401fd8:	bf08      	it	eq
  401fda:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  401fde:	f150 0000 	adcs.w	r0, r0, #0
  401fe2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  401fe6:	bd70      	pop	{r4, r5, r6, pc}
  401fe8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  401fec:	ea46 0101 	orr.w	r1, r6, r1
  401ff0:	ea40 0002 	orr.w	r0, r0, r2
  401ff4:	ea81 0103 	eor.w	r1, r1, r3
  401ff8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  401ffc:	bfc2      	ittt	gt
  401ffe:	ebd4 050c 	rsbsgt	r5, r4, ip
  402002:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  402006:	bd70      	popgt	{r4, r5, r6, pc}
  402008:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40200c:	f04f 0e00 	mov.w	lr, #0
  402010:	3c01      	subs	r4, #1
  402012:	f300 80ab 	bgt.w	40216c <__aeabi_dmul+0x238>
  402016:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40201a:	bfde      	ittt	le
  40201c:	2000      	movle	r0, #0
  40201e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  402022:	bd70      	pople	{r4, r5, r6, pc}
  402024:	f1c4 0400 	rsb	r4, r4, #0
  402028:	3c20      	subs	r4, #32
  40202a:	da35      	bge.n	402098 <__aeabi_dmul+0x164>
  40202c:	340c      	adds	r4, #12
  40202e:	dc1b      	bgt.n	402068 <__aeabi_dmul+0x134>
  402030:	f104 0414 	add.w	r4, r4, #20
  402034:	f1c4 0520 	rsb	r5, r4, #32
  402038:	fa00 f305 	lsl.w	r3, r0, r5
  40203c:	fa20 f004 	lsr.w	r0, r0, r4
  402040:	fa01 f205 	lsl.w	r2, r1, r5
  402044:	ea40 0002 	orr.w	r0, r0, r2
  402048:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40204c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402050:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402054:	fa21 f604 	lsr.w	r6, r1, r4
  402058:	eb42 0106 	adc.w	r1, r2, r6
  40205c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402060:	bf08      	it	eq
  402062:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402066:	bd70      	pop	{r4, r5, r6, pc}
  402068:	f1c4 040c 	rsb	r4, r4, #12
  40206c:	f1c4 0520 	rsb	r5, r4, #32
  402070:	fa00 f304 	lsl.w	r3, r0, r4
  402074:	fa20 f005 	lsr.w	r0, r0, r5
  402078:	fa01 f204 	lsl.w	r2, r1, r4
  40207c:	ea40 0002 	orr.w	r0, r0, r2
  402080:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402084:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402088:	f141 0100 	adc.w	r1, r1, #0
  40208c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402090:	bf08      	it	eq
  402092:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402096:	bd70      	pop	{r4, r5, r6, pc}
  402098:	f1c4 0520 	rsb	r5, r4, #32
  40209c:	fa00 f205 	lsl.w	r2, r0, r5
  4020a0:	ea4e 0e02 	orr.w	lr, lr, r2
  4020a4:	fa20 f304 	lsr.w	r3, r0, r4
  4020a8:	fa01 f205 	lsl.w	r2, r1, r5
  4020ac:	ea43 0302 	orr.w	r3, r3, r2
  4020b0:	fa21 f004 	lsr.w	r0, r1, r4
  4020b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4020b8:	fa21 f204 	lsr.w	r2, r1, r4
  4020bc:	ea20 0002 	bic.w	r0, r0, r2
  4020c0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4020c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4020c8:	bf08      	it	eq
  4020ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4020ce:	bd70      	pop	{r4, r5, r6, pc}
  4020d0:	f094 0f00 	teq	r4, #0
  4020d4:	d10f      	bne.n	4020f6 <__aeabi_dmul+0x1c2>
  4020d6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4020da:	0040      	lsls	r0, r0, #1
  4020dc:	eb41 0101 	adc.w	r1, r1, r1
  4020e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4020e4:	bf08      	it	eq
  4020e6:	3c01      	subeq	r4, #1
  4020e8:	d0f7      	beq.n	4020da <__aeabi_dmul+0x1a6>
  4020ea:	ea41 0106 	orr.w	r1, r1, r6
  4020ee:	f095 0f00 	teq	r5, #0
  4020f2:	bf18      	it	ne
  4020f4:	4770      	bxne	lr
  4020f6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4020fa:	0052      	lsls	r2, r2, #1
  4020fc:	eb43 0303 	adc.w	r3, r3, r3
  402100:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  402104:	bf08      	it	eq
  402106:	3d01      	subeq	r5, #1
  402108:	d0f7      	beq.n	4020fa <__aeabi_dmul+0x1c6>
  40210a:	ea43 0306 	orr.w	r3, r3, r6
  40210e:	4770      	bx	lr
  402110:	ea94 0f0c 	teq	r4, ip
  402114:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  402118:	bf18      	it	ne
  40211a:	ea95 0f0c 	teqne	r5, ip
  40211e:	d00c      	beq.n	40213a <__aeabi_dmul+0x206>
  402120:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402124:	bf18      	it	ne
  402126:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40212a:	d1d1      	bne.n	4020d0 <__aeabi_dmul+0x19c>
  40212c:	ea81 0103 	eor.w	r1, r1, r3
  402130:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402134:	f04f 0000 	mov.w	r0, #0
  402138:	bd70      	pop	{r4, r5, r6, pc}
  40213a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40213e:	bf06      	itte	eq
  402140:	4610      	moveq	r0, r2
  402142:	4619      	moveq	r1, r3
  402144:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402148:	d019      	beq.n	40217e <__aeabi_dmul+0x24a>
  40214a:	ea94 0f0c 	teq	r4, ip
  40214e:	d102      	bne.n	402156 <__aeabi_dmul+0x222>
  402150:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  402154:	d113      	bne.n	40217e <__aeabi_dmul+0x24a>
  402156:	ea95 0f0c 	teq	r5, ip
  40215a:	d105      	bne.n	402168 <__aeabi_dmul+0x234>
  40215c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  402160:	bf1c      	itt	ne
  402162:	4610      	movne	r0, r2
  402164:	4619      	movne	r1, r3
  402166:	d10a      	bne.n	40217e <__aeabi_dmul+0x24a>
  402168:	ea81 0103 	eor.w	r1, r1, r3
  40216c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402170:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  402174:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402178:	f04f 0000 	mov.w	r0, #0
  40217c:	bd70      	pop	{r4, r5, r6, pc}
  40217e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  402182:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  402186:	bd70      	pop	{r4, r5, r6, pc}

00402188 <__aeabi_ddiv>:
  402188:	b570      	push	{r4, r5, r6, lr}
  40218a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40218e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  402192:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  402196:	bf1d      	ittte	ne
  402198:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40219c:	ea94 0f0c 	teqne	r4, ip
  4021a0:	ea95 0f0c 	teqne	r5, ip
  4021a4:	f000 f8a7 	bleq	4022f6 <__aeabi_ddiv+0x16e>
  4021a8:	eba4 0405 	sub.w	r4, r4, r5
  4021ac:	ea81 0e03 	eor.w	lr, r1, r3
  4021b0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4021b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4021b8:	f000 8088 	beq.w	4022cc <__aeabi_ddiv+0x144>
  4021bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4021c0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4021c4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4021c8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4021cc:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4021d0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4021d4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4021d8:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4021dc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4021e0:	429d      	cmp	r5, r3
  4021e2:	bf08      	it	eq
  4021e4:	4296      	cmpeq	r6, r2
  4021e6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4021ea:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4021ee:	d202      	bcs.n	4021f6 <__aeabi_ddiv+0x6e>
  4021f0:	085b      	lsrs	r3, r3, #1
  4021f2:	ea4f 0232 	mov.w	r2, r2, rrx
  4021f6:	1ab6      	subs	r6, r6, r2
  4021f8:	eb65 0503 	sbc.w	r5, r5, r3
  4021fc:	085b      	lsrs	r3, r3, #1
  4021fe:	ea4f 0232 	mov.w	r2, r2, rrx
  402202:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  402206:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40220a:	ebb6 0e02 	subs.w	lr, r6, r2
  40220e:	eb75 0e03 	sbcs.w	lr, r5, r3
  402212:	bf22      	ittt	cs
  402214:	1ab6      	subcs	r6, r6, r2
  402216:	4675      	movcs	r5, lr
  402218:	ea40 000c 	orrcs.w	r0, r0, ip
  40221c:	085b      	lsrs	r3, r3, #1
  40221e:	ea4f 0232 	mov.w	r2, r2, rrx
  402222:	ebb6 0e02 	subs.w	lr, r6, r2
  402226:	eb75 0e03 	sbcs.w	lr, r5, r3
  40222a:	bf22      	ittt	cs
  40222c:	1ab6      	subcs	r6, r6, r2
  40222e:	4675      	movcs	r5, lr
  402230:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  402234:	085b      	lsrs	r3, r3, #1
  402236:	ea4f 0232 	mov.w	r2, r2, rrx
  40223a:	ebb6 0e02 	subs.w	lr, r6, r2
  40223e:	eb75 0e03 	sbcs.w	lr, r5, r3
  402242:	bf22      	ittt	cs
  402244:	1ab6      	subcs	r6, r6, r2
  402246:	4675      	movcs	r5, lr
  402248:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40224c:	085b      	lsrs	r3, r3, #1
  40224e:	ea4f 0232 	mov.w	r2, r2, rrx
  402252:	ebb6 0e02 	subs.w	lr, r6, r2
  402256:	eb75 0e03 	sbcs.w	lr, r5, r3
  40225a:	bf22      	ittt	cs
  40225c:	1ab6      	subcs	r6, r6, r2
  40225e:	4675      	movcs	r5, lr
  402260:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  402264:	ea55 0e06 	orrs.w	lr, r5, r6
  402268:	d018      	beq.n	40229c <__aeabi_ddiv+0x114>
  40226a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40226e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  402272:	ea4f 1606 	mov.w	r6, r6, lsl #4
  402276:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40227a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40227e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  402282:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  402286:	d1c0      	bne.n	40220a <__aeabi_ddiv+0x82>
  402288:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40228c:	d10b      	bne.n	4022a6 <__aeabi_ddiv+0x11e>
  40228e:	ea41 0100 	orr.w	r1, r1, r0
  402292:	f04f 0000 	mov.w	r0, #0
  402296:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40229a:	e7b6      	b.n	40220a <__aeabi_ddiv+0x82>
  40229c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4022a0:	bf04      	itt	eq
  4022a2:	4301      	orreq	r1, r0
  4022a4:	2000      	moveq	r0, #0
  4022a6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4022aa:	bf88      	it	hi
  4022ac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4022b0:	f63f aeaf 	bhi.w	402012 <__aeabi_dmul+0xde>
  4022b4:	ebb5 0c03 	subs.w	ip, r5, r3
  4022b8:	bf04      	itt	eq
  4022ba:	ebb6 0c02 	subseq.w	ip, r6, r2
  4022be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4022c2:	f150 0000 	adcs.w	r0, r0, #0
  4022c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4022ca:	bd70      	pop	{r4, r5, r6, pc}
  4022cc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4022d0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4022d4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4022d8:	bfc2      	ittt	gt
  4022da:	ebd4 050c 	rsbsgt	r5, r4, ip
  4022de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4022e2:	bd70      	popgt	{r4, r5, r6, pc}
  4022e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4022e8:	f04f 0e00 	mov.w	lr, #0
  4022ec:	3c01      	subs	r4, #1
  4022ee:	e690      	b.n	402012 <__aeabi_dmul+0xde>
  4022f0:	ea45 0e06 	orr.w	lr, r5, r6
  4022f4:	e68d      	b.n	402012 <__aeabi_dmul+0xde>
  4022f6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4022fa:	ea94 0f0c 	teq	r4, ip
  4022fe:	bf08      	it	eq
  402300:	ea95 0f0c 	teqeq	r5, ip
  402304:	f43f af3b 	beq.w	40217e <__aeabi_dmul+0x24a>
  402308:	ea94 0f0c 	teq	r4, ip
  40230c:	d10a      	bne.n	402324 <__aeabi_ddiv+0x19c>
  40230e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402312:	f47f af34 	bne.w	40217e <__aeabi_dmul+0x24a>
  402316:	ea95 0f0c 	teq	r5, ip
  40231a:	f47f af25 	bne.w	402168 <__aeabi_dmul+0x234>
  40231e:	4610      	mov	r0, r2
  402320:	4619      	mov	r1, r3
  402322:	e72c      	b.n	40217e <__aeabi_dmul+0x24a>
  402324:	ea95 0f0c 	teq	r5, ip
  402328:	d106      	bne.n	402338 <__aeabi_ddiv+0x1b0>
  40232a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40232e:	f43f aefd 	beq.w	40212c <__aeabi_dmul+0x1f8>
  402332:	4610      	mov	r0, r2
  402334:	4619      	mov	r1, r3
  402336:	e722      	b.n	40217e <__aeabi_dmul+0x24a>
  402338:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40233c:	bf18      	it	ne
  40233e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402342:	f47f aec5 	bne.w	4020d0 <__aeabi_dmul+0x19c>
  402346:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40234a:	f47f af0d 	bne.w	402168 <__aeabi_dmul+0x234>
  40234e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  402352:	f47f aeeb 	bne.w	40212c <__aeabi_dmul+0x1f8>
  402356:	e712      	b.n	40217e <__aeabi_dmul+0x24a>

00402358 <__aeabi_uldivmod>:
  402358:	b953      	cbnz	r3, 402370 <__aeabi_uldivmod+0x18>
  40235a:	b94a      	cbnz	r2, 402370 <__aeabi_uldivmod+0x18>
  40235c:	2900      	cmp	r1, #0
  40235e:	bf08      	it	eq
  402360:	2800      	cmpeq	r0, #0
  402362:	bf1c      	itt	ne
  402364:	f04f 31ff 	movne.w	r1, #4294967295
  402368:	f04f 30ff 	movne.w	r0, #4294967295
  40236c:	f000 b97e 	b.w	40266c <__aeabi_idiv0>
  402370:	f1ad 0c08 	sub.w	ip, sp, #8
  402374:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  402378:	f000 f806 	bl	402388 <__udivmoddi4>
  40237c:	f8dd e004 	ldr.w	lr, [sp, #4]
  402380:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402384:	b004      	add	sp, #16
  402386:	4770      	bx	lr

00402388 <__udivmoddi4>:
  402388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40238c:	468c      	mov	ip, r1
  40238e:	460e      	mov	r6, r1
  402390:	4604      	mov	r4, r0
  402392:	9d08      	ldr	r5, [sp, #32]
  402394:	2b00      	cmp	r3, #0
  402396:	d150      	bne.n	40243a <__udivmoddi4+0xb2>
  402398:	428a      	cmp	r2, r1
  40239a:	4617      	mov	r7, r2
  40239c:	d96c      	bls.n	402478 <__udivmoddi4+0xf0>
  40239e:	fab2 fe82 	clz	lr, r2
  4023a2:	f1be 0f00 	cmp.w	lr, #0
  4023a6:	d00b      	beq.n	4023c0 <__udivmoddi4+0x38>
  4023a8:	f1ce 0420 	rsb	r4, lr, #32
  4023ac:	fa20 f404 	lsr.w	r4, r0, r4
  4023b0:	fa01 f60e 	lsl.w	r6, r1, lr
  4023b4:	ea44 0c06 	orr.w	ip, r4, r6
  4023b8:	fa02 f70e 	lsl.w	r7, r2, lr
  4023bc:	fa00 f40e 	lsl.w	r4, r0, lr
  4023c0:	ea4f 4917 	mov.w	r9, r7, lsr #16
  4023c4:	0c22      	lsrs	r2, r4, #16
  4023c6:	fbbc f0f9 	udiv	r0, ip, r9
  4023ca:	fa1f f887 	uxth.w	r8, r7
  4023ce:	fb09 c610 	mls	r6, r9, r0, ip
  4023d2:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  4023d6:	fb00 f308 	mul.w	r3, r0, r8
  4023da:	42b3      	cmp	r3, r6
  4023dc:	d909      	bls.n	4023f2 <__udivmoddi4+0x6a>
  4023de:	19f6      	adds	r6, r6, r7
  4023e0:	f100 32ff 	add.w	r2, r0, #4294967295
  4023e4:	f080 8122 	bcs.w	40262c <__udivmoddi4+0x2a4>
  4023e8:	42b3      	cmp	r3, r6
  4023ea:	f240 811f 	bls.w	40262c <__udivmoddi4+0x2a4>
  4023ee:	3802      	subs	r0, #2
  4023f0:	443e      	add	r6, r7
  4023f2:	1af6      	subs	r6, r6, r3
  4023f4:	b2a2      	uxth	r2, r4
  4023f6:	fbb6 f3f9 	udiv	r3, r6, r9
  4023fa:	fb09 6613 	mls	r6, r9, r3, r6
  4023fe:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  402402:	fb03 f808 	mul.w	r8, r3, r8
  402406:	45a0      	cmp	r8, r4
  402408:	d909      	bls.n	40241e <__udivmoddi4+0x96>
  40240a:	19e4      	adds	r4, r4, r7
  40240c:	f103 32ff 	add.w	r2, r3, #4294967295
  402410:	f080 810a 	bcs.w	402628 <__udivmoddi4+0x2a0>
  402414:	45a0      	cmp	r8, r4
  402416:	f240 8107 	bls.w	402628 <__udivmoddi4+0x2a0>
  40241a:	3b02      	subs	r3, #2
  40241c:	443c      	add	r4, r7
  40241e:	ebc8 0404 	rsb	r4, r8, r4
  402422:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  402426:	2100      	movs	r1, #0
  402428:	2d00      	cmp	r5, #0
  40242a:	d062      	beq.n	4024f2 <__udivmoddi4+0x16a>
  40242c:	fa24 f40e 	lsr.w	r4, r4, lr
  402430:	2300      	movs	r3, #0
  402432:	602c      	str	r4, [r5, #0]
  402434:	606b      	str	r3, [r5, #4]
  402436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40243a:	428b      	cmp	r3, r1
  40243c:	d907      	bls.n	40244e <__udivmoddi4+0xc6>
  40243e:	2d00      	cmp	r5, #0
  402440:	d055      	beq.n	4024ee <__udivmoddi4+0x166>
  402442:	2100      	movs	r1, #0
  402444:	e885 0041 	stmia.w	r5, {r0, r6}
  402448:	4608      	mov	r0, r1
  40244a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40244e:	fab3 f183 	clz	r1, r3
  402452:	2900      	cmp	r1, #0
  402454:	f040 8090 	bne.w	402578 <__udivmoddi4+0x1f0>
  402458:	42b3      	cmp	r3, r6
  40245a:	d302      	bcc.n	402462 <__udivmoddi4+0xda>
  40245c:	4282      	cmp	r2, r0
  40245e:	f200 80f8 	bhi.w	402652 <__udivmoddi4+0x2ca>
  402462:	1a84      	subs	r4, r0, r2
  402464:	eb66 0603 	sbc.w	r6, r6, r3
  402468:	2001      	movs	r0, #1
  40246a:	46b4      	mov	ip, r6
  40246c:	2d00      	cmp	r5, #0
  40246e:	d040      	beq.n	4024f2 <__udivmoddi4+0x16a>
  402470:	e885 1010 	stmia.w	r5, {r4, ip}
  402474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402478:	b912      	cbnz	r2, 402480 <__udivmoddi4+0xf8>
  40247a:	2701      	movs	r7, #1
  40247c:	fbb7 f7f2 	udiv	r7, r7, r2
  402480:	fab7 fe87 	clz	lr, r7
  402484:	f1be 0f00 	cmp.w	lr, #0
  402488:	d135      	bne.n	4024f6 <__udivmoddi4+0x16e>
  40248a:	1bf3      	subs	r3, r6, r7
  40248c:	ea4f 4817 	mov.w	r8, r7, lsr #16
  402490:	fa1f fc87 	uxth.w	ip, r7
  402494:	2101      	movs	r1, #1
  402496:	fbb3 f0f8 	udiv	r0, r3, r8
  40249a:	0c22      	lsrs	r2, r4, #16
  40249c:	fb08 3610 	mls	r6, r8, r0, r3
  4024a0:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  4024a4:	fb0c f300 	mul.w	r3, ip, r0
  4024a8:	42b3      	cmp	r3, r6
  4024aa:	d907      	bls.n	4024bc <__udivmoddi4+0x134>
  4024ac:	19f6      	adds	r6, r6, r7
  4024ae:	f100 32ff 	add.w	r2, r0, #4294967295
  4024b2:	d202      	bcs.n	4024ba <__udivmoddi4+0x132>
  4024b4:	42b3      	cmp	r3, r6
  4024b6:	f200 80ce 	bhi.w	402656 <__udivmoddi4+0x2ce>
  4024ba:	4610      	mov	r0, r2
  4024bc:	1af6      	subs	r6, r6, r3
  4024be:	b2a2      	uxth	r2, r4
  4024c0:	fbb6 f3f8 	udiv	r3, r6, r8
  4024c4:	fb08 6613 	mls	r6, r8, r3, r6
  4024c8:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  4024cc:	fb0c fc03 	mul.w	ip, ip, r3
  4024d0:	45a4      	cmp	ip, r4
  4024d2:	d907      	bls.n	4024e4 <__udivmoddi4+0x15c>
  4024d4:	19e4      	adds	r4, r4, r7
  4024d6:	f103 32ff 	add.w	r2, r3, #4294967295
  4024da:	d202      	bcs.n	4024e2 <__udivmoddi4+0x15a>
  4024dc:	45a4      	cmp	ip, r4
  4024de:	f200 80b5 	bhi.w	40264c <__udivmoddi4+0x2c4>
  4024e2:	4613      	mov	r3, r2
  4024e4:	ebcc 0404 	rsb	r4, ip, r4
  4024e8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  4024ec:	e79c      	b.n	402428 <__udivmoddi4+0xa0>
  4024ee:	4629      	mov	r1, r5
  4024f0:	4628      	mov	r0, r5
  4024f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4024f6:	f1ce 0120 	rsb	r1, lr, #32
  4024fa:	fa06 f30e 	lsl.w	r3, r6, lr
  4024fe:	fa07 f70e 	lsl.w	r7, r7, lr
  402502:	fa20 f901 	lsr.w	r9, r0, r1
  402506:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40250a:	40ce      	lsrs	r6, r1
  40250c:	ea49 0903 	orr.w	r9, r9, r3
  402510:	fbb6 faf8 	udiv	sl, r6, r8
  402514:	ea4f 4419 	mov.w	r4, r9, lsr #16
  402518:	fb08 661a 	mls	r6, r8, sl, r6
  40251c:	fa1f fc87 	uxth.w	ip, r7
  402520:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  402524:	fb0a f20c 	mul.w	r2, sl, ip
  402528:	429a      	cmp	r2, r3
  40252a:	fa00 f40e 	lsl.w	r4, r0, lr
  40252e:	d90a      	bls.n	402546 <__udivmoddi4+0x1be>
  402530:	19db      	adds	r3, r3, r7
  402532:	f10a 31ff 	add.w	r1, sl, #4294967295
  402536:	f080 8087 	bcs.w	402648 <__udivmoddi4+0x2c0>
  40253a:	429a      	cmp	r2, r3
  40253c:	f240 8084 	bls.w	402648 <__udivmoddi4+0x2c0>
  402540:	f1aa 0a02 	sub.w	sl, sl, #2
  402544:	443b      	add	r3, r7
  402546:	1a9b      	subs	r3, r3, r2
  402548:	fa1f f989 	uxth.w	r9, r9
  40254c:	fbb3 f1f8 	udiv	r1, r3, r8
  402550:	fb08 3311 	mls	r3, r8, r1, r3
  402554:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  402558:	fb01 f60c 	mul.w	r6, r1, ip
  40255c:	429e      	cmp	r6, r3
  40255e:	d907      	bls.n	402570 <__udivmoddi4+0x1e8>
  402560:	19db      	adds	r3, r3, r7
  402562:	f101 32ff 	add.w	r2, r1, #4294967295
  402566:	d26b      	bcs.n	402640 <__udivmoddi4+0x2b8>
  402568:	429e      	cmp	r6, r3
  40256a:	d969      	bls.n	402640 <__udivmoddi4+0x2b8>
  40256c:	3902      	subs	r1, #2
  40256e:	443b      	add	r3, r7
  402570:	1b9b      	subs	r3, r3, r6
  402572:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  402576:	e78e      	b.n	402496 <__udivmoddi4+0x10e>
  402578:	f1c1 0e20 	rsb	lr, r1, #32
  40257c:	fa22 f40e 	lsr.w	r4, r2, lr
  402580:	408b      	lsls	r3, r1
  402582:	4323      	orrs	r3, r4
  402584:	fa20 f70e 	lsr.w	r7, r0, lr
  402588:	fa06 f401 	lsl.w	r4, r6, r1
  40258c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  402590:	fa26 f60e 	lsr.w	r6, r6, lr
  402594:	433c      	orrs	r4, r7
  402596:	fbb6 f9fc 	udiv	r9, r6, ip
  40259a:	0c27      	lsrs	r7, r4, #16
  40259c:	fb0c 6619 	mls	r6, ip, r9, r6
  4025a0:	fa1f f883 	uxth.w	r8, r3
  4025a4:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  4025a8:	fb09 f708 	mul.w	r7, r9, r8
  4025ac:	42b7      	cmp	r7, r6
  4025ae:	fa02 f201 	lsl.w	r2, r2, r1
  4025b2:	fa00 fa01 	lsl.w	sl, r0, r1
  4025b6:	d908      	bls.n	4025ca <__udivmoddi4+0x242>
  4025b8:	18f6      	adds	r6, r6, r3
  4025ba:	f109 30ff 	add.w	r0, r9, #4294967295
  4025be:	d241      	bcs.n	402644 <__udivmoddi4+0x2bc>
  4025c0:	42b7      	cmp	r7, r6
  4025c2:	d93f      	bls.n	402644 <__udivmoddi4+0x2bc>
  4025c4:	f1a9 0902 	sub.w	r9, r9, #2
  4025c8:	441e      	add	r6, r3
  4025ca:	1bf6      	subs	r6, r6, r7
  4025cc:	b2a0      	uxth	r0, r4
  4025ce:	fbb6 f4fc 	udiv	r4, r6, ip
  4025d2:	fb0c 6614 	mls	r6, ip, r4, r6
  4025d6:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  4025da:	fb04 f808 	mul.w	r8, r4, r8
  4025de:	45b8      	cmp	r8, r7
  4025e0:	d907      	bls.n	4025f2 <__udivmoddi4+0x26a>
  4025e2:	18ff      	adds	r7, r7, r3
  4025e4:	f104 30ff 	add.w	r0, r4, #4294967295
  4025e8:	d228      	bcs.n	40263c <__udivmoddi4+0x2b4>
  4025ea:	45b8      	cmp	r8, r7
  4025ec:	d926      	bls.n	40263c <__udivmoddi4+0x2b4>
  4025ee:	3c02      	subs	r4, #2
  4025f0:	441f      	add	r7, r3
  4025f2:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  4025f6:	ebc8 0707 	rsb	r7, r8, r7
  4025fa:	fba0 8902 	umull	r8, r9, r0, r2
  4025fe:	454f      	cmp	r7, r9
  402600:	4644      	mov	r4, r8
  402602:	464e      	mov	r6, r9
  402604:	d314      	bcc.n	402630 <__udivmoddi4+0x2a8>
  402606:	d029      	beq.n	40265c <__udivmoddi4+0x2d4>
  402608:	b365      	cbz	r5, 402664 <__udivmoddi4+0x2dc>
  40260a:	ebba 0304 	subs.w	r3, sl, r4
  40260e:	eb67 0706 	sbc.w	r7, r7, r6
  402612:	fa07 fe0e 	lsl.w	lr, r7, lr
  402616:	40cb      	lsrs	r3, r1
  402618:	40cf      	lsrs	r7, r1
  40261a:	ea4e 0303 	orr.w	r3, lr, r3
  40261e:	e885 0088 	stmia.w	r5, {r3, r7}
  402622:	2100      	movs	r1, #0
  402624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402628:	4613      	mov	r3, r2
  40262a:	e6f8      	b.n	40241e <__udivmoddi4+0x96>
  40262c:	4610      	mov	r0, r2
  40262e:	e6e0      	b.n	4023f2 <__udivmoddi4+0x6a>
  402630:	ebb8 0402 	subs.w	r4, r8, r2
  402634:	eb69 0603 	sbc.w	r6, r9, r3
  402638:	3801      	subs	r0, #1
  40263a:	e7e5      	b.n	402608 <__udivmoddi4+0x280>
  40263c:	4604      	mov	r4, r0
  40263e:	e7d8      	b.n	4025f2 <__udivmoddi4+0x26a>
  402640:	4611      	mov	r1, r2
  402642:	e795      	b.n	402570 <__udivmoddi4+0x1e8>
  402644:	4681      	mov	r9, r0
  402646:	e7c0      	b.n	4025ca <__udivmoddi4+0x242>
  402648:	468a      	mov	sl, r1
  40264a:	e77c      	b.n	402546 <__udivmoddi4+0x1be>
  40264c:	3b02      	subs	r3, #2
  40264e:	443c      	add	r4, r7
  402650:	e748      	b.n	4024e4 <__udivmoddi4+0x15c>
  402652:	4608      	mov	r0, r1
  402654:	e70a      	b.n	40246c <__udivmoddi4+0xe4>
  402656:	3802      	subs	r0, #2
  402658:	443e      	add	r6, r7
  40265a:	e72f      	b.n	4024bc <__udivmoddi4+0x134>
  40265c:	45c2      	cmp	sl, r8
  40265e:	d3e7      	bcc.n	402630 <__udivmoddi4+0x2a8>
  402660:	463e      	mov	r6, r7
  402662:	e7d1      	b.n	402608 <__udivmoddi4+0x280>
  402664:	4629      	mov	r1, r5
  402666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40266a:	bf00      	nop

0040266c <__aeabi_idiv0>:
  40266c:	4770      	bx	lr
  40266e:	bf00      	nop

00402670 <__libc_init_array>:
  402670:	b570      	push	{r4, r5, r6, lr}
  402672:	4e0f      	ldr	r6, [pc, #60]	; (4026b0 <__libc_init_array+0x40>)
  402674:	4d0f      	ldr	r5, [pc, #60]	; (4026b4 <__libc_init_array+0x44>)
  402676:	1b76      	subs	r6, r6, r5
  402678:	10b6      	asrs	r6, r6, #2
  40267a:	bf18      	it	ne
  40267c:	2400      	movne	r4, #0
  40267e:	d005      	beq.n	40268c <__libc_init_array+0x1c>
  402680:	3401      	adds	r4, #1
  402682:	f855 3b04 	ldr.w	r3, [r5], #4
  402686:	4798      	blx	r3
  402688:	42a6      	cmp	r6, r4
  40268a:	d1f9      	bne.n	402680 <__libc_init_array+0x10>
  40268c:	4e0a      	ldr	r6, [pc, #40]	; (4026b8 <__libc_init_array+0x48>)
  40268e:	4d0b      	ldr	r5, [pc, #44]	; (4026bc <__libc_init_array+0x4c>)
  402690:	1b76      	subs	r6, r6, r5
  402692:	f004 f943 	bl	40691c <_init>
  402696:	10b6      	asrs	r6, r6, #2
  402698:	bf18      	it	ne
  40269a:	2400      	movne	r4, #0
  40269c:	d006      	beq.n	4026ac <__libc_init_array+0x3c>
  40269e:	3401      	adds	r4, #1
  4026a0:	f855 3b04 	ldr.w	r3, [r5], #4
  4026a4:	4798      	blx	r3
  4026a6:	42a6      	cmp	r6, r4
  4026a8:	d1f9      	bne.n	40269e <__libc_init_array+0x2e>
  4026aa:	bd70      	pop	{r4, r5, r6, pc}
  4026ac:	bd70      	pop	{r4, r5, r6, pc}
  4026ae:	bf00      	nop
  4026b0:	00406928 	.word	0x00406928
  4026b4:	00406928 	.word	0x00406928
  4026b8:	00406930 	.word	0x00406930
  4026bc:	00406928 	.word	0x00406928

004026c0 <memset>:
  4026c0:	b470      	push	{r4, r5, r6}
  4026c2:	0784      	lsls	r4, r0, #30
  4026c4:	d046      	beq.n	402754 <memset+0x94>
  4026c6:	1e54      	subs	r4, r2, #1
  4026c8:	2a00      	cmp	r2, #0
  4026ca:	d041      	beq.n	402750 <memset+0x90>
  4026cc:	b2cd      	uxtb	r5, r1
  4026ce:	4603      	mov	r3, r0
  4026d0:	e002      	b.n	4026d8 <memset+0x18>
  4026d2:	1e62      	subs	r2, r4, #1
  4026d4:	b3e4      	cbz	r4, 402750 <memset+0x90>
  4026d6:	4614      	mov	r4, r2
  4026d8:	f803 5b01 	strb.w	r5, [r3], #1
  4026dc:	079a      	lsls	r2, r3, #30
  4026de:	d1f8      	bne.n	4026d2 <memset+0x12>
  4026e0:	2c03      	cmp	r4, #3
  4026e2:	d92e      	bls.n	402742 <memset+0x82>
  4026e4:	b2cd      	uxtb	r5, r1
  4026e6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4026ea:	2c0f      	cmp	r4, #15
  4026ec:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4026f0:	d919      	bls.n	402726 <memset+0x66>
  4026f2:	f103 0210 	add.w	r2, r3, #16
  4026f6:	4626      	mov	r6, r4
  4026f8:	3e10      	subs	r6, #16
  4026fa:	2e0f      	cmp	r6, #15
  4026fc:	f842 5c10 	str.w	r5, [r2, #-16]
  402700:	f842 5c0c 	str.w	r5, [r2, #-12]
  402704:	f842 5c08 	str.w	r5, [r2, #-8]
  402708:	f842 5c04 	str.w	r5, [r2, #-4]
  40270c:	f102 0210 	add.w	r2, r2, #16
  402710:	d8f2      	bhi.n	4026f8 <memset+0x38>
  402712:	f1a4 0210 	sub.w	r2, r4, #16
  402716:	f022 020f 	bic.w	r2, r2, #15
  40271a:	f004 040f 	and.w	r4, r4, #15
  40271e:	3210      	adds	r2, #16
  402720:	2c03      	cmp	r4, #3
  402722:	4413      	add	r3, r2
  402724:	d90d      	bls.n	402742 <memset+0x82>
  402726:	461e      	mov	r6, r3
  402728:	4622      	mov	r2, r4
  40272a:	3a04      	subs	r2, #4
  40272c:	2a03      	cmp	r2, #3
  40272e:	f846 5b04 	str.w	r5, [r6], #4
  402732:	d8fa      	bhi.n	40272a <memset+0x6a>
  402734:	1f22      	subs	r2, r4, #4
  402736:	f022 0203 	bic.w	r2, r2, #3
  40273a:	3204      	adds	r2, #4
  40273c:	4413      	add	r3, r2
  40273e:	f004 0403 	and.w	r4, r4, #3
  402742:	b12c      	cbz	r4, 402750 <memset+0x90>
  402744:	b2c9      	uxtb	r1, r1
  402746:	441c      	add	r4, r3
  402748:	f803 1b01 	strb.w	r1, [r3], #1
  40274c:	42a3      	cmp	r3, r4
  40274e:	d1fb      	bne.n	402748 <memset+0x88>
  402750:	bc70      	pop	{r4, r5, r6}
  402752:	4770      	bx	lr
  402754:	4614      	mov	r4, r2
  402756:	4603      	mov	r3, r0
  402758:	e7c2      	b.n	4026e0 <memset+0x20>
  40275a:	bf00      	nop

0040275c <sprintf>:
  40275c:	b40e      	push	{r1, r2, r3}
  40275e:	b5f0      	push	{r4, r5, r6, r7, lr}
  402760:	b09c      	sub	sp, #112	; 0x70
  402762:	ab21      	add	r3, sp, #132	; 0x84
  402764:	490f      	ldr	r1, [pc, #60]	; (4027a4 <sprintf+0x48>)
  402766:	f853 2b04 	ldr.w	r2, [r3], #4
  40276a:	9301      	str	r3, [sp, #4]
  40276c:	4605      	mov	r5, r0
  40276e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  402772:	6808      	ldr	r0, [r1, #0]
  402774:	9502      	str	r5, [sp, #8]
  402776:	f44f 7702 	mov.w	r7, #520	; 0x208
  40277a:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40277e:	a902      	add	r1, sp, #8
  402780:	9506      	str	r5, [sp, #24]
  402782:	f8ad 7014 	strh.w	r7, [sp, #20]
  402786:	9404      	str	r4, [sp, #16]
  402788:	9407      	str	r4, [sp, #28]
  40278a:	f8ad 6016 	strh.w	r6, [sp, #22]
  40278e:	f000 f885 	bl	40289c <_svfprintf_r>
  402792:	9b02      	ldr	r3, [sp, #8]
  402794:	2200      	movs	r2, #0
  402796:	701a      	strb	r2, [r3, #0]
  402798:	b01c      	add	sp, #112	; 0x70
  40279a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40279e:	b003      	add	sp, #12
  4027a0:	4770      	bx	lr
  4027a2:	bf00      	nop
  4027a4:	20000840 	.word	0x20000840
	...

004027c0 <strlen>:
  4027c0:	f890 f000 	pld	[r0]
  4027c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4027c8:	f020 0107 	bic.w	r1, r0, #7
  4027cc:	f06f 0c00 	mvn.w	ip, #0
  4027d0:	f010 0407 	ands.w	r4, r0, #7
  4027d4:	f891 f020 	pld	[r1, #32]
  4027d8:	f040 8049 	bne.w	40286e <strlen+0xae>
  4027dc:	f04f 0400 	mov.w	r4, #0
  4027e0:	f06f 0007 	mvn.w	r0, #7
  4027e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4027e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4027ec:	f100 0008 	add.w	r0, r0, #8
  4027f0:	fa82 f24c 	uadd8	r2, r2, ip
  4027f4:	faa4 f28c 	sel	r2, r4, ip
  4027f8:	fa83 f34c 	uadd8	r3, r3, ip
  4027fc:	faa2 f38c 	sel	r3, r2, ip
  402800:	bb4b      	cbnz	r3, 402856 <strlen+0x96>
  402802:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  402806:	fa82 f24c 	uadd8	r2, r2, ip
  40280a:	f100 0008 	add.w	r0, r0, #8
  40280e:	faa4 f28c 	sel	r2, r4, ip
  402812:	fa83 f34c 	uadd8	r3, r3, ip
  402816:	faa2 f38c 	sel	r3, r2, ip
  40281a:	b9e3      	cbnz	r3, 402856 <strlen+0x96>
  40281c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  402820:	fa82 f24c 	uadd8	r2, r2, ip
  402824:	f100 0008 	add.w	r0, r0, #8
  402828:	faa4 f28c 	sel	r2, r4, ip
  40282c:	fa83 f34c 	uadd8	r3, r3, ip
  402830:	faa2 f38c 	sel	r3, r2, ip
  402834:	b97b      	cbnz	r3, 402856 <strlen+0x96>
  402836:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40283a:	f101 0120 	add.w	r1, r1, #32
  40283e:	fa82 f24c 	uadd8	r2, r2, ip
  402842:	f100 0008 	add.w	r0, r0, #8
  402846:	faa4 f28c 	sel	r2, r4, ip
  40284a:	fa83 f34c 	uadd8	r3, r3, ip
  40284e:	faa2 f38c 	sel	r3, r2, ip
  402852:	2b00      	cmp	r3, #0
  402854:	d0c6      	beq.n	4027e4 <strlen+0x24>
  402856:	2a00      	cmp	r2, #0
  402858:	bf04      	itt	eq
  40285a:	3004      	addeq	r0, #4
  40285c:	461a      	moveq	r2, r3
  40285e:	ba12      	rev	r2, r2
  402860:	fab2 f282 	clz	r2, r2
  402864:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  402868:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40286c:	4770      	bx	lr
  40286e:	e9d1 2300 	ldrd	r2, r3, [r1]
  402872:	f004 0503 	and.w	r5, r4, #3
  402876:	f1c4 0000 	rsb	r0, r4, #0
  40287a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40287e:	f014 0f04 	tst.w	r4, #4
  402882:	f891 f040 	pld	[r1, #64]	; 0x40
  402886:	fa0c f505 	lsl.w	r5, ip, r5
  40288a:	ea62 0205 	orn	r2, r2, r5
  40288e:	bf1c      	itt	ne
  402890:	ea63 0305 	ornne	r3, r3, r5
  402894:	4662      	movne	r2, ip
  402896:	f04f 0400 	mov.w	r4, #0
  40289a:	e7a9      	b.n	4027f0 <strlen+0x30>

0040289c <_svfprintf_r>:
  40289c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4028a0:	b0c1      	sub	sp, #260	; 0x104
  4028a2:	460c      	mov	r4, r1
  4028a4:	9109      	str	r1, [sp, #36]	; 0x24
  4028a6:	4615      	mov	r5, r2
  4028a8:	930e      	str	r3, [sp, #56]	; 0x38
  4028aa:	900a      	str	r0, [sp, #40]	; 0x28
  4028ac:	f002 fc5e 	bl	40516c <_localeconv_r>
  4028b0:	6803      	ldr	r3, [r0, #0]
  4028b2:	9317      	str	r3, [sp, #92]	; 0x5c
  4028b4:	4618      	mov	r0, r3
  4028b6:	f7ff ff83 	bl	4027c0 <strlen>
  4028ba:	89a3      	ldrh	r3, [r4, #12]
  4028bc:	9016      	str	r0, [sp, #88]	; 0x58
  4028be:	061e      	lsls	r6, r3, #24
  4028c0:	d503      	bpl.n	4028ca <_svfprintf_r+0x2e>
  4028c2:	6923      	ldr	r3, [r4, #16]
  4028c4:	2b00      	cmp	r3, #0
  4028c6:	f001 8119 	beq.w	403afc <_svfprintf_r+0x1260>
  4028ca:	2300      	movs	r3, #0
  4028cc:	461a      	mov	r2, r3
  4028ce:	9312      	str	r3, [sp, #72]	; 0x48
  4028d0:	9325      	str	r3, [sp, #148]	; 0x94
  4028d2:	9324      	str	r3, [sp, #144]	; 0x90
  4028d4:	9319      	str	r3, [sp, #100]	; 0x64
  4028d6:	930b      	str	r3, [sp, #44]	; 0x2c
  4028d8:	f8df a464 	ldr.w	sl, [pc, #1124]	; 402d40 <_svfprintf_r+0x4a4>
  4028dc:	9214      	str	r2, [sp, #80]	; 0x50
  4028de:	ab30      	add	r3, sp, #192	; 0xc0
  4028e0:	9323      	str	r3, [sp, #140]	; 0x8c
  4028e2:	4699      	mov	r9, r3
  4028e4:	9215      	str	r2, [sp, #84]	; 0x54
  4028e6:	46a8      	mov	r8, r5
  4028e8:	f898 3000 	ldrb.w	r3, [r8]
  4028ec:	4644      	mov	r4, r8
  4028ee:	b1eb      	cbz	r3, 40292c <_svfprintf_r+0x90>
  4028f0:	2b25      	cmp	r3, #37	; 0x25
  4028f2:	d102      	bne.n	4028fa <_svfprintf_r+0x5e>
  4028f4:	e01a      	b.n	40292c <_svfprintf_r+0x90>
  4028f6:	2b25      	cmp	r3, #37	; 0x25
  4028f8:	d003      	beq.n	402902 <_svfprintf_r+0x66>
  4028fa:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4028fe:	2b00      	cmp	r3, #0
  402900:	d1f9      	bne.n	4028f6 <_svfprintf_r+0x5a>
  402902:	ebc8 0504 	rsb	r5, r8, r4
  402906:	b18d      	cbz	r5, 40292c <_svfprintf_r+0x90>
  402908:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40290a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40290c:	f8c9 8000 	str.w	r8, [r9]
  402910:	3301      	adds	r3, #1
  402912:	442a      	add	r2, r5
  402914:	2b07      	cmp	r3, #7
  402916:	f8c9 5004 	str.w	r5, [r9, #4]
  40291a:	9225      	str	r2, [sp, #148]	; 0x94
  40291c:	9324      	str	r3, [sp, #144]	; 0x90
  40291e:	f300 80a6 	bgt.w	402a6e <_svfprintf_r+0x1d2>
  402922:	f109 0908 	add.w	r9, r9, #8
  402926:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  402928:	442b      	add	r3, r5
  40292a:	930b      	str	r3, [sp, #44]	; 0x2c
  40292c:	7823      	ldrb	r3, [r4, #0]
  40292e:	2b00      	cmp	r3, #0
  402930:	f000 80a6 	beq.w	402a80 <_svfprintf_r+0x1e4>
  402934:	2300      	movs	r3, #0
  402936:	461a      	mov	r2, r3
  402938:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40293c:	4619      	mov	r1, r3
  40293e:	930c      	str	r3, [sp, #48]	; 0x30
  402940:	9307      	str	r3, [sp, #28]
  402942:	f04f 3bff 	mov.w	fp, #4294967295
  402946:	7863      	ldrb	r3, [r4, #1]
  402948:	f104 0801 	add.w	r8, r4, #1
  40294c:	465d      	mov	r5, fp
  40294e:	f108 0801 	add.w	r8, r8, #1
  402952:	f1a3 0020 	sub.w	r0, r3, #32
  402956:	2858      	cmp	r0, #88	; 0x58
  402958:	f200 8425 	bhi.w	4031a6 <_svfprintf_r+0x90a>
  40295c:	e8df f010 	tbh	[pc, r0, lsl #1]
  402960:	04230388 	.word	0x04230388
  402964:	03900423 	.word	0x03900423
  402968:	04230423 	.word	0x04230423
  40296c:	04230423 	.word	0x04230423
  402970:	04230423 	.word	0x04230423
  402974:	03a50397 	.word	0x03a50397
  402978:	005d0423 	.word	0x005d0423
  40297c:	042300e2 	.word	0x042300e2
  402980:	010500fe 	.word	0x010500fe
  402984:	01050105 	.word	0x01050105
  402988:	01050105 	.word	0x01050105
  40298c:	01050105 	.word	0x01050105
  402990:	01050105 	.word	0x01050105
  402994:	04230423 	.word	0x04230423
  402998:	04230423 	.word	0x04230423
  40299c:	04230423 	.word	0x04230423
  4029a0:	04230423 	.word	0x04230423
  4029a4:	04230423 	.word	0x04230423
  4029a8:	02810115 	.word	0x02810115
  4029ac:	02810423 	.word	0x02810423
  4029b0:	04230423 	.word	0x04230423
  4029b4:	04230423 	.word	0x04230423
  4029b8:	042302c6 	.word	0x042302c6
  4029bc:	02cd0423 	.word	0x02cd0423
  4029c0:	04230423 	.word	0x04230423
  4029c4:	04230423 	.word	0x04230423
  4029c8:	02f70423 	.word	0x02f70423
  4029cc:	04230423 	.word	0x04230423
  4029d0:	04230325 	.word	0x04230325
  4029d4:	04230423 	.word	0x04230423
  4029d8:	04230423 	.word	0x04230423
  4029dc:	04230423 	.word	0x04230423
  4029e0:	04230423 	.word	0x04230423
  4029e4:	03660423 	.word	0x03660423
  4029e8:	02810379 	.word	0x02810379
  4029ec:	02810281 	.word	0x02810281
  4029f0:	03790381 	.word	0x03790381
  4029f4:	04230423 	.word	0x04230423
  4029f8:	042303d1 	.word	0x042303d1
  4029fc:	00a303db 	.word	0x00a303db
  402a00:	03ee0064 	.word	0x03ee0064
  402a04:	03f50423 	.word	0x03f50423
  402a08:	03aa0423 	.word	0x03aa0423
  402a0c:	04230423 	.word	0x04230423
  402a10:	03bc      	.short	0x03bc
  402a12:	980c      	ldr	r0, [sp, #48]	; 0x30
  402a14:	930e      	str	r3, [sp, #56]	; 0x38
  402a16:	4240      	negs	r0, r0
  402a18:	900c      	str	r0, [sp, #48]	; 0x30
  402a1a:	9b07      	ldr	r3, [sp, #28]
  402a1c:	f043 0304 	orr.w	r3, r3, #4
  402a20:	9307      	str	r3, [sp, #28]
  402a22:	f898 3000 	ldrb.w	r3, [r8]
  402a26:	e792      	b.n	40294e <_svfprintf_r+0xb2>
  402a28:	980e      	ldr	r0, [sp, #56]	; 0x38
  402a2a:	46ab      	mov	fp, r5
  402a2c:	2100      	movs	r1, #0
  402a2e:	6804      	ldr	r4, [r0, #0]
  402a30:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  402a34:	1d07      	adds	r7, r0, #4
  402a36:	9807      	ldr	r0, [sp, #28]
  402a38:	2330      	movs	r3, #48	; 0x30
  402a3a:	2278      	movs	r2, #120	; 0x78
  402a3c:	458b      	cmp	fp, r1
  402a3e:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  402a42:	f04f 0500 	mov.w	r5, #0
  402a46:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  402a4a:	f040 0302 	orr.w	r3, r0, #2
  402a4e:	f2c0 83c7 	blt.w	4031e0 <_svfprintf_r+0x944>
  402a52:	f020 0380 	bic.w	r3, r0, #128	; 0x80
  402a56:	f043 0302 	orr.w	r3, r3, #2
  402a5a:	9307      	str	r3, [sp, #28]
  402a5c:	ea54 0305 	orrs.w	r3, r4, r5
  402a60:	970e      	str	r7, [sp, #56]	; 0x38
  402a62:	f000 8393 	beq.w	40318c <_svfprintf_r+0x8f0>
  402a66:	460f      	mov	r7, r1
  402a68:	9211      	str	r2, [sp, #68]	; 0x44
  402a6a:	48b3      	ldr	r0, [pc, #716]	; (402d38 <_svfprintf_r+0x49c>)
  402a6c:	e2ce      	b.n	40300c <_svfprintf_r+0x770>
  402a6e:	aa23      	add	r2, sp, #140	; 0x8c
  402a70:	9909      	ldr	r1, [sp, #36]	; 0x24
  402a72:	980a      	ldr	r0, [sp, #40]	; 0x28
  402a74:	f003 fc9e 	bl	4063b4 <__ssprint_r>
  402a78:	b948      	cbnz	r0, 402a8e <_svfprintf_r+0x1f2>
  402a7a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  402a7e:	e752      	b.n	402926 <_svfprintf_r+0x8a>
  402a80:	9b25      	ldr	r3, [sp, #148]	; 0x94
  402a82:	b123      	cbz	r3, 402a8e <_svfprintf_r+0x1f2>
  402a84:	980a      	ldr	r0, [sp, #40]	; 0x28
  402a86:	9909      	ldr	r1, [sp, #36]	; 0x24
  402a88:	aa23      	add	r2, sp, #140	; 0x8c
  402a8a:	f003 fc93 	bl	4063b4 <__ssprint_r>
  402a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402a90:	899b      	ldrh	r3, [r3, #12]
  402a92:	f013 0f40 	tst.w	r3, #64	; 0x40
  402a96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  402a98:	bf18      	it	ne
  402a9a:	f04f 33ff 	movne.w	r3, #4294967295
  402a9e:	4618      	mov	r0, r3
  402aa0:	b041      	add	sp, #260	; 0x104
  402aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402aa6:	9311      	str	r3, [sp, #68]	; 0x44
  402aa8:	46ab      	mov	fp, r5
  402aaa:	2a00      	cmp	r2, #0
  402aac:	f041 8223 	bne.w	403ef6 <_svfprintf_r+0x165a>
  402ab0:	9a07      	ldr	r2, [sp, #28]
  402ab2:	f012 0320 	ands.w	r3, r2, #32
  402ab6:	f000 822e 	beq.w	402f16 <_svfprintf_r+0x67a>
  402aba:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  402abc:	3707      	adds	r7, #7
  402abe:	f027 0307 	bic.w	r3, r7, #7
  402ac2:	2700      	movs	r7, #0
  402ac4:	f103 0108 	add.w	r1, r3, #8
  402ac8:	45bb      	cmp	fp, r7
  402aca:	910e      	str	r1, [sp, #56]	; 0x38
  402acc:	e9d3 4500 	ldrd	r4, r5, [r3]
  402ad0:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  402ad4:	f2c0 8752 	blt.w	40397c <_svfprintf_r+0x10e0>
  402ad8:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  402adc:	9307      	str	r3, [sp, #28]
  402ade:	ea54 0305 	orrs.w	r3, r4, r5
  402ae2:	f000 8375 	beq.w	4031d0 <_svfprintf_r+0x934>
  402ae6:	ae30      	add	r6, sp, #192	; 0xc0
  402ae8:	08e2      	lsrs	r2, r4, #3
  402aea:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  402aee:	08e9      	lsrs	r1, r5, #3
  402af0:	f004 0307 	and.w	r3, r4, #7
  402af4:	460d      	mov	r5, r1
  402af6:	4614      	mov	r4, r2
  402af8:	3330      	adds	r3, #48	; 0x30
  402afa:	ea54 0205 	orrs.w	r2, r4, r5
  402afe:	f806 3d01 	strb.w	r3, [r6, #-1]!
  402b02:	d1f1      	bne.n	402ae8 <_svfprintf_r+0x24c>
  402b04:	9a07      	ldr	r2, [sp, #28]
  402b06:	07d1      	lsls	r1, r2, #31
  402b08:	f140 8084 	bpl.w	402c14 <_svfprintf_r+0x378>
  402b0c:	2b30      	cmp	r3, #48	; 0x30
  402b0e:	f000 8081 	beq.w	402c14 <_svfprintf_r+0x378>
  402b12:	2230      	movs	r2, #48	; 0x30
  402b14:	1e73      	subs	r3, r6, #1
  402b16:	f806 2c01 	strb.w	r2, [r6, #-1]
  402b1a:	aa30      	add	r2, sp, #192	; 0xc0
  402b1c:	1ad2      	subs	r2, r2, r3
  402b1e:	920d      	str	r2, [sp, #52]	; 0x34
  402b20:	461e      	mov	r6, r3
  402b22:	e07a      	b.n	402c1a <_svfprintf_r+0x37e>
  402b24:	f898 3000 	ldrb.w	r3, [r8]
  402b28:	2b2a      	cmp	r3, #42	; 0x2a
  402b2a:	f108 0401 	add.w	r4, r8, #1
  402b2e:	f001 81b1 	beq.w	403e94 <_svfprintf_r+0x15f8>
  402b32:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  402b36:	2809      	cmp	r0, #9
  402b38:	bf98      	it	ls
  402b3a:	2500      	movls	r5, #0
  402b3c:	f201 8164 	bhi.w	403e08 <_svfprintf_r+0x156c>
  402b40:	f814 3b01 	ldrb.w	r3, [r4], #1
  402b44:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  402b48:	eb00 0545 	add.w	r5, r0, r5, lsl #1
  402b4c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  402b50:	2809      	cmp	r0, #9
  402b52:	d9f5      	bls.n	402b40 <_svfprintf_r+0x2a4>
  402b54:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
  402b58:	46a0      	mov	r8, r4
  402b5a:	e6fa      	b.n	402952 <_svfprintf_r+0xb6>
  402b5c:	9b07      	ldr	r3, [sp, #28]
  402b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402b62:	9307      	str	r3, [sp, #28]
  402b64:	f898 3000 	ldrb.w	r3, [r8]
  402b68:	e6f1      	b.n	40294e <_svfprintf_r+0xb2>
  402b6a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  402b6e:	2300      	movs	r3, #0
  402b70:	461c      	mov	r4, r3
  402b72:	f818 3b01 	ldrb.w	r3, [r8], #1
  402b76:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402b7a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  402b7e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  402b82:	2809      	cmp	r0, #9
  402b84:	d9f5      	bls.n	402b72 <_svfprintf_r+0x2d6>
  402b86:	940c      	str	r4, [sp, #48]	; 0x30
  402b88:	e6e3      	b.n	402952 <_svfprintf_r+0xb6>
  402b8a:	9311      	str	r3, [sp, #68]	; 0x44
  402b8c:	46ab      	mov	fp, r5
  402b8e:	2a00      	cmp	r2, #0
  402b90:	f041 81c9 	bne.w	403f26 <_svfprintf_r+0x168a>
  402b94:	9b07      	ldr	r3, [sp, #28]
  402b96:	f043 0310 	orr.w	r3, r3, #16
  402b9a:	9307      	str	r3, [sp, #28]
  402b9c:	9b07      	ldr	r3, [sp, #28]
  402b9e:	0698      	lsls	r0, r3, #26
  402ba0:	f140 8530 	bpl.w	403604 <_svfprintf_r+0xd68>
  402ba4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  402ba6:	3707      	adds	r7, #7
  402ba8:	f027 0707 	bic.w	r7, r7, #7
  402bac:	e9d7 2300 	ldrd	r2, r3, [r7]
  402bb0:	f107 0108 	add.w	r1, r7, #8
  402bb4:	910e      	str	r1, [sp, #56]	; 0x38
  402bb6:	4614      	mov	r4, r2
  402bb8:	461d      	mov	r5, r3
  402bba:	2a00      	cmp	r2, #0
  402bbc:	f173 0300 	sbcs.w	r3, r3, #0
  402bc0:	f2c0 855b 	blt.w	40367a <_svfprintf_r+0xdde>
  402bc4:	f1bb 0f00 	cmp.w	fp, #0
  402bc8:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  402bcc:	f2c0 8538 	blt.w	403640 <_svfprintf_r+0xda4>
  402bd0:	9b07      	ldr	r3, [sp, #28]
  402bd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402bd6:	9307      	str	r3, [sp, #28]
  402bd8:	ea54 0305 	orrs.w	r3, r4, r5
  402bdc:	f000 81db 	beq.w	402f96 <_svfprintf_r+0x6fa>
  402be0:	2d00      	cmp	r5, #0
  402be2:	bf08      	it	eq
  402be4:	2c0a      	cmpeq	r4, #10
  402be6:	f0c0 81db 	bcc.w	402fa0 <_svfprintf_r+0x704>
  402bea:	ae30      	add	r6, sp, #192	; 0xc0
  402bec:	4620      	mov	r0, r4
  402bee:	4629      	mov	r1, r5
  402bf0:	220a      	movs	r2, #10
  402bf2:	2300      	movs	r3, #0
  402bf4:	f7ff fbb0 	bl	402358 <__aeabi_uldivmod>
  402bf8:	3230      	adds	r2, #48	; 0x30
  402bfa:	f806 2d01 	strb.w	r2, [r6, #-1]!
  402bfe:	4620      	mov	r0, r4
  402c00:	4629      	mov	r1, r5
  402c02:	2300      	movs	r3, #0
  402c04:	220a      	movs	r2, #10
  402c06:	f7ff fba7 	bl	402358 <__aeabi_uldivmod>
  402c0a:	4604      	mov	r4, r0
  402c0c:	460d      	mov	r5, r1
  402c0e:	ea54 0305 	orrs.w	r3, r4, r5
  402c12:	d1eb      	bne.n	402bec <_svfprintf_r+0x350>
  402c14:	ab30      	add	r3, sp, #192	; 0xc0
  402c16:	1b9b      	subs	r3, r3, r6
  402c18:	930d      	str	r3, [sp, #52]	; 0x34
  402c1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402c1c:	455b      	cmp	r3, fp
  402c1e:	bfb8      	it	lt
  402c20:	465b      	movlt	r3, fp
  402c22:	9308      	str	r3, [sp, #32]
  402c24:	2300      	movs	r3, #0
  402c26:	9313      	str	r3, [sp, #76]	; 0x4c
  402c28:	b117      	cbz	r7, 402c30 <_svfprintf_r+0x394>
  402c2a:	9b08      	ldr	r3, [sp, #32]
  402c2c:	3301      	adds	r3, #1
  402c2e:	9308      	str	r3, [sp, #32]
  402c30:	9b07      	ldr	r3, [sp, #28]
  402c32:	f013 0302 	ands.w	r3, r3, #2
  402c36:	930f      	str	r3, [sp, #60]	; 0x3c
  402c38:	d002      	beq.n	402c40 <_svfprintf_r+0x3a4>
  402c3a:	9b08      	ldr	r3, [sp, #32]
  402c3c:	3302      	adds	r3, #2
  402c3e:	9308      	str	r3, [sp, #32]
  402c40:	9b07      	ldr	r3, [sp, #28]
  402c42:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  402c46:	9310      	str	r3, [sp, #64]	; 0x40
  402c48:	f040 82d7 	bne.w	4031fa <_svfprintf_r+0x95e>
  402c4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  402c4e:	9a08      	ldr	r2, [sp, #32]
  402c50:	1a9d      	subs	r5, r3, r2
  402c52:	2d00      	cmp	r5, #0
  402c54:	f340 82d1 	ble.w	4031fa <_svfprintf_r+0x95e>
  402c58:	2d10      	cmp	r5, #16
  402c5a:	9925      	ldr	r1, [sp, #148]	; 0x94
  402c5c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  402c5e:	4f37      	ldr	r7, [pc, #220]	; (402d3c <_svfprintf_r+0x4a0>)
  402c60:	dd27      	ble.n	402cb2 <_svfprintf_r+0x416>
  402c62:	9618      	str	r6, [sp, #96]	; 0x60
  402c64:	4648      	mov	r0, r9
  402c66:	2410      	movs	r4, #16
  402c68:	46b9      	mov	r9, r7
  402c6a:	9e09      	ldr	r6, [sp, #36]	; 0x24
  402c6c:	462f      	mov	r7, r5
  402c6e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  402c70:	e004      	b.n	402c7c <_svfprintf_r+0x3e0>
  402c72:	3f10      	subs	r7, #16
  402c74:	2f10      	cmp	r7, #16
  402c76:	f100 0008 	add.w	r0, r0, #8
  402c7a:	dd16      	ble.n	402caa <_svfprintf_r+0x40e>
  402c7c:	3201      	adds	r2, #1
  402c7e:	4b2f      	ldr	r3, [pc, #188]	; (402d3c <_svfprintf_r+0x4a0>)
  402c80:	9224      	str	r2, [sp, #144]	; 0x90
  402c82:	3110      	adds	r1, #16
  402c84:	2a07      	cmp	r2, #7
  402c86:	9125      	str	r1, [sp, #148]	; 0x94
  402c88:	e880 0018 	stmia.w	r0, {r3, r4}
  402c8c:	ddf1      	ble.n	402c72 <_svfprintf_r+0x3d6>
  402c8e:	aa23      	add	r2, sp, #140	; 0x8c
  402c90:	4631      	mov	r1, r6
  402c92:	4628      	mov	r0, r5
  402c94:	f003 fb8e 	bl	4063b4 <__ssprint_r>
  402c98:	2800      	cmp	r0, #0
  402c9a:	f47f aef8 	bne.w	402a8e <_svfprintf_r+0x1f2>
  402c9e:	3f10      	subs	r7, #16
  402ca0:	2f10      	cmp	r7, #16
  402ca2:	9925      	ldr	r1, [sp, #148]	; 0x94
  402ca4:	9a24      	ldr	r2, [sp, #144]	; 0x90
  402ca6:	a830      	add	r0, sp, #192	; 0xc0
  402ca8:	dce8      	bgt.n	402c7c <_svfprintf_r+0x3e0>
  402caa:	9e18      	ldr	r6, [sp, #96]	; 0x60
  402cac:	463d      	mov	r5, r7
  402cae:	464f      	mov	r7, r9
  402cb0:	4681      	mov	r9, r0
  402cb2:	3201      	adds	r2, #1
  402cb4:	186c      	adds	r4, r5, r1
  402cb6:	2a07      	cmp	r2, #7
  402cb8:	9425      	str	r4, [sp, #148]	; 0x94
  402cba:	9224      	str	r2, [sp, #144]	; 0x90
  402cbc:	f8c9 7000 	str.w	r7, [r9]
  402cc0:	f8c9 5004 	str.w	r5, [r9, #4]
  402cc4:	f300 8428 	bgt.w	403518 <_svfprintf_r+0xc7c>
  402cc8:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  402ccc:	f109 0908 	add.w	r9, r9, #8
  402cd0:	b177      	cbz	r7, 402cf0 <_svfprintf_r+0x454>
  402cd2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402cd4:	3301      	adds	r3, #1
  402cd6:	3401      	adds	r4, #1
  402cd8:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  402cdc:	2201      	movs	r2, #1
  402cde:	2b07      	cmp	r3, #7
  402ce0:	9425      	str	r4, [sp, #148]	; 0x94
  402ce2:	9324      	str	r3, [sp, #144]	; 0x90
  402ce4:	e889 0006 	stmia.w	r9, {r1, r2}
  402ce8:	f300 83a0 	bgt.w	40342c <_svfprintf_r+0xb90>
  402cec:	f109 0908 	add.w	r9, r9, #8
  402cf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  402cf2:	b16b      	cbz	r3, 402d10 <_svfprintf_r+0x474>
  402cf4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402cf6:	3301      	adds	r3, #1
  402cf8:	3402      	adds	r4, #2
  402cfa:	a91c      	add	r1, sp, #112	; 0x70
  402cfc:	2202      	movs	r2, #2
  402cfe:	2b07      	cmp	r3, #7
  402d00:	9425      	str	r4, [sp, #148]	; 0x94
  402d02:	9324      	str	r3, [sp, #144]	; 0x90
  402d04:	e889 0006 	stmia.w	r9, {r1, r2}
  402d08:	f300 839c 	bgt.w	403444 <_svfprintf_r+0xba8>
  402d0c:	f109 0908 	add.w	r9, r9, #8
  402d10:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402d12:	2b80      	cmp	r3, #128	; 0x80
  402d14:	f000 82d5 	beq.w	4032c2 <_svfprintf_r+0xa26>
  402d18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402d1a:	ebc3 070b 	rsb	r7, r3, fp
  402d1e:	2f00      	cmp	r7, #0
  402d20:	dd39      	ble.n	402d96 <_svfprintf_r+0x4fa>
  402d22:	4a07      	ldr	r2, [pc, #28]	; (402d40 <_svfprintf_r+0x4a4>)
  402d24:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402d26:	920f      	str	r2, [sp, #60]	; 0x3c
  402d28:	2f10      	cmp	r7, #16
  402d2a:	dd28      	ble.n	402d7e <_svfprintf_r+0x4e2>
  402d2c:	4622      	mov	r2, r4
  402d2e:	f04f 0b10 	mov.w	fp, #16
  402d32:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  402d34:	9c09      	ldr	r4, [sp, #36]	; 0x24
  402d36:	e00a      	b.n	402d4e <_svfprintf_r+0x4b2>
  402d38:	004067d0 	.word	0x004067d0
  402d3c:	004067f0 	.word	0x004067f0
  402d40:	0040679c 	.word	0x0040679c
  402d44:	3f10      	subs	r7, #16
  402d46:	2f10      	cmp	r7, #16
  402d48:	f109 0908 	add.w	r9, r9, #8
  402d4c:	dd16      	ble.n	402d7c <_svfprintf_r+0x4e0>
  402d4e:	3301      	adds	r3, #1
  402d50:	3210      	adds	r2, #16
  402d52:	2b07      	cmp	r3, #7
  402d54:	9225      	str	r2, [sp, #148]	; 0x94
  402d56:	9324      	str	r3, [sp, #144]	; 0x90
  402d58:	e889 0c00 	stmia.w	r9, {sl, fp}
  402d5c:	ddf2      	ble.n	402d44 <_svfprintf_r+0x4a8>
  402d5e:	aa23      	add	r2, sp, #140	; 0x8c
  402d60:	4621      	mov	r1, r4
  402d62:	4628      	mov	r0, r5
  402d64:	f003 fb26 	bl	4063b4 <__ssprint_r>
  402d68:	2800      	cmp	r0, #0
  402d6a:	f47f ae90 	bne.w	402a8e <_svfprintf_r+0x1f2>
  402d6e:	3f10      	subs	r7, #16
  402d70:	2f10      	cmp	r7, #16
  402d72:	9a25      	ldr	r2, [sp, #148]	; 0x94
  402d74:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402d76:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  402d7a:	dce8      	bgt.n	402d4e <_svfprintf_r+0x4b2>
  402d7c:	4614      	mov	r4, r2
  402d7e:	3301      	adds	r3, #1
  402d80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402d82:	9324      	str	r3, [sp, #144]	; 0x90
  402d84:	443c      	add	r4, r7
  402d86:	2b07      	cmp	r3, #7
  402d88:	9425      	str	r4, [sp, #148]	; 0x94
  402d8a:	e889 0084 	stmia.w	r9, {r2, r7}
  402d8e:	f300 8341 	bgt.w	403414 <_svfprintf_r+0xb78>
  402d92:	f109 0908 	add.w	r9, r9, #8
  402d96:	9b07      	ldr	r3, [sp, #28]
  402d98:	05da      	lsls	r2, r3, #23
  402d9a:	f100 8230 	bmi.w	4031fe <_svfprintf_r+0x962>
  402d9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402da0:	990d      	ldr	r1, [sp, #52]	; 0x34
  402da2:	f8c9 6000 	str.w	r6, [r9]
  402da6:	3301      	adds	r3, #1
  402da8:	440c      	add	r4, r1
  402daa:	2b07      	cmp	r3, #7
  402dac:	9425      	str	r4, [sp, #148]	; 0x94
  402dae:	f8c9 1004 	str.w	r1, [r9, #4]
  402db2:	9324      	str	r3, [sp, #144]	; 0x90
  402db4:	f300 8318 	bgt.w	4033e8 <_svfprintf_r+0xb4c>
  402db8:	f109 0908 	add.w	r9, r9, #8
  402dbc:	9b07      	ldr	r3, [sp, #28]
  402dbe:	0759      	lsls	r1, r3, #29
  402dc0:	d53f      	bpl.n	402e42 <_svfprintf_r+0x5a6>
  402dc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  402dc4:	9a08      	ldr	r2, [sp, #32]
  402dc6:	1a9d      	subs	r5, r3, r2
  402dc8:	2d00      	cmp	r5, #0
  402dca:	dd3a      	ble.n	402e42 <_svfprintf_r+0x5a6>
  402dcc:	2d10      	cmp	r5, #16
  402dce:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402dd0:	4fbc      	ldr	r7, [pc, #752]	; (4030c4 <_svfprintf_r+0x828>)
  402dd2:	dd23      	ble.n	402e1c <_svfprintf_r+0x580>
  402dd4:	4622      	mov	r2, r4
  402dd6:	2610      	movs	r6, #16
  402dd8:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  402ddc:	9c09      	ldr	r4, [sp, #36]	; 0x24
  402dde:	e004      	b.n	402dea <_svfprintf_r+0x54e>
  402de0:	3d10      	subs	r5, #16
  402de2:	2d10      	cmp	r5, #16
  402de4:	f109 0908 	add.w	r9, r9, #8
  402de8:	dd17      	ble.n	402e1a <_svfprintf_r+0x57e>
  402dea:	3301      	adds	r3, #1
  402dec:	49b5      	ldr	r1, [pc, #724]	; (4030c4 <_svfprintf_r+0x828>)
  402dee:	9324      	str	r3, [sp, #144]	; 0x90
  402df0:	3210      	adds	r2, #16
  402df2:	2b07      	cmp	r3, #7
  402df4:	9225      	str	r2, [sp, #148]	; 0x94
  402df6:	e889 0042 	stmia.w	r9, {r1, r6}
  402dfa:	ddf1      	ble.n	402de0 <_svfprintf_r+0x544>
  402dfc:	aa23      	add	r2, sp, #140	; 0x8c
  402dfe:	4621      	mov	r1, r4
  402e00:	4658      	mov	r0, fp
  402e02:	f003 fad7 	bl	4063b4 <__ssprint_r>
  402e06:	2800      	cmp	r0, #0
  402e08:	f47f ae41 	bne.w	402a8e <_svfprintf_r+0x1f2>
  402e0c:	3d10      	subs	r5, #16
  402e0e:	2d10      	cmp	r5, #16
  402e10:	9a25      	ldr	r2, [sp, #148]	; 0x94
  402e12:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402e14:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  402e18:	dce7      	bgt.n	402dea <_svfprintf_r+0x54e>
  402e1a:	4614      	mov	r4, r2
  402e1c:	3301      	adds	r3, #1
  402e1e:	442c      	add	r4, r5
  402e20:	2b07      	cmp	r3, #7
  402e22:	9425      	str	r4, [sp, #148]	; 0x94
  402e24:	9324      	str	r3, [sp, #144]	; 0x90
  402e26:	f8c9 7000 	str.w	r7, [r9]
  402e2a:	f8c9 5004 	str.w	r5, [r9, #4]
  402e2e:	dd08      	ble.n	402e42 <_svfprintf_r+0x5a6>
  402e30:	aa23      	add	r2, sp, #140	; 0x8c
  402e32:	9909      	ldr	r1, [sp, #36]	; 0x24
  402e34:	980a      	ldr	r0, [sp, #40]	; 0x28
  402e36:	f003 fabd 	bl	4063b4 <__ssprint_r>
  402e3a:	2800      	cmp	r0, #0
  402e3c:	f47f ae27 	bne.w	402a8e <_svfprintf_r+0x1f2>
  402e40:	9c25      	ldr	r4, [sp, #148]	; 0x94
  402e42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  402e44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  402e46:	9908      	ldr	r1, [sp, #32]
  402e48:	428a      	cmp	r2, r1
  402e4a:	bfac      	ite	ge
  402e4c:	189b      	addge	r3, r3, r2
  402e4e:	185b      	addlt	r3, r3, r1
  402e50:	930b      	str	r3, [sp, #44]	; 0x2c
  402e52:	2c00      	cmp	r4, #0
  402e54:	f040 82d4 	bne.w	403400 <_svfprintf_r+0xb64>
  402e58:	2300      	movs	r3, #0
  402e5a:	9324      	str	r3, [sp, #144]	; 0x90
  402e5c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  402e60:	e542      	b.n	4028e8 <_svfprintf_r+0x4c>
  402e62:	9311      	str	r3, [sp, #68]	; 0x44
  402e64:	46ab      	mov	fp, r5
  402e66:	2a00      	cmp	r2, #0
  402e68:	f041 8059 	bne.w	403f1e <_svfprintf_r+0x1682>
  402e6c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  402e6e:	3707      	adds	r7, #7
  402e70:	f027 0307 	bic.w	r3, r7, #7
  402e74:	f103 0208 	add.w	r2, r3, #8
  402e78:	920e      	str	r2, [sp, #56]	; 0x38
  402e7a:	681a      	ldr	r2, [r3, #0]
  402e7c:	9214      	str	r2, [sp, #80]	; 0x50
  402e7e:	685b      	ldr	r3, [r3, #4]
  402e80:	9315      	str	r3, [sp, #84]	; 0x54
  402e82:	9b15      	ldr	r3, [sp, #84]	; 0x54
  402e84:	9d14      	ldr	r5, [sp, #80]	; 0x50
  402e86:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  402e8a:	4628      	mov	r0, r5
  402e8c:	4621      	mov	r1, r4
  402e8e:	f04f 32ff 	mov.w	r2, #4294967295
  402e92:	4b8d      	ldr	r3, [pc, #564]	; (4030c8 <_svfprintf_r+0x82c>)
  402e94:	f003 fc18 	bl	4066c8 <__aeabi_dcmpun>
  402e98:	2800      	cmp	r0, #0
  402e9a:	f040 84c1 	bne.w	403820 <_svfprintf_r+0xf84>
  402e9e:	4628      	mov	r0, r5
  402ea0:	4621      	mov	r1, r4
  402ea2:	f04f 32ff 	mov.w	r2, #4294967295
  402ea6:	4b88      	ldr	r3, [pc, #544]	; (4030c8 <_svfprintf_r+0x82c>)
  402ea8:	f003 fbf0 	bl	40668c <__aeabi_dcmple>
  402eac:	2800      	cmp	r0, #0
  402eae:	f040 84b7 	bne.w	403820 <_svfprintf_r+0xf84>
  402eb2:	9814      	ldr	r0, [sp, #80]	; 0x50
  402eb4:	9915      	ldr	r1, [sp, #84]	; 0x54
  402eb6:	2200      	movs	r2, #0
  402eb8:	2300      	movs	r3, #0
  402eba:	f003 fbdd 	bl	406678 <__aeabi_dcmplt>
  402ebe:	2800      	cmp	r0, #0
  402ec0:	f040 874b 	bne.w	403d5a <_svfprintf_r+0x14be>
  402ec4:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  402ec8:	4e80      	ldr	r6, [pc, #512]	; (4030cc <_svfprintf_r+0x830>)
  402eca:	4b81      	ldr	r3, [pc, #516]	; (4030d0 <_svfprintf_r+0x834>)
  402ecc:	9907      	ldr	r1, [sp, #28]
  402ece:	f021 0180 	bic.w	r1, r1, #128	; 0x80
  402ed2:	9107      	str	r1, [sp, #28]
  402ed4:	9911      	ldr	r1, [sp, #68]	; 0x44
  402ed6:	2203      	movs	r2, #3
  402ed8:	f04f 0b00 	mov.w	fp, #0
  402edc:	9208      	str	r2, [sp, #32]
  402ede:	2947      	cmp	r1, #71	; 0x47
  402ee0:	bfd8      	it	le
  402ee2:	461e      	movle	r6, r3
  402ee4:	920d      	str	r2, [sp, #52]	; 0x34
  402ee6:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  402eea:	e69d      	b.n	402c28 <_svfprintf_r+0x38c>
  402eec:	9b07      	ldr	r3, [sp, #28]
  402eee:	f043 0308 	orr.w	r3, r3, #8
  402ef2:	9307      	str	r3, [sp, #28]
  402ef4:	f898 3000 	ldrb.w	r3, [r8]
  402ef8:	e529      	b.n	40294e <_svfprintf_r+0xb2>
  402efa:	9311      	str	r3, [sp, #68]	; 0x44
  402efc:	46ab      	mov	fp, r5
  402efe:	2a00      	cmp	r2, #0
  402f00:	f041 8009 	bne.w	403f16 <_svfprintf_r+0x167a>
  402f04:	9b07      	ldr	r3, [sp, #28]
  402f06:	f043 0310 	orr.w	r3, r3, #16
  402f0a:	9307      	str	r3, [sp, #28]
  402f0c:	9a07      	ldr	r2, [sp, #28]
  402f0e:	f012 0320 	ands.w	r3, r2, #32
  402f12:	f47f add2 	bne.w	402aba <_svfprintf_r+0x21e>
  402f16:	9907      	ldr	r1, [sp, #28]
  402f18:	f011 0210 	ands.w	r2, r1, #16
  402f1c:	f000 8507 	beq.w	40392e <_svfprintf_r+0x1092>
  402f20:	980e      	ldr	r0, [sp, #56]	; 0x38
  402f22:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  402f26:	f1bb 0f00 	cmp.w	fp, #0
  402f2a:	6804      	ldr	r4, [r0, #0]
  402f2c:	f100 0704 	add.w	r7, r0, #4
  402f30:	f04f 0500 	mov.w	r5, #0
  402f34:	f2c0 8521 	blt.w	40397a <_svfprintf_r+0x10de>
  402f38:	460a      	mov	r2, r1
  402f3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  402f3e:	9207      	str	r2, [sp, #28]
  402f40:	ea54 0205 	orrs.w	r2, r4, r5
  402f44:	970e      	str	r7, [sp, #56]	; 0x38
  402f46:	f000 8143 	beq.w	4031d0 <_svfprintf_r+0x934>
  402f4a:	461f      	mov	r7, r3
  402f4c:	e5cb      	b.n	402ae6 <_svfprintf_r+0x24a>
  402f4e:	9311      	str	r3, [sp, #68]	; 0x44
  402f50:	46ab      	mov	fp, r5
  402f52:	2a00      	cmp	r2, #0
  402f54:	f040 87d7 	bne.w	403f06 <_svfprintf_r+0x166a>
  402f58:	9b07      	ldr	r3, [sp, #28]
  402f5a:	f043 0310 	orr.w	r3, r3, #16
  402f5e:	9307      	str	r3, [sp, #28]
  402f60:	9a07      	ldr	r2, [sp, #28]
  402f62:	f012 0320 	ands.w	r3, r2, #32
  402f66:	f000 8332 	beq.w	4035ce <_svfprintf_r+0xd32>
  402f6a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  402f6c:	3707      	adds	r7, #7
  402f6e:	f027 0307 	bic.w	r3, r7, #7
  402f72:	2700      	movs	r7, #0
  402f74:	f103 0108 	add.w	r1, r3, #8
  402f78:	45bb      	cmp	fp, r7
  402f7a:	910e      	str	r1, [sp, #56]	; 0x38
  402f7c:	e9d3 4500 	ldrd	r4, r5, [r3]
  402f80:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  402f84:	f2c0 835c 	blt.w	403640 <_svfprintf_r+0xda4>
  402f88:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  402f8c:	9307      	str	r3, [sp, #28]
  402f8e:	ea54 0305 	orrs.w	r3, r4, r5
  402f92:	f47f ae25 	bne.w	402be0 <_svfprintf_r+0x344>
  402f96:	f1bb 0f00 	cmp.w	fp, #0
  402f9a:	f000 80fe 	beq.w	40319a <_svfprintf_r+0x8fe>
  402f9e:	2400      	movs	r4, #0
  402fa0:	ae40      	add	r6, sp, #256	; 0x100
  402fa2:	3430      	adds	r4, #48	; 0x30
  402fa4:	f806 4d41 	strb.w	r4, [r6, #-65]!
  402fa8:	e634      	b.n	402c14 <_svfprintf_r+0x378>
  402faa:	9311      	str	r3, [sp, #68]	; 0x44
  402fac:	46ab      	mov	fp, r5
  402fae:	2a00      	cmp	r2, #0
  402fb0:	f040 87a5 	bne.w	403efe <_svfprintf_r+0x1662>
  402fb4:	9b07      	ldr	r3, [sp, #28]
  402fb6:	4847      	ldr	r0, [pc, #284]	; (4030d4 <_svfprintf_r+0x838>)
  402fb8:	069d      	lsls	r5, r3, #26
  402fba:	f140 8097 	bpl.w	4030ec <_svfprintf_r+0x850>
  402fbe:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  402fc0:	3707      	adds	r7, #7
  402fc2:	f027 0307 	bic.w	r3, r7, #7
  402fc6:	e9d3 4500 	ldrd	r4, r5, [r3]
  402fca:	f103 0208 	add.w	r2, r3, #8
  402fce:	920e      	str	r2, [sp, #56]	; 0x38
  402fd0:	9a07      	ldr	r2, [sp, #28]
  402fd2:	f012 0701 	ands.w	r7, r2, #1
  402fd6:	f000 8241 	beq.w	40345c <_svfprintf_r+0xbc0>
  402fda:	ea54 0305 	orrs.w	r3, r4, r5
  402fde:	f000 84f5 	beq.w	4039cc <_svfprintf_r+0x1130>
  402fe2:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  402fe6:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  402fea:	2700      	movs	r7, #0
  402fec:	9a07      	ldr	r2, [sp, #28]
  402fee:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  402ff2:	2330      	movs	r3, #48	; 0x30
  402ff4:	45bb      	cmp	fp, r7
  402ff6:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  402ffa:	f042 0302 	orr.w	r3, r2, #2
  402ffe:	f2c0 86a9 	blt.w	403d54 <_svfprintf_r+0x14b8>
  403002:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  403006:	f043 0302 	orr.w	r3, r3, #2
  40300a:	9307      	str	r3, [sp, #28]
  40300c:	ae30      	add	r6, sp, #192	; 0xc0
  40300e:	0923      	lsrs	r3, r4, #4
  403010:	f004 010f 	and.w	r1, r4, #15
  403014:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  403018:	092a      	lsrs	r2, r5, #4
  40301a:	461c      	mov	r4, r3
  40301c:	4615      	mov	r5, r2
  40301e:	5c43      	ldrb	r3, [r0, r1]
  403020:	f806 3d01 	strb.w	r3, [r6, #-1]!
  403024:	ea54 0305 	orrs.w	r3, r4, r5
  403028:	d1f1      	bne.n	40300e <_svfprintf_r+0x772>
  40302a:	e5f3      	b.n	402c14 <_svfprintf_r+0x378>
  40302c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40302e:	9311      	str	r3, [sp, #68]	; 0x44
  403030:	680a      	ldr	r2, [r1, #0]
  403032:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  403036:	2300      	movs	r3, #0
  403038:	460a      	mov	r2, r1
  40303a:	461f      	mov	r7, r3
  40303c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  403040:	3204      	adds	r2, #4
  403042:	2301      	movs	r3, #1
  403044:	9308      	str	r3, [sp, #32]
  403046:	46bb      	mov	fp, r7
  403048:	9713      	str	r7, [sp, #76]	; 0x4c
  40304a:	920e      	str	r2, [sp, #56]	; 0x38
  40304c:	930d      	str	r3, [sp, #52]	; 0x34
  40304e:	ae26      	add	r6, sp, #152	; 0x98
  403050:	e5ee      	b.n	402c30 <_svfprintf_r+0x394>
  403052:	9311      	str	r3, [sp, #68]	; 0x44
  403054:	46ab      	mov	fp, r5
  403056:	2a00      	cmp	r2, #0
  403058:	f43f ada0 	beq.w	402b9c <_svfprintf_r+0x300>
  40305c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  403060:	e59c      	b.n	402b9c <_svfprintf_r+0x300>
  403062:	9b07      	ldr	r3, [sp, #28]
  403064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403068:	9307      	str	r3, [sp, #28]
  40306a:	f898 3000 	ldrb.w	r3, [r8]
  40306e:	e46e      	b.n	40294e <_svfprintf_r+0xb2>
  403070:	f898 3000 	ldrb.w	r3, [r8]
  403074:	2900      	cmp	r1, #0
  403076:	f47f ac6a 	bne.w	40294e <_svfprintf_r+0xb2>
  40307a:	2201      	movs	r2, #1
  40307c:	2120      	movs	r1, #32
  40307e:	e466      	b.n	40294e <_svfprintf_r+0xb2>
  403080:	9b07      	ldr	r3, [sp, #28]
  403082:	f043 0301 	orr.w	r3, r3, #1
  403086:	9307      	str	r3, [sp, #28]
  403088:	f898 3000 	ldrb.w	r3, [r8]
  40308c:	e45f      	b.n	40294e <_svfprintf_r+0xb2>
  40308e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  403090:	6823      	ldr	r3, [r4, #0]
  403092:	930c      	str	r3, [sp, #48]	; 0x30
  403094:	4618      	mov	r0, r3
  403096:	2800      	cmp	r0, #0
  403098:	4623      	mov	r3, r4
  40309a:	f103 0304 	add.w	r3, r3, #4
  40309e:	f6ff acb8 	blt.w	402a12 <_svfprintf_r+0x176>
  4030a2:	930e      	str	r3, [sp, #56]	; 0x38
  4030a4:	f898 3000 	ldrb.w	r3, [r8]
  4030a8:	e451      	b.n	40294e <_svfprintf_r+0xb2>
  4030aa:	f898 3000 	ldrb.w	r3, [r8]
  4030ae:	2201      	movs	r2, #1
  4030b0:	212b      	movs	r1, #43	; 0x2b
  4030b2:	e44c      	b.n	40294e <_svfprintf_r+0xb2>
  4030b4:	9311      	str	r3, [sp, #68]	; 0x44
  4030b6:	46ab      	mov	fp, r5
  4030b8:	2a00      	cmp	r2, #0
  4030ba:	f43f af51 	beq.w	402f60 <_svfprintf_r+0x6c4>
  4030be:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4030c2:	e74d      	b.n	402f60 <_svfprintf_r+0x6c4>
  4030c4:	004067f0 	.word	0x004067f0
  4030c8:	7fefffff 	.word	0x7fefffff
  4030cc:	004067b0 	.word	0x004067b0
  4030d0:	004067ac 	.word	0x004067ac
  4030d4:	004067bc 	.word	0x004067bc
  4030d8:	9311      	str	r3, [sp, #68]	; 0x44
  4030da:	46ab      	mov	fp, r5
  4030dc:	2a00      	cmp	r2, #0
  4030de:	f040 8703 	bne.w	403ee8 <_svfprintf_r+0x164c>
  4030e2:	9b07      	ldr	r3, [sp, #28]
  4030e4:	4899      	ldr	r0, [pc, #612]	; (40334c <_svfprintf_r+0xab0>)
  4030e6:	069d      	lsls	r5, r3, #26
  4030e8:	f53f af69 	bmi.w	402fbe <_svfprintf_r+0x722>
  4030ec:	9b07      	ldr	r3, [sp, #28]
  4030ee:	06dc      	lsls	r4, r3, #27
  4030f0:	f140 845e 	bpl.w	4039b0 <_svfprintf_r+0x1114>
  4030f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4030f6:	4613      	mov	r3, r2
  4030f8:	3304      	adds	r3, #4
  4030fa:	6814      	ldr	r4, [r2, #0]
  4030fc:	930e      	str	r3, [sp, #56]	; 0x38
  4030fe:	2500      	movs	r5, #0
  403100:	e766      	b.n	402fd0 <_svfprintf_r+0x734>
  403102:	f898 3000 	ldrb.w	r3, [r8]
  403106:	2b6c      	cmp	r3, #108	; 0x6c
  403108:	f000 84e1 	beq.w	403ace <_svfprintf_r+0x1232>
  40310c:	9807      	ldr	r0, [sp, #28]
  40310e:	f040 0010 	orr.w	r0, r0, #16
  403112:	9007      	str	r0, [sp, #28]
  403114:	e41b      	b.n	40294e <_svfprintf_r+0xb2>
  403116:	2a00      	cmp	r2, #0
  403118:	f040 86db 	bne.w	403ed2 <_svfprintf_r+0x1636>
  40311c:	9b07      	ldr	r3, [sp, #28]
  40311e:	069b      	lsls	r3, r3, #26
  403120:	f140 842f 	bpl.w	403982 <_svfprintf_r+0x10e6>
  403124:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403126:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403128:	6813      	ldr	r3, [r2, #0]
  40312a:	17cd      	asrs	r5, r1, #31
  40312c:	4608      	mov	r0, r1
  40312e:	3204      	adds	r2, #4
  403130:	4629      	mov	r1, r5
  403132:	920e      	str	r2, [sp, #56]	; 0x38
  403134:	e9c3 0100 	strd	r0, r1, [r3]
  403138:	f7ff bbd6 	b.w	4028e8 <_svfprintf_r+0x4c>
  40313c:	9b07      	ldr	r3, [sp, #28]
  40313e:	f043 0320 	orr.w	r3, r3, #32
  403142:	9307      	str	r3, [sp, #28]
  403144:	f898 3000 	ldrb.w	r3, [r8]
  403148:	e401      	b.n	40294e <_svfprintf_r+0xb2>
  40314a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40314c:	9311      	str	r3, [sp, #68]	; 0x44
  40314e:	6816      	ldr	r6, [r2, #0]
  403150:	2400      	movs	r4, #0
  403152:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  403156:	1d17      	adds	r7, r2, #4
  403158:	2e00      	cmp	r6, #0
  40315a:	f000 85bd 	beq.w	403cd8 <_svfprintf_r+0x143c>
  40315e:	2d00      	cmp	r5, #0
  403160:	f2c0 850f 	blt.w	403b82 <_svfprintf_r+0x12e6>
  403164:	462a      	mov	r2, r5
  403166:	4621      	mov	r1, r4
  403168:	4630      	mov	r0, r6
  40316a:	f002 fac1 	bl	4056f0 <memchr>
  40316e:	2800      	cmp	r0, #0
  403170:	f000 8604 	beq.w	403d7c <_svfprintf_r+0x14e0>
  403174:	1b83      	subs	r3, r0, r6
  403176:	930d      	str	r3, [sp, #52]	; 0x34
  403178:	46a3      	mov	fp, r4
  40317a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40317e:	970e      	str	r7, [sp, #56]	; 0x38
  403180:	9308      	str	r3, [sp, #32]
  403182:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  403186:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40318a:	e54d      	b.n	402c28 <_svfprintf_r+0x38c>
  40318c:	486f      	ldr	r0, [pc, #444]	; (40334c <_svfprintf_r+0xab0>)
  40318e:	9211      	str	r2, [sp, #68]	; 0x44
  403190:	f1bb 0f00 	cmp.w	fp, #0
  403194:	f040 8173 	bne.w	40347e <_svfprintf_r+0xbe2>
  403198:	465f      	mov	r7, fp
  40319a:	f04f 0b00 	mov.w	fp, #0
  40319e:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  4031a2:	ae30      	add	r6, sp, #192	; 0xc0
  4031a4:	e539      	b.n	402c1a <_svfprintf_r+0x37e>
  4031a6:	9311      	str	r3, [sp, #68]	; 0x44
  4031a8:	2a00      	cmp	r2, #0
  4031aa:	f040 86b0 	bne.w	403f0e <_svfprintf_r+0x1672>
  4031ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4031b0:	2a00      	cmp	r2, #0
  4031b2:	f43f ac65 	beq.w	402a80 <_svfprintf_r+0x1e4>
  4031b6:	2300      	movs	r3, #0
  4031b8:	2101      	movs	r1, #1
  4031ba:	461f      	mov	r7, r3
  4031bc:	9108      	str	r1, [sp, #32]
  4031be:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  4031c2:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4031c6:	469b      	mov	fp, r3
  4031c8:	9313      	str	r3, [sp, #76]	; 0x4c
  4031ca:	910d      	str	r1, [sp, #52]	; 0x34
  4031cc:	ae26      	add	r6, sp, #152	; 0x98
  4031ce:	e52f      	b.n	402c30 <_svfprintf_r+0x394>
  4031d0:	f1bb 0f00 	cmp.w	fp, #0
  4031d4:	f000 85dd 	beq.w	403d92 <_svfprintf_r+0x14f6>
  4031d8:	2700      	movs	r7, #0
  4031da:	2400      	movs	r4, #0
  4031dc:	2500      	movs	r5, #0
  4031de:	e482      	b.n	402ae6 <_svfprintf_r+0x24a>
  4031e0:	485a      	ldr	r0, [pc, #360]	; (40334c <_svfprintf_r+0xab0>)
  4031e2:	9307      	str	r3, [sp, #28]
  4031e4:	9211      	str	r2, [sp, #68]	; 0x44
  4031e6:	ea54 0305 	orrs.w	r3, r4, r5
  4031ea:	970e      	str	r7, [sp, #56]	; 0x38
  4031ec:	f04f 0700 	mov.w	r7, #0
  4031f0:	f47f af0c 	bne.w	40300c <_svfprintf_r+0x770>
  4031f4:	2400      	movs	r4, #0
  4031f6:	2500      	movs	r5, #0
  4031f8:	e708      	b.n	40300c <_svfprintf_r+0x770>
  4031fa:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4031fc:	e568      	b.n	402cd0 <_svfprintf_r+0x434>
  4031fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403200:	2b65      	cmp	r3, #101	; 0x65
  403202:	f340 80a9 	ble.w	403358 <_svfprintf_r+0xabc>
  403206:	9814      	ldr	r0, [sp, #80]	; 0x50
  403208:	9915      	ldr	r1, [sp, #84]	; 0x54
  40320a:	2200      	movs	r2, #0
  40320c:	2300      	movs	r3, #0
  40320e:	f003 fa29 	bl	406664 <__aeabi_dcmpeq>
  403212:	2800      	cmp	r0, #0
  403214:	f000 8135 	beq.w	403482 <_svfprintf_r+0xbe6>
  403218:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40321a:	4a4d      	ldr	r2, [pc, #308]	; (403350 <_svfprintf_r+0xab4>)
  40321c:	f8c9 2000 	str.w	r2, [r9]
  403220:	3301      	adds	r3, #1
  403222:	3401      	adds	r4, #1
  403224:	2201      	movs	r2, #1
  403226:	2b07      	cmp	r3, #7
  403228:	9425      	str	r4, [sp, #148]	; 0x94
  40322a:	9324      	str	r3, [sp, #144]	; 0x90
  40322c:	f8c9 2004 	str.w	r2, [r9, #4]
  403230:	f300 83e6 	bgt.w	403a00 <_svfprintf_r+0x1164>
  403234:	f109 0908 	add.w	r9, r9, #8
  403238:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40323a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40323c:	4293      	cmp	r3, r2
  40323e:	db03      	blt.n	403248 <_svfprintf_r+0x9ac>
  403240:	9b07      	ldr	r3, [sp, #28]
  403242:	07db      	lsls	r3, r3, #31
  403244:	f57f adba 	bpl.w	402dbc <_svfprintf_r+0x520>
  403248:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40324a:	9916      	ldr	r1, [sp, #88]	; 0x58
  40324c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  40324e:	f8c9 2000 	str.w	r2, [r9]
  403252:	3301      	adds	r3, #1
  403254:	440c      	add	r4, r1
  403256:	2b07      	cmp	r3, #7
  403258:	9425      	str	r4, [sp, #148]	; 0x94
  40325a:	f8c9 1004 	str.w	r1, [r9, #4]
  40325e:	9324      	str	r3, [sp, #144]	; 0x90
  403260:	f300 843f 	bgt.w	403ae2 <_svfprintf_r+0x1246>
  403264:	f109 0908 	add.w	r9, r9, #8
  403268:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40326a:	1e5d      	subs	r5, r3, #1
  40326c:	2d00      	cmp	r5, #0
  40326e:	f77f ada5 	ble.w	402dbc <_svfprintf_r+0x520>
  403272:	4a38      	ldr	r2, [pc, #224]	; (403354 <_svfprintf_r+0xab8>)
  403274:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403276:	920f      	str	r2, [sp, #60]	; 0x3c
  403278:	2d10      	cmp	r5, #16
  40327a:	f340 81e6 	ble.w	40364a <_svfprintf_r+0xdae>
  40327e:	2610      	movs	r6, #16
  403280:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  403282:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  403286:	e005      	b.n	403294 <_svfprintf_r+0x9f8>
  403288:	f109 0908 	add.w	r9, r9, #8
  40328c:	3d10      	subs	r5, #16
  40328e:	2d10      	cmp	r5, #16
  403290:	f340 81db 	ble.w	40364a <_svfprintf_r+0xdae>
  403294:	3301      	adds	r3, #1
  403296:	3410      	adds	r4, #16
  403298:	2b07      	cmp	r3, #7
  40329a:	9425      	str	r4, [sp, #148]	; 0x94
  40329c:	9324      	str	r3, [sp, #144]	; 0x90
  40329e:	f8c9 a000 	str.w	sl, [r9]
  4032a2:	f8c9 6004 	str.w	r6, [r9, #4]
  4032a6:	ddef      	ble.n	403288 <_svfprintf_r+0x9ec>
  4032a8:	aa23      	add	r2, sp, #140	; 0x8c
  4032aa:	4659      	mov	r1, fp
  4032ac:	4638      	mov	r0, r7
  4032ae:	f003 f881 	bl	4063b4 <__ssprint_r>
  4032b2:	2800      	cmp	r0, #0
  4032b4:	f47f abeb 	bne.w	402a8e <_svfprintf_r+0x1f2>
  4032b8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4032ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4032bc:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4032c0:	e7e4      	b.n	40328c <_svfprintf_r+0x9f0>
  4032c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4032c4:	9a08      	ldr	r2, [sp, #32]
  4032c6:	1a9f      	subs	r7, r3, r2
  4032c8:	2f00      	cmp	r7, #0
  4032ca:	f77f ad25 	ble.w	402d18 <_svfprintf_r+0x47c>
  4032ce:	4a21      	ldr	r2, [pc, #132]	; (403354 <_svfprintf_r+0xab8>)
  4032d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4032d2:	920f      	str	r2, [sp, #60]	; 0x3c
  4032d4:	2f10      	cmp	r7, #16
  4032d6:	dd2b      	ble.n	403330 <_svfprintf_r+0xa94>
  4032d8:	464a      	mov	r2, r9
  4032da:	4621      	mov	r1, r4
  4032dc:	46b9      	mov	r9, r7
  4032de:	2510      	movs	r5, #16
  4032e0:	4637      	mov	r7, r6
  4032e2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4032e4:	9e09      	ldr	r6, [sp, #36]	; 0x24
  4032e6:	e006      	b.n	4032f6 <_svfprintf_r+0xa5a>
  4032e8:	f1a9 0910 	sub.w	r9, r9, #16
  4032ec:	f1b9 0f10 	cmp.w	r9, #16
  4032f0:	f102 0208 	add.w	r2, r2, #8
  4032f4:	dd18      	ble.n	403328 <_svfprintf_r+0xa8c>
  4032f6:	3301      	adds	r3, #1
  4032f8:	3110      	adds	r1, #16
  4032fa:	2b07      	cmp	r3, #7
  4032fc:	9125      	str	r1, [sp, #148]	; 0x94
  4032fe:	9324      	str	r3, [sp, #144]	; 0x90
  403300:	f8c2 a000 	str.w	sl, [r2]
  403304:	6055      	str	r5, [r2, #4]
  403306:	ddef      	ble.n	4032e8 <_svfprintf_r+0xa4c>
  403308:	aa23      	add	r2, sp, #140	; 0x8c
  40330a:	4631      	mov	r1, r6
  40330c:	4620      	mov	r0, r4
  40330e:	f003 f851 	bl	4063b4 <__ssprint_r>
  403312:	2800      	cmp	r0, #0
  403314:	f47f abbb 	bne.w	402a8e <_svfprintf_r+0x1f2>
  403318:	f1a9 0910 	sub.w	r9, r9, #16
  40331c:	f1b9 0f10 	cmp.w	r9, #16
  403320:	9925      	ldr	r1, [sp, #148]	; 0x94
  403322:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403324:	aa30      	add	r2, sp, #192	; 0xc0
  403326:	dce6      	bgt.n	4032f6 <_svfprintf_r+0xa5a>
  403328:	463e      	mov	r6, r7
  40332a:	460c      	mov	r4, r1
  40332c:	464f      	mov	r7, r9
  40332e:	4691      	mov	r9, r2
  403330:	3301      	adds	r3, #1
  403332:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403334:	9324      	str	r3, [sp, #144]	; 0x90
  403336:	443c      	add	r4, r7
  403338:	2b07      	cmp	r3, #7
  40333a:	9425      	str	r4, [sp, #148]	; 0x94
  40333c:	e889 0084 	stmia.w	r9, {r2, r7}
  403340:	f300 8245 	bgt.w	4037ce <_svfprintf_r+0xf32>
  403344:	f109 0908 	add.w	r9, r9, #8
  403348:	e4e6      	b.n	402d18 <_svfprintf_r+0x47c>
  40334a:	bf00      	nop
  40334c:	004067d0 	.word	0x004067d0
  403350:	004067ec 	.word	0x004067ec
  403354:	0040679c 	.word	0x0040679c
  403358:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40335a:	9d24      	ldr	r5, [sp, #144]	; 0x90
  40335c:	2b01      	cmp	r3, #1
  40335e:	f340 8208 	ble.w	403772 <_svfprintf_r+0xed6>
  403362:	3501      	adds	r5, #1
  403364:	3401      	adds	r4, #1
  403366:	2301      	movs	r3, #1
  403368:	2d07      	cmp	r5, #7
  40336a:	9425      	str	r4, [sp, #148]	; 0x94
  40336c:	9524      	str	r5, [sp, #144]	; 0x90
  40336e:	f8c9 6000 	str.w	r6, [r9]
  403372:	f8c9 3004 	str.w	r3, [r9, #4]
  403376:	f300 820d 	bgt.w	403794 <_svfprintf_r+0xef8>
  40337a:	f109 0908 	add.w	r9, r9, #8
  40337e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  403380:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  403382:	f8c9 3000 	str.w	r3, [r9]
  403386:	3501      	adds	r5, #1
  403388:	4414      	add	r4, r2
  40338a:	2d07      	cmp	r5, #7
  40338c:	9425      	str	r4, [sp, #148]	; 0x94
  40338e:	9524      	str	r5, [sp, #144]	; 0x90
  403390:	f8c9 2004 	str.w	r2, [r9, #4]
  403394:	f300 820e 	bgt.w	4037b4 <_svfprintf_r+0xf18>
  403398:	f109 0908 	add.w	r9, r9, #8
  40339c:	2300      	movs	r3, #0
  40339e:	9814      	ldr	r0, [sp, #80]	; 0x50
  4033a0:	9915      	ldr	r1, [sp, #84]	; 0x54
  4033a2:	2200      	movs	r2, #0
  4033a4:	f003 f95e 	bl	406664 <__aeabi_dcmpeq>
  4033a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4033aa:	2800      	cmp	r0, #0
  4033ac:	f040 80c3 	bne.w	403536 <_svfprintf_r+0xc9a>
  4033b0:	3b01      	subs	r3, #1
  4033b2:	3501      	adds	r5, #1
  4033b4:	3601      	adds	r6, #1
  4033b6:	441c      	add	r4, r3
  4033b8:	2d07      	cmp	r5, #7
  4033ba:	9524      	str	r5, [sp, #144]	; 0x90
  4033bc:	9425      	str	r4, [sp, #148]	; 0x94
  4033be:	f8c9 6000 	str.w	r6, [r9]
  4033c2:	f8c9 3004 	str.w	r3, [r9, #4]
  4033c6:	f300 80f5 	bgt.w	4035b4 <_svfprintf_r+0xd18>
  4033ca:	f109 0908 	add.w	r9, r9, #8
  4033ce:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4033d0:	f8c9 2004 	str.w	r2, [r9, #4]
  4033d4:	3501      	adds	r5, #1
  4033d6:	4414      	add	r4, r2
  4033d8:	ab1f      	add	r3, sp, #124	; 0x7c
  4033da:	2d07      	cmp	r5, #7
  4033dc:	9425      	str	r4, [sp, #148]	; 0x94
  4033de:	9524      	str	r5, [sp, #144]	; 0x90
  4033e0:	f8c9 3000 	str.w	r3, [r9]
  4033e4:	f77f ace8 	ble.w	402db8 <_svfprintf_r+0x51c>
  4033e8:	aa23      	add	r2, sp, #140	; 0x8c
  4033ea:	9909      	ldr	r1, [sp, #36]	; 0x24
  4033ec:	980a      	ldr	r0, [sp, #40]	; 0x28
  4033ee:	f002 ffe1 	bl	4063b4 <__ssprint_r>
  4033f2:	2800      	cmp	r0, #0
  4033f4:	f47f ab4b 	bne.w	402a8e <_svfprintf_r+0x1f2>
  4033f8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4033fa:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4033fe:	e4dd      	b.n	402dbc <_svfprintf_r+0x520>
  403400:	aa23      	add	r2, sp, #140	; 0x8c
  403402:	9909      	ldr	r1, [sp, #36]	; 0x24
  403404:	980a      	ldr	r0, [sp, #40]	; 0x28
  403406:	f002 ffd5 	bl	4063b4 <__ssprint_r>
  40340a:	2800      	cmp	r0, #0
  40340c:	f43f ad24 	beq.w	402e58 <_svfprintf_r+0x5bc>
  403410:	f7ff bb3d 	b.w	402a8e <_svfprintf_r+0x1f2>
  403414:	aa23      	add	r2, sp, #140	; 0x8c
  403416:	9909      	ldr	r1, [sp, #36]	; 0x24
  403418:	980a      	ldr	r0, [sp, #40]	; 0x28
  40341a:	f002 ffcb 	bl	4063b4 <__ssprint_r>
  40341e:	2800      	cmp	r0, #0
  403420:	f47f ab35 	bne.w	402a8e <_svfprintf_r+0x1f2>
  403424:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403426:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40342a:	e4b4      	b.n	402d96 <_svfprintf_r+0x4fa>
  40342c:	aa23      	add	r2, sp, #140	; 0x8c
  40342e:	9909      	ldr	r1, [sp, #36]	; 0x24
  403430:	980a      	ldr	r0, [sp, #40]	; 0x28
  403432:	f002 ffbf 	bl	4063b4 <__ssprint_r>
  403436:	2800      	cmp	r0, #0
  403438:	f47f ab29 	bne.w	402a8e <_svfprintf_r+0x1f2>
  40343c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40343e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403442:	e455      	b.n	402cf0 <_svfprintf_r+0x454>
  403444:	aa23      	add	r2, sp, #140	; 0x8c
  403446:	9909      	ldr	r1, [sp, #36]	; 0x24
  403448:	980a      	ldr	r0, [sp, #40]	; 0x28
  40344a:	f002 ffb3 	bl	4063b4 <__ssprint_r>
  40344e:	2800      	cmp	r0, #0
  403450:	f47f ab1d 	bne.w	402a8e <_svfprintf_r+0x1f2>
  403454:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403456:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40345a:	e459      	b.n	402d10 <_svfprintf_r+0x474>
  40345c:	f1bb 0f00 	cmp.w	fp, #0
  403460:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  403464:	f2c0 82d8 	blt.w	403a18 <_svfprintf_r+0x117c>
  403468:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  40346c:	9307      	str	r3, [sp, #28]
  40346e:	ea54 0305 	orrs.w	r3, r4, r5
  403472:	f47f adcb 	bne.w	40300c <_svfprintf_r+0x770>
  403476:	f1bb 0f00 	cmp.w	fp, #0
  40347a:	f43f ae8d 	beq.w	403198 <_svfprintf_r+0x8fc>
  40347e:	2700      	movs	r7, #0
  403480:	e6b8      	b.n	4031f4 <_svfprintf_r+0x958>
  403482:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  403484:	2d00      	cmp	r5, #0
  403486:	f340 82ca 	ble.w	403a1e <_svfprintf_r+0x1182>
  40348a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40348c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40348e:	4293      	cmp	r3, r2
  403490:	bfa8      	it	ge
  403492:	4613      	movge	r3, r2
  403494:	2b00      	cmp	r3, #0
  403496:	461d      	mov	r5, r3
  403498:	dd0d      	ble.n	4034b6 <_svfprintf_r+0xc1a>
  40349a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40349c:	f8c9 6000 	str.w	r6, [r9]
  4034a0:	3301      	adds	r3, #1
  4034a2:	442c      	add	r4, r5
  4034a4:	2b07      	cmp	r3, #7
  4034a6:	9425      	str	r4, [sp, #148]	; 0x94
  4034a8:	f8c9 5004 	str.w	r5, [r9, #4]
  4034ac:	9324      	str	r3, [sp, #144]	; 0x90
  4034ae:	f300 839c 	bgt.w	403bea <_svfprintf_r+0x134e>
  4034b2:	f109 0908 	add.w	r9, r9, #8
  4034b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4034b8:	2d00      	cmp	r5, #0
  4034ba:	bfa8      	it	ge
  4034bc:	1b5b      	subge	r3, r3, r5
  4034be:	2b00      	cmp	r3, #0
  4034c0:	461d      	mov	r5, r3
  4034c2:	f340 80f6 	ble.w	4036b2 <_svfprintf_r+0xe16>
  4034c6:	4aba      	ldr	r2, [pc, #744]	; (4037b0 <_svfprintf_r+0xf14>)
  4034c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4034ca:	920f      	str	r2, [sp, #60]	; 0x3c
  4034cc:	2d10      	cmp	r5, #16
  4034ce:	f340 828a 	ble.w	4039e6 <_svfprintf_r+0x114a>
  4034d2:	4622      	mov	r2, r4
  4034d4:	2710      	movs	r7, #16
  4034d6:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4034da:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4034dc:	e005      	b.n	4034ea <_svfprintf_r+0xc4e>
  4034de:	f109 0908 	add.w	r9, r9, #8
  4034e2:	3d10      	subs	r5, #16
  4034e4:	2d10      	cmp	r5, #16
  4034e6:	f340 827d 	ble.w	4039e4 <_svfprintf_r+0x1148>
  4034ea:	3301      	adds	r3, #1
  4034ec:	3210      	adds	r2, #16
  4034ee:	2b07      	cmp	r3, #7
  4034f0:	9225      	str	r2, [sp, #148]	; 0x94
  4034f2:	9324      	str	r3, [sp, #144]	; 0x90
  4034f4:	f8c9 a000 	str.w	sl, [r9]
  4034f8:	f8c9 7004 	str.w	r7, [r9, #4]
  4034fc:	ddef      	ble.n	4034de <_svfprintf_r+0xc42>
  4034fe:	aa23      	add	r2, sp, #140	; 0x8c
  403500:	4621      	mov	r1, r4
  403502:	4658      	mov	r0, fp
  403504:	f002 ff56 	bl	4063b4 <__ssprint_r>
  403508:	2800      	cmp	r0, #0
  40350a:	f47f aac0 	bne.w	402a8e <_svfprintf_r+0x1f2>
  40350e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403510:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403512:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403516:	e7e4      	b.n	4034e2 <_svfprintf_r+0xc46>
  403518:	aa23      	add	r2, sp, #140	; 0x8c
  40351a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40351c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40351e:	f002 ff49 	bl	4063b4 <__ssprint_r>
  403522:	2800      	cmp	r0, #0
  403524:	f47f aab3 	bne.w	402a8e <_svfprintf_r+0x1f2>
  403528:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40352c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40352e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403532:	f7ff bbcd 	b.w	402cd0 <_svfprintf_r+0x434>
  403536:	1e5e      	subs	r6, r3, #1
  403538:	2e00      	cmp	r6, #0
  40353a:	f77f af48 	ble.w	4033ce <_svfprintf_r+0xb32>
  40353e:	4b9c      	ldr	r3, [pc, #624]	; (4037b0 <_svfprintf_r+0xf14>)
  403540:	930f      	str	r3, [sp, #60]	; 0x3c
  403542:	2e10      	cmp	r6, #16
  403544:	dd2c      	ble.n	4035a0 <_svfprintf_r+0xd04>
  403546:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  40354a:	2710      	movs	r7, #16
  40354c:	46b0      	mov	r8, r6
  40354e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  403552:	9e09      	ldr	r6, [sp, #36]	; 0x24
  403554:	e006      	b.n	403564 <_svfprintf_r+0xcc8>
  403556:	f1a8 0810 	sub.w	r8, r8, #16
  40355a:	f1b8 0f10 	cmp.w	r8, #16
  40355e:	f109 0908 	add.w	r9, r9, #8
  403562:	dd1a      	ble.n	40359a <_svfprintf_r+0xcfe>
  403564:	3501      	adds	r5, #1
  403566:	3410      	adds	r4, #16
  403568:	2d07      	cmp	r5, #7
  40356a:	9425      	str	r4, [sp, #148]	; 0x94
  40356c:	9524      	str	r5, [sp, #144]	; 0x90
  40356e:	f8c9 a000 	str.w	sl, [r9]
  403572:	f8c9 7004 	str.w	r7, [r9, #4]
  403576:	ddee      	ble.n	403556 <_svfprintf_r+0xcba>
  403578:	aa23      	add	r2, sp, #140	; 0x8c
  40357a:	4631      	mov	r1, r6
  40357c:	4658      	mov	r0, fp
  40357e:	f002 ff19 	bl	4063b4 <__ssprint_r>
  403582:	2800      	cmp	r0, #0
  403584:	f47f aa83 	bne.w	402a8e <_svfprintf_r+0x1f2>
  403588:	f1a8 0810 	sub.w	r8, r8, #16
  40358c:	f1b8 0f10 	cmp.w	r8, #16
  403590:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403592:	9d24      	ldr	r5, [sp, #144]	; 0x90
  403594:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403598:	dce4      	bgt.n	403564 <_svfprintf_r+0xcc8>
  40359a:	4646      	mov	r6, r8
  40359c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  4035a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4035a2:	3501      	adds	r5, #1
  4035a4:	4434      	add	r4, r6
  4035a6:	2d07      	cmp	r5, #7
  4035a8:	9425      	str	r4, [sp, #148]	; 0x94
  4035aa:	9524      	str	r5, [sp, #144]	; 0x90
  4035ac:	e889 0048 	stmia.w	r9, {r3, r6}
  4035b0:	f77f af0b 	ble.w	4033ca <_svfprintf_r+0xb2e>
  4035b4:	aa23      	add	r2, sp, #140	; 0x8c
  4035b6:	9909      	ldr	r1, [sp, #36]	; 0x24
  4035b8:	980a      	ldr	r0, [sp, #40]	; 0x28
  4035ba:	f002 fefb 	bl	4063b4 <__ssprint_r>
  4035be:	2800      	cmp	r0, #0
  4035c0:	f47f aa65 	bne.w	402a8e <_svfprintf_r+0x1f2>
  4035c4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4035c6:	9d24      	ldr	r5, [sp, #144]	; 0x90
  4035c8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4035cc:	e6ff      	b.n	4033ce <_svfprintf_r+0xb32>
  4035ce:	9907      	ldr	r1, [sp, #28]
  4035d0:	f011 0210 	ands.w	r2, r1, #16
  4035d4:	f000 8108 	beq.w	4037e8 <_svfprintf_r+0xf4c>
  4035d8:	980e      	ldr	r0, [sp, #56]	; 0x38
  4035da:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4035de:	f1bb 0f00 	cmp.w	fp, #0
  4035e2:	6804      	ldr	r4, [r0, #0]
  4035e4:	f100 0704 	add.w	r7, r0, #4
  4035e8:	f04f 0500 	mov.w	r5, #0
  4035ec:	db26      	blt.n	40363c <_svfprintf_r+0xda0>
  4035ee:	460a      	mov	r2, r1
  4035f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  4035f4:	9207      	str	r2, [sp, #28]
  4035f6:	ea54 0205 	orrs.w	r2, r4, r5
  4035fa:	970e      	str	r7, [sp, #56]	; 0x38
  4035fc:	461f      	mov	r7, r3
  4035fe:	f47f aaef 	bne.w	402be0 <_svfprintf_r+0x344>
  403602:	e4c8      	b.n	402f96 <_svfprintf_r+0x6fa>
  403604:	9b07      	ldr	r3, [sp, #28]
  403606:	06d9      	lsls	r1, r3, #27
  403608:	d42a      	bmi.n	403660 <_svfprintf_r+0xdc4>
  40360a:	9b07      	ldr	r3, [sp, #28]
  40360c:	065a      	lsls	r2, r3, #25
  40360e:	d527      	bpl.n	403660 <_svfprintf_r+0xdc4>
  403610:	990e      	ldr	r1, [sp, #56]	; 0x38
  403612:	f9b1 4000 	ldrsh.w	r4, [r1]
  403616:	3104      	adds	r1, #4
  403618:	17e5      	asrs	r5, r4, #31
  40361a:	4622      	mov	r2, r4
  40361c:	462b      	mov	r3, r5
  40361e:	910e      	str	r1, [sp, #56]	; 0x38
  403620:	f7ff bacb 	b.w	402bba <_svfprintf_r+0x31e>
  403624:	990e      	ldr	r1, [sp, #56]	; 0x38
  403626:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40362a:	f1bb 0f00 	cmp.w	fp, #0
  40362e:	680c      	ldr	r4, [r1, #0]
  403630:	f101 0704 	add.w	r7, r1, #4
  403634:	f04f 0500 	mov.w	r5, #0
  403638:	f280 8247 	bge.w	403aca <_svfprintf_r+0x122e>
  40363c:	970e      	str	r7, [sp, #56]	; 0x38
  40363e:	461f      	mov	r7, r3
  403640:	ea54 0305 	orrs.w	r3, r4, r5
  403644:	f47f aacc 	bne.w	402be0 <_svfprintf_r+0x344>
  403648:	e4aa      	b.n	402fa0 <_svfprintf_r+0x704>
  40364a:	3301      	adds	r3, #1
  40364c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40364e:	9324      	str	r3, [sp, #144]	; 0x90
  403650:	442c      	add	r4, r5
  403652:	2b07      	cmp	r3, #7
  403654:	9425      	str	r4, [sp, #148]	; 0x94
  403656:	e889 0024 	stmia.w	r9, {r2, r5}
  40365a:	f77f abad 	ble.w	402db8 <_svfprintf_r+0x51c>
  40365e:	e6c3      	b.n	4033e8 <_svfprintf_r+0xb4c>
  403660:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403662:	6814      	ldr	r4, [r2, #0]
  403664:	4613      	mov	r3, r2
  403666:	3304      	adds	r3, #4
  403668:	17e5      	asrs	r5, r4, #31
  40366a:	4622      	mov	r2, r4
  40366c:	930e      	str	r3, [sp, #56]	; 0x38
  40366e:	2a00      	cmp	r2, #0
  403670:	462b      	mov	r3, r5
  403672:	f173 0300 	sbcs.w	r3, r3, #0
  403676:	f6bf aaa5 	bge.w	402bc4 <_svfprintf_r+0x328>
  40367a:	4264      	negs	r4, r4
  40367c:	f04f 072d 	mov.w	r7, #45	; 0x2d
  403680:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  403684:	f1bb 0f00 	cmp.w	fp, #0
  403688:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40368c:	f6ff aaa8 	blt.w	402be0 <_svfprintf_r+0x344>
  403690:	9b07      	ldr	r3, [sp, #28]
  403692:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  403696:	9307      	str	r3, [sp, #28]
  403698:	f7ff baa2 	b.w	402be0 <_svfprintf_r+0x344>
  40369c:	aa23      	add	r2, sp, #140	; 0x8c
  40369e:	9909      	ldr	r1, [sp, #36]	; 0x24
  4036a0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4036a2:	f002 fe87 	bl	4063b4 <__ssprint_r>
  4036a6:	2800      	cmp	r0, #0
  4036a8:	f47f a9f1 	bne.w	402a8e <_svfprintf_r+0x1f2>
  4036ac:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4036ae:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4036b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4036b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4036b6:	4432      	add	r2, r6
  4036b8:	4617      	mov	r7, r2
  4036ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4036bc:	4293      	cmp	r3, r2
  4036be:	db47      	blt.n	403750 <_svfprintf_r+0xeb4>
  4036c0:	9a07      	ldr	r2, [sp, #28]
  4036c2:	07d5      	lsls	r5, r2, #31
  4036c4:	d444      	bmi.n	403750 <_svfprintf_r+0xeb4>
  4036c6:	9912      	ldr	r1, [sp, #72]	; 0x48
  4036c8:	440e      	add	r6, r1
  4036ca:	1bf5      	subs	r5, r6, r7
  4036cc:	1acb      	subs	r3, r1, r3
  4036ce:	429d      	cmp	r5, r3
  4036d0:	bfa8      	it	ge
  4036d2:	461d      	movge	r5, r3
  4036d4:	2d00      	cmp	r5, #0
  4036d6:	462e      	mov	r6, r5
  4036d8:	dd0d      	ble.n	4036f6 <_svfprintf_r+0xe5a>
  4036da:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4036dc:	f8c9 7000 	str.w	r7, [r9]
  4036e0:	3201      	adds	r2, #1
  4036e2:	442c      	add	r4, r5
  4036e4:	2a07      	cmp	r2, #7
  4036e6:	9425      	str	r4, [sp, #148]	; 0x94
  4036e8:	f8c9 5004 	str.w	r5, [r9, #4]
  4036ec:	9224      	str	r2, [sp, #144]	; 0x90
  4036ee:	f300 830b 	bgt.w	403d08 <_svfprintf_r+0x146c>
  4036f2:	f109 0908 	add.w	r9, r9, #8
  4036f6:	2e00      	cmp	r6, #0
  4036f8:	bfac      	ite	ge
  4036fa:	1b9d      	subge	r5, r3, r6
  4036fc:	461d      	movlt	r5, r3
  4036fe:	2d00      	cmp	r5, #0
  403700:	f77f ab5c 	ble.w	402dbc <_svfprintf_r+0x520>
  403704:	4a2a      	ldr	r2, [pc, #168]	; (4037b0 <_svfprintf_r+0xf14>)
  403706:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403708:	920f      	str	r2, [sp, #60]	; 0x3c
  40370a:	2d10      	cmp	r5, #16
  40370c:	dd9d      	ble.n	40364a <_svfprintf_r+0xdae>
  40370e:	2610      	movs	r6, #16
  403710:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  403712:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  403716:	e004      	b.n	403722 <_svfprintf_r+0xe86>
  403718:	f109 0908 	add.w	r9, r9, #8
  40371c:	3d10      	subs	r5, #16
  40371e:	2d10      	cmp	r5, #16
  403720:	dd93      	ble.n	40364a <_svfprintf_r+0xdae>
  403722:	3301      	adds	r3, #1
  403724:	3410      	adds	r4, #16
  403726:	2b07      	cmp	r3, #7
  403728:	9425      	str	r4, [sp, #148]	; 0x94
  40372a:	9324      	str	r3, [sp, #144]	; 0x90
  40372c:	f8c9 a000 	str.w	sl, [r9]
  403730:	f8c9 6004 	str.w	r6, [r9, #4]
  403734:	ddf0      	ble.n	403718 <_svfprintf_r+0xe7c>
  403736:	aa23      	add	r2, sp, #140	; 0x8c
  403738:	4659      	mov	r1, fp
  40373a:	4638      	mov	r0, r7
  40373c:	f002 fe3a 	bl	4063b4 <__ssprint_r>
  403740:	2800      	cmp	r0, #0
  403742:	f47f a9a4 	bne.w	402a8e <_svfprintf_r+0x1f2>
  403746:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403748:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40374a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40374e:	e7e5      	b.n	40371c <_svfprintf_r+0xe80>
  403750:	9a24      	ldr	r2, [sp, #144]	; 0x90
  403752:	9816      	ldr	r0, [sp, #88]	; 0x58
  403754:	9917      	ldr	r1, [sp, #92]	; 0x5c
  403756:	f8c9 1000 	str.w	r1, [r9]
  40375a:	3201      	adds	r2, #1
  40375c:	4404      	add	r4, r0
  40375e:	2a07      	cmp	r2, #7
  403760:	9425      	str	r4, [sp, #148]	; 0x94
  403762:	f8c9 0004 	str.w	r0, [r9, #4]
  403766:	9224      	str	r2, [sp, #144]	; 0x90
  403768:	f300 82a9 	bgt.w	403cbe <_svfprintf_r+0x1422>
  40376c:	f109 0908 	add.w	r9, r9, #8
  403770:	e7a9      	b.n	4036c6 <_svfprintf_r+0xe2a>
  403772:	9b07      	ldr	r3, [sp, #28]
  403774:	07d8      	lsls	r0, r3, #31
  403776:	f53f adf4 	bmi.w	403362 <_svfprintf_r+0xac6>
  40377a:	3501      	adds	r5, #1
  40377c:	3401      	adds	r4, #1
  40377e:	2301      	movs	r3, #1
  403780:	2d07      	cmp	r5, #7
  403782:	9425      	str	r4, [sp, #148]	; 0x94
  403784:	9524      	str	r5, [sp, #144]	; 0x90
  403786:	f8c9 6000 	str.w	r6, [r9]
  40378a:	f8c9 3004 	str.w	r3, [r9, #4]
  40378e:	f77f ae1c 	ble.w	4033ca <_svfprintf_r+0xb2e>
  403792:	e70f      	b.n	4035b4 <_svfprintf_r+0xd18>
  403794:	aa23      	add	r2, sp, #140	; 0x8c
  403796:	9909      	ldr	r1, [sp, #36]	; 0x24
  403798:	980a      	ldr	r0, [sp, #40]	; 0x28
  40379a:	f002 fe0b 	bl	4063b4 <__ssprint_r>
  40379e:	2800      	cmp	r0, #0
  4037a0:	f47f a975 	bne.w	402a8e <_svfprintf_r+0x1f2>
  4037a4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4037a6:	9d24      	ldr	r5, [sp, #144]	; 0x90
  4037a8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4037ac:	e5e7      	b.n	40337e <_svfprintf_r+0xae2>
  4037ae:	bf00      	nop
  4037b0:	0040679c 	.word	0x0040679c
  4037b4:	aa23      	add	r2, sp, #140	; 0x8c
  4037b6:	9909      	ldr	r1, [sp, #36]	; 0x24
  4037b8:	980a      	ldr	r0, [sp, #40]	; 0x28
  4037ba:	f002 fdfb 	bl	4063b4 <__ssprint_r>
  4037be:	2800      	cmp	r0, #0
  4037c0:	f47f a965 	bne.w	402a8e <_svfprintf_r+0x1f2>
  4037c4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4037c6:	9d24      	ldr	r5, [sp, #144]	; 0x90
  4037c8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4037cc:	e5e6      	b.n	40339c <_svfprintf_r+0xb00>
  4037ce:	aa23      	add	r2, sp, #140	; 0x8c
  4037d0:	9909      	ldr	r1, [sp, #36]	; 0x24
  4037d2:	980a      	ldr	r0, [sp, #40]	; 0x28
  4037d4:	f002 fdee 	bl	4063b4 <__ssprint_r>
  4037d8:	2800      	cmp	r0, #0
  4037da:	f47f a958 	bne.w	402a8e <_svfprintf_r+0x1f2>
  4037de:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4037e0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4037e4:	f7ff ba98 	b.w	402d18 <_svfprintf_r+0x47c>
  4037e8:	9907      	ldr	r1, [sp, #28]
  4037ea:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  4037ee:	f43f af19 	beq.w	403624 <_svfprintf_r+0xd88>
  4037f2:	980e      	ldr	r0, [sp, #56]	; 0x38
  4037f4:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  4037f8:	f1bb 0f00 	cmp.w	fp, #0
  4037fc:	8804      	ldrh	r4, [r0, #0]
  4037fe:	f100 0704 	add.w	r7, r0, #4
  403802:	f04f 0500 	mov.w	r5, #0
  403806:	f2c0 81b9 	blt.w	403b7c <_svfprintf_r+0x12e0>
  40380a:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  40380e:	9307      	str	r3, [sp, #28]
  403810:	ea54 0305 	orrs.w	r3, r4, r5
  403814:	970e      	str	r7, [sp, #56]	; 0x38
  403816:	4617      	mov	r7, r2
  403818:	f47f a9e2 	bne.w	402be0 <_svfprintf_r+0x344>
  40381c:	f7ff bbbb 	b.w	402f96 <_svfprintf_r+0x6fa>
  403820:	9c14      	ldr	r4, [sp, #80]	; 0x50
  403822:	4622      	mov	r2, r4
  403824:	4620      	mov	r0, r4
  403826:	9c15      	ldr	r4, [sp, #84]	; 0x54
  403828:	4623      	mov	r3, r4
  40382a:	4621      	mov	r1, r4
  40382c:	f002 ff4c 	bl	4066c8 <__aeabi_dcmpun>
  403830:	2800      	cmp	r0, #0
  403832:	f040 8317 	bne.w	403e64 <_svfprintf_r+0x15c8>
  403836:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403838:	f1bb 3fff 	cmp.w	fp, #4294967295
  40383c:	f023 0320 	bic.w	r3, r3, #32
  403840:	930d      	str	r3, [sp, #52]	; 0x34
  403842:	f000 8270 	beq.w	403d26 <_svfprintf_r+0x148a>
  403846:	2b47      	cmp	r3, #71	; 0x47
  403848:	f000 8192 	beq.w	403b70 <_svfprintf_r+0x12d4>
  40384c:	9b07      	ldr	r3, [sp, #28]
  40384e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  403852:	9310      	str	r3, [sp, #64]	; 0x40
  403854:	9b15      	ldr	r3, [sp, #84]	; 0x54
  403856:	1e1f      	subs	r7, r3, #0
  403858:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40385a:	9308      	str	r3, [sp, #32]
  40385c:	bfbb      	ittet	lt
  40385e:	463b      	movlt	r3, r7
  403860:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  403864:	2300      	movge	r3, #0
  403866:	232d      	movlt	r3, #45	; 0x2d
  403868:	930f      	str	r3, [sp, #60]	; 0x3c
  40386a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40386c:	2b66      	cmp	r3, #102	; 0x66
  40386e:	f000 825d 	beq.w	403d2c <_svfprintf_r+0x1490>
  403872:	2b46      	cmp	r3, #70	; 0x46
  403874:	f000 8151 	beq.w	403b1a <_svfprintf_r+0x127e>
  403878:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40387a:	9a08      	ldr	r2, [sp, #32]
  40387c:	2b45      	cmp	r3, #69	; 0x45
  40387e:	a821      	add	r0, sp, #132	; 0x84
  403880:	a91e      	add	r1, sp, #120	; 0x78
  403882:	bf0c      	ite	eq
  403884:	f10b 0501 	addeq.w	r5, fp, #1
  403888:	465d      	movne	r5, fp
  40388a:	9004      	str	r0, [sp, #16]
  40388c:	9103      	str	r1, [sp, #12]
  40388e:	a81d      	add	r0, sp, #116	; 0x74
  403890:	2102      	movs	r1, #2
  403892:	463b      	mov	r3, r7
  403894:	9002      	str	r0, [sp, #8]
  403896:	9501      	str	r5, [sp, #4]
  403898:	9100      	str	r1, [sp, #0]
  40389a:	980a      	ldr	r0, [sp, #40]	; 0x28
  40389c:	f000 fbf0 	bl	404080 <_dtoa_r>
  4038a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4038a2:	2b67      	cmp	r3, #103	; 0x67
  4038a4:	4606      	mov	r6, r0
  4038a6:	f040 8290 	bne.w	403dca <_svfprintf_r+0x152e>
  4038aa:	9b07      	ldr	r3, [sp, #28]
  4038ac:	07da      	lsls	r2, r3, #31
  4038ae:	f140 82af 	bpl.w	403e10 <_svfprintf_r+0x1574>
  4038b2:	1974      	adds	r4, r6, r5
  4038b4:	9808      	ldr	r0, [sp, #32]
  4038b6:	4639      	mov	r1, r7
  4038b8:	2200      	movs	r2, #0
  4038ba:	2300      	movs	r3, #0
  4038bc:	f002 fed2 	bl	406664 <__aeabi_dcmpeq>
  4038c0:	2800      	cmp	r0, #0
  4038c2:	f040 8190 	bne.w	403be6 <_svfprintf_r+0x134a>
  4038c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4038c8:	429c      	cmp	r4, r3
  4038ca:	d906      	bls.n	4038da <_svfprintf_r+0x103e>
  4038cc:	2130      	movs	r1, #48	; 0x30
  4038ce:	1c5a      	adds	r2, r3, #1
  4038d0:	9221      	str	r2, [sp, #132]	; 0x84
  4038d2:	7019      	strb	r1, [r3, #0]
  4038d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4038d6:	429c      	cmp	r4, r3
  4038d8:	d8f9      	bhi.n	4038ce <_svfprintf_r+0x1032>
  4038da:	1b9b      	subs	r3, r3, r6
  4038dc:	9312      	str	r3, [sp, #72]	; 0x48
  4038de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4038e0:	2b47      	cmp	r3, #71	; 0x47
  4038e2:	f000 8179 	beq.w	403bd8 <_svfprintf_r+0x133c>
  4038e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4038e8:	2b65      	cmp	r3, #101	; 0x65
  4038ea:	f340 827d 	ble.w	403de8 <_svfprintf_r+0x154c>
  4038ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4038f0:	2b66      	cmp	r3, #102	; 0x66
  4038f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4038f4:	9313      	str	r3, [sp, #76]	; 0x4c
  4038f6:	f000 825b 	beq.w	403db0 <_svfprintf_r+0x1514>
  4038fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4038fc:	9912      	ldr	r1, [sp, #72]	; 0x48
  4038fe:	428a      	cmp	r2, r1
  403900:	f2c0 8230 	blt.w	403d64 <_svfprintf_r+0x14c8>
  403904:	9b07      	ldr	r3, [sp, #28]
  403906:	07d9      	lsls	r1, r3, #31
  403908:	f100 8284 	bmi.w	403e14 <_svfprintf_r+0x1578>
  40390c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  403910:	920d      	str	r2, [sp, #52]	; 0x34
  403912:	2267      	movs	r2, #103	; 0x67
  403914:	9211      	str	r2, [sp, #68]	; 0x44
  403916:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403918:	2a00      	cmp	r2, #0
  40391a:	f040 8153 	bne.w	403bc4 <_svfprintf_r+0x1328>
  40391e:	9308      	str	r3, [sp, #32]
  403920:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403922:	9307      	str	r3, [sp, #28]
  403924:	4693      	mov	fp, r2
  403926:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40392a:	f7ff b97d 	b.w	402c28 <_svfprintf_r+0x38c>
  40392e:	9907      	ldr	r1, [sp, #28]
  403930:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  403934:	d015      	beq.n	403962 <_svfprintf_r+0x10c6>
  403936:	980e      	ldr	r0, [sp, #56]	; 0x38
  403938:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40393c:	f1bb 0f00 	cmp.w	fp, #0
  403940:	8804      	ldrh	r4, [r0, #0]
  403942:	f100 0704 	add.w	r7, r0, #4
  403946:	f04f 0500 	mov.w	r5, #0
  40394a:	db16      	blt.n	40397a <_svfprintf_r+0x10de>
  40394c:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  403950:	9307      	str	r3, [sp, #28]
  403952:	ea54 0305 	orrs.w	r3, r4, r5
  403956:	970e      	str	r7, [sp, #56]	; 0x38
  403958:	f43f ac3a 	beq.w	4031d0 <_svfprintf_r+0x934>
  40395c:	4617      	mov	r7, r2
  40395e:	f7ff b8c2 	b.w	402ae6 <_svfprintf_r+0x24a>
  403962:	990e      	ldr	r1, [sp, #56]	; 0x38
  403964:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  403968:	f1bb 0f00 	cmp.w	fp, #0
  40396c:	680c      	ldr	r4, [r1, #0]
  40396e:	f101 0704 	add.w	r7, r1, #4
  403972:	f04f 0500 	mov.w	r5, #0
  403976:	f280 80a5 	bge.w	403ac4 <_svfprintf_r+0x1228>
  40397a:	970e      	str	r7, [sp, #56]	; 0x38
  40397c:	2700      	movs	r7, #0
  40397e:	f7ff b8b2 	b.w	402ae6 <_svfprintf_r+0x24a>
  403982:	9b07      	ldr	r3, [sp, #28]
  403984:	06df      	lsls	r7, r3, #27
  403986:	d40b      	bmi.n	4039a0 <_svfprintf_r+0x1104>
  403988:	9b07      	ldr	r3, [sp, #28]
  40398a:	065e      	lsls	r6, r3, #25
  40398c:	d508      	bpl.n	4039a0 <_svfprintf_r+0x1104>
  40398e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403990:	6813      	ldr	r3, [r2, #0]
  403992:	3204      	adds	r2, #4
  403994:	920e      	str	r2, [sp, #56]	; 0x38
  403996:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  40399a:	801a      	strh	r2, [r3, #0]
  40399c:	f7fe bfa4 	b.w	4028e8 <_svfprintf_r+0x4c>
  4039a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4039a2:	6813      	ldr	r3, [r2, #0]
  4039a4:	3204      	adds	r2, #4
  4039a6:	920e      	str	r2, [sp, #56]	; 0x38
  4039a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4039aa:	601a      	str	r2, [r3, #0]
  4039ac:	f7fe bf9c 	b.w	4028e8 <_svfprintf_r+0x4c>
  4039b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4039b2:	9b07      	ldr	r3, [sp, #28]
  4039b4:	f013 0f40 	tst.w	r3, #64	; 0x40
  4039b8:	4613      	mov	r3, r2
  4039ba:	f103 0304 	add.w	r3, r3, #4
  4039be:	bf0c      	ite	eq
  4039c0:	6814      	ldreq	r4, [r2, #0]
  4039c2:	8814      	ldrhne	r4, [r2, #0]
  4039c4:	930e      	str	r3, [sp, #56]	; 0x38
  4039c6:	2500      	movs	r5, #0
  4039c8:	f7ff bb02 	b.w	402fd0 <_svfprintf_r+0x734>
  4039cc:	2700      	movs	r7, #0
  4039ce:	45bb      	cmp	fp, r7
  4039d0:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4039d4:	f6ff ac0e 	blt.w	4031f4 <_svfprintf_r+0x958>
  4039d8:	9b07      	ldr	r3, [sp, #28]
  4039da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4039de:	9307      	str	r3, [sp, #28]
  4039e0:	f7ff bbd6 	b.w	403190 <_svfprintf_r+0x8f4>
  4039e4:	4614      	mov	r4, r2
  4039e6:	3301      	adds	r3, #1
  4039e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4039ea:	9324      	str	r3, [sp, #144]	; 0x90
  4039ec:	442c      	add	r4, r5
  4039ee:	2b07      	cmp	r3, #7
  4039f0:	9425      	str	r4, [sp, #148]	; 0x94
  4039f2:	e889 0024 	stmia.w	r9, {r2, r5}
  4039f6:	f73f ae51 	bgt.w	40369c <_svfprintf_r+0xe00>
  4039fa:	f109 0908 	add.w	r9, r9, #8
  4039fe:	e658      	b.n	4036b2 <_svfprintf_r+0xe16>
  403a00:	aa23      	add	r2, sp, #140	; 0x8c
  403a02:	9909      	ldr	r1, [sp, #36]	; 0x24
  403a04:	980a      	ldr	r0, [sp, #40]	; 0x28
  403a06:	f002 fcd5 	bl	4063b4 <__ssprint_r>
  403a0a:	2800      	cmp	r0, #0
  403a0c:	f47f a83f 	bne.w	402a8e <_svfprintf_r+0x1f2>
  403a10:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403a12:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403a16:	e40f      	b.n	403238 <_svfprintf_r+0x99c>
  403a18:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  403a1a:	f7ff bbe4 	b.w	4031e6 <_svfprintf_r+0x94a>
  403a1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403a20:	4ab5      	ldr	r2, [pc, #724]	; (403cf8 <_svfprintf_r+0x145c>)
  403a22:	f8c9 2000 	str.w	r2, [r9]
  403a26:	3301      	adds	r3, #1
  403a28:	3401      	adds	r4, #1
  403a2a:	2201      	movs	r2, #1
  403a2c:	2b07      	cmp	r3, #7
  403a2e:	9425      	str	r4, [sp, #148]	; 0x94
  403a30:	9324      	str	r3, [sp, #144]	; 0x90
  403a32:	f8c9 2004 	str.w	r2, [r9, #4]
  403a36:	f300 808e 	bgt.w	403b56 <_svfprintf_r+0x12ba>
  403a3a:	f109 0908 	add.w	r9, r9, #8
  403a3e:	b92d      	cbnz	r5, 403a4c <_svfprintf_r+0x11b0>
  403a40:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403a42:	b91b      	cbnz	r3, 403a4c <_svfprintf_r+0x11b0>
  403a44:	9b07      	ldr	r3, [sp, #28]
  403a46:	07df      	lsls	r7, r3, #31
  403a48:	f57f a9b8 	bpl.w	402dbc <_svfprintf_r+0x520>
  403a4c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403a4e:	9916      	ldr	r1, [sp, #88]	; 0x58
  403a50:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  403a52:	f8c9 2000 	str.w	r2, [r9]
  403a56:	3301      	adds	r3, #1
  403a58:	440c      	add	r4, r1
  403a5a:	2b07      	cmp	r3, #7
  403a5c:	9425      	str	r4, [sp, #148]	; 0x94
  403a5e:	f8c9 1004 	str.w	r1, [r9, #4]
  403a62:	9324      	str	r3, [sp, #144]	; 0x90
  403a64:	f300 81c2 	bgt.w	403dec <_svfprintf_r+0x1550>
  403a68:	f109 0908 	add.w	r9, r9, #8
  403a6c:	426d      	negs	r5, r5
  403a6e:	2d00      	cmp	r5, #0
  403a70:	f340 809b 	ble.w	403baa <_svfprintf_r+0x130e>
  403a74:	4aa1      	ldr	r2, [pc, #644]	; (403cfc <_svfprintf_r+0x1460>)
  403a76:	920f      	str	r2, [sp, #60]	; 0x3c
  403a78:	2d10      	cmp	r5, #16
  403a7a:	f340 80c3 	ble.w	403c04 <_svfprintf_r+0x1368>
  403a7e:	4622      	mov	r2, r4
  403a80:	2710      	movs	r7, #16
  403a82:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  403a86:	9c09      	ldr	r4, [sp, #36]	; 0x24
  403a88:	e005      	b.n	403a96 <_svfprintf_r+0x11fa>
  403a8a:	f109 0908 	add.w	r9, r9, #8
  403a8e:	3d10      	subs	r5, #16
  403a90:	2d10      	cmp	r5, #16
  403a92:	f340 80b6 	ble.w	403c02 <_svfprintf_r+0x1366>
  403a96:	3301      	adds	r3, #1
  403a98:	3210      	adds	r2, #16
  403a9a:	2b07      	cmp	r3, #7
  403a9c:	9225      	str	r2, [sp, #148]	; 0x94
  403a9e:	9324      	str	r3, [sp, #144]	; 0x90
  403aa0:	f8c9 a000 	str.w	sl, [r9]
  403aa4:	f8c9 7004 	str.w	r7, [r9, #4]
  403aa8:	ddef      	ble.n	403a8a <_svfprintf_r+0x11ee>
  403aaa:	aa23      	add	r2, sp, #140	; 0x8c
  403aac:	4621      	mov	r1, r4
  403aae:	4658      	mov	r0, fp
  403ab0:	f002 fc80 	bl	4063b4 <__ssprint_r>
  403ab4:	2800      	cmp	r0, #0
  403ab6:	f47e afea 	bne.w	402a8e <_svfprintf_r+0x1f2>
  403aba:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403abc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403abe:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403ac2:	e7e4      	b.n	403a8e <_svfprintf_r+0x11f2>
  403ac4:	9a07      	ldr	r2, [sp, #28]
  403ac6:	f7ff ba38 	b.w	402f3a <_svfprintf_r+0x69e>
  403aca:	9a07      	ldr	r2, [sp, #28]
  403acc:	e590      	b.n	4035f0 <_svfprintf_r+0xd54>
  403ace:	9b07      	ldr	r3, [sp, #28]
  403ad0:	f043 0320 	orr.w	r3, r3, #32
  403ad4:	9307      	str	r3, [sp, #28]
  403ad6:	f108 0801 	add.w	r8, r8, #1
  403ada:	f898 3000 	ldrb.w	r3, [r8]
  403ade:	f7fe bf36 	b.w	40294e <_svfprintf_r+0xb2>
  403ae2:	aa23      	add	r2, sp, #140	; 0x8c
  403ae4:	9909      	ldr	r1, [sp, #36]	; 0x24
  403ae6:	980a      	ldr	r0, [sp, #40]	; 0x28
  403ae8:	f002 fc64 	bl	4063b4 <__ssprint_r>
  403aec:	2800      	cmp	r0, #0
  403aee:	f47e afce 	bne.w	402a8e <_svfprintf_r+0x1f2>
  403af2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403af4:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403af8:	f7ff bbb6 	b.w	403268 <_svfprintf_r+0x9cc>
  403afc:	2140      	movs	r1, #64	; 0x40
  403afe:	980a      	ldr	r0, [sp, #40]	; 0x28
  403b00:	f001 fb38 	bl	405174 <_malloc_r>
  403b04:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403b06:	6010      	str	r0, [r2, #0]
  403b08:	6110      	str	r0, [r2, #16]
  403b0a:	2800      	cmp	r0, #0
  403b0c:	f000 81e5 	beq.w	403eda <_svfprintf_r+0x163e>
  403b10:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403b12:	2340      	movs	r3, #64	; 0x40
  403b14:	6153      	str	r3, [r2, #20]
  403b16:	f7fe bed8 	b.w	4028ca <_svfprintf_r+0x2e>
  403b1a:	a821      	add	r0, sp, #132	; 0x84
  403b1c:	a91e      	add	r1, sp, #120	; 0x78
  403b1e:	9004      	str	r0, [sp, #16]
  403b20:	9103      	str	r1, [sp, #12]
  403b22:	a81d      	add	r0, sp, #116	; 0x74
  403b24:	2103      	movs	r1, #3
  403b26:	9002      	str	r0, [sp, #8]
  403b28:	9a08      	ldr	r2, [sp, #32]
  403b2a:	f8cd b004 	str.w	fp, [sp, #4]
  403b2e:	463b      	mov	r3, r7
  403b30:	9100      	str	r1, [sp, #0]
  403b32:	980a      	ldr	r0, [sp, #40]	; 0x28
  403b34:	f000 faa4 	bl	404080 <_dtoa_r>
  403b38:	465d      	mov	r5, fp
  403b3a:	4606      	mov	r6, r0
  403b3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403b3e:	2b46      	cmp	r3, #70	; 0x46
  403b40:	eb06 0405 	add.w	r4, r6, r5
  403b44:	f47f aeb6 	bne.w	4038b4 <_svfprintf_r+0x1018>
  403b48:	7833      	ldrb	r3, [r6, #0]
  403b4a:	2b30      	cmp	r3, #48	; 0x30
  403b4c:	f000 817c 	beq.w	403e48 <_svfprintf_r+0x15ac>
  403b50:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  403b52:	442c      	add	r4, r5
  403b54:	e6ae      	b.n	4038b4 <_svfprintf_r+0x1018>
  403b56:	aa23      	add	r2, sp, #140	; 0x8c
  403b58:	9909      	ldr	r1, [sp, #36]	; 0x24
  403b5a:	980a      	ldr	r0, [sp, #40]	; 0x28
  403b5c:	f002 fc2a 	bl	4063b4 <__ssprint_r>
  403b60:	2800      	cmp	r0, #0
  403b62:	f47e af94 	bne.w	402a8e <_svfprintf_r+0x1f2>
  403b66:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  403b68:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403b6a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403b6e:	e766      	b.n	403a3e <_svfprintf_r+0x11a2>
  403b70:	f1bb 0f00 	cmp.w	fp, #0
  403b74:	bf08      	it	eq
  403b76:	f04f 0b01 	moveq.w	fp, #1
  403b7a:	e667      	b.n	40384c <_svfprintf_r+0xfb0>
  403b7c:	970e      	str	r7, [sp, #56]	; 0x38
  403b7e:	4617      	mov	r7, r2
  403b80:	e55e      	b.n	403640 <_svfprintf_r+0xda4>
  403b82:	4630      	mov	r0, r6
  403b84:	f7fe fe1c 	bl	4027c0 <strlen>
  403b88:	46a3      	mov	fp, r4
  403b8a:	4603      	mov	r3, r0
  403b8c:	900d      	str	r0, [sp, #52]	; 0x34
  403b8e:	f7ff baf4 	b.w	40317a <_svfprintf_r+0x8de>
  403b92:	aa23      	add	r2, sp, #140	; 0x8c
  403b94:	9909      	ldr	r1, [sp, #36]	; 0x24
  403b96:	980a      	ldr	r0, [sp, #40]	; 0x28
  403b98:	f002 fc0c 	bl	4063b4 <__ssprint_r>
  403b9c:	2800      	cmp	r0, #0
  403b9e:	f47e af76 	bne.w	402a8e <_svfprintf_r+0x1f2>
  403ba2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403ba4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403ba6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403baa:	9912      	ldr	r1, [sp, #72]	; 0x48
  403bac:	f8c9 6000 	str.w	r6, [r9]
  403bb0:	3301      	adds	r3, #1
  403bb2:	440c      	add	r4, r1
  403bb4:	2b07      	cmp	r3, #7
  403bb6:	9425      	str	r4, [sp, #148]	; 0x94
  403bb8:	9324      	str	r3, [sp, #144]	; 0x90
  403bba:	f8c9 1004 	str.w	r1, [r9, #4]
  403bbe:	f77f a8fb 	ble.w	402db8 <_svfprintf_r+0x51c>
  403bc2:	e411      	b.n	4033e8 <_svfprintf_r+0xb4c>
  403bc4:	272d      	movs	r7, #45	; 0x2d
  403bc6:	9308      	str	r3, [sp, #32]
  403bc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403bca:	9307      	str	r3, [sp, #28]
  403bcc:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  403bd0:	f04f 0b00 	mov.w	fp, #0
  403bd4:	f7ff b829 	b.w	402c2a <_svfprintf_r+0x38e>
  403bd8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  403bda:	1cdd      	adds	r5, r3, #3
  403bdc:	db1e      	blt.n	403c1c <_svfprintf_r+0x1380>
  403bde:	459b      	cmp	fp, r3
  403be0:	db1c      	blt.n	403c1c <_svfprintf_r+0x1380>
  403be2:	9313      	str	r3, [sp, #76]	; 0x4c
  403be4:	e689      	b.n	4038fa <_svfprintf_r+0x105e>
  403be6:	4623      	mov	r3, r4
  403be8:	e677      	b.n	4038da <_svfprintf_r+0x103e>
  403bea:	aa23      	add	r2, sp, #140	; 0x8c
  403bec:	9909      	ldr	r1, [sp, #36]	; 0x24
  403bee:	980a      	ldr	r0, [sp, #40]	; 0x28
  403bf0:	f002 fbe0 	bl	4063b4 <__ssprint_r>
  403bf4:	2800      	cmp	r0, #0
  403bf6:	f47e af4a 	bne.w	402a8e <_svfprintf_r+0x1f2>
  403bfa:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403bfc:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403c00:	e459      	b.n	4034b6 <_svfprintf_r+0xc1a>
  403c02:	4614      	mov	r4, r2
  403c04:	3301      	adds	r3, #1
  403c06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403c08:	9324      	str	r3, [sp, #144]	; 0x90
  403c0a:	442c      	add	r4, r5
  403c0c:	2b07      	cmp	r3, #7
  403c0e:	9425      	str	r4, [sp, #148]	; 0x94
  403c10:	e889 0024 	stmia.w	r9, {r2, r5}
  403c14:	dcbd      	bgt.n	403b92 <_svfprintf_r+0x12f6>
  403c16:	f109 0908 	add.w	r9, r9, #8
  403c1a:	e7c6      	b.n	403baa <_svfprintf_r+0x130e>
  403c1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403c1e:	3a02      	subs	r2, #2
  403c20:	9211      	str	r2, [sp, #68]	; 0x44
  403c22:	3b01      	subs	r3, #1
  403c24:	2b00      	cmp	r3, #0
  403c26:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  403c2a:	931d      	str	r3, [sp, #116]	; 0x74
  403c2c:	bfb8      	it	lt
  403c2e:	425b      	neglt	r3, r3
  403c30:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
  403c34:	bfb4      	ite	lt
  403c36:	222d      	movlt	r2, #45	; 0x2d
  403c38:	222b      	movge	r2, #43	; 0x2b
  403c3a:	2b09      	cmp	r3, #9
  403c3c:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  403c40:	f340 80f1 	ble.w	403e26 <_svfprintf_r+0x158a>
  403c44:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
  403c48:	4604      	mov	r4, r0
  403c4a:	4a2d      	ldr	r2, [pc, #180]	; (403d00 <_svfprintf_r+0x1464>)
  403c4c:	fb82 2103 	smull	r2, r1, r2, r3
  403c50:	17da      	asrs	r2, r3, #31
  403c52:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
  403c56:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  403c5a:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
  403c5e:	f103 0130 	add.w	r1, r3, #48	; 0x30
  403c62:	2a09      	cmp	r2, #9
  403c64:	4613      	mov	r3, r2
  403c66:	f804 1d01 	strb.w	r1, [r4, #-1]!
  403c6a:	dcee      	bgt.n	403c4a <_svfprintf_r+0x13ae>
  403c6c:	4621      	mov	r1, r4
  403c6e:	3330      	adds	r3, #48	; 0x30
  403c70:	b2da      	uxtb	r2, r3
  403c72:	f801 2d01 	strb.w	r2, [r1, #-1]!
  403c76:	4288      	cmp	r0, r1
  403c78:	f240 813a 	bls.w	403ef0 <_svfprintf_r+0x1654>
  403c7c:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
  403c80:	4623      	mov	r3, r4
  403c82:	e001      	b.n	403c88 <_svfprintf_r+0x13ec>
  403c84:	f813 2b01 	ldrb.w	r2, [r3], #1
  403c88:	f801 2b01 	strb.w	r2, [r1], #1
  403c8c:	4298      	cmp	r0, r3
  403c8e:	d1f9      	bne.n	403c84 <_svfprintf_r+0x13e8>
  403c90:	1c43      	adds	r3, r0, #1
  403c92:	1b1b      	subs	r3, r3, r4
  403c94:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  403c98:	4413      	add	r3, r2
  403c9a:	aa1f      	add	r2, sp, #124	; 0x7c
  403c9c:	1a9b      	subs	r3, r3, r2
  403c9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  403ca0:	9319      	str	r3, [sp, #100]	; 0x64
  403ca2:	2a01      	cmp	r2, #1
  403ca4:	4413      	add	r3, r2
  403ca6:	930d      	str	r3, [sp, #52]	; 0x34
  403ca8:	f340 80ea 	ble.w	403e80 <_svfprintf_r+0x15e4>
  403cac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403cae:	9a16      	ldr	r2, [sp, #88]	; 0x58
  403cb0:	4413      	add	r3, r2
  403cb2:	2200      	movs	r2, #0
  403cb4:	930d      	str	r3, [sp, #52]	; 0x34
  403cb6:	9213      	str	r2, [sp, #76]	; 0x4c
  403cb8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403cbc:	e62b      	b.n	403916 <_svfprintf_r+0x107a>
  403cbe:	aa23      	add	r2, sp, #140	; 0x8c
  403cc0:	9909      	ldr	r1, [sp, #36]	; 0x24
  403cc2:	980a      	ldr	r0, [sp, #40]	; 0x28
  403cc4:	f002 fb76 	bl	4063b4 <__ssprint_r>
  403cc8:	2800      	cmp	r0, #0
  403cca:	f47e aee0 	bne.w	402a8e <_svfprintf_r+0x1f2>
  403cce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  403cd0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403cd2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403cd6:	e4f6      	b.n	4036c6 <_svfprintf_r+0xe2a>
  403cd8:	2d06      	cmp	r5, #6
  403cda:	462b      	mov	r3, r5
  403cdc:	bf28      	it	cs
  403cde:	2306      	movcs	r3, #6
  403ce0:	930d      	str	r3, [sp, #52]	; 0x34
  403ce2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403ce6:	46b3      	mov	fp, r6
  403ce8:	970e      	str	r7, [sp, #56]	; 0x38
  403cea:	9613      	str	r6, [sp, #76]	; 0x4c
  403cec:	4637      	mov	r7, r6
  403cee:	9308      	str	r3, [sp, #32]
  403cf0:	4e04      	ldr	r6, [pc, #16]	; (403d04 <_svfprintf_r+0x1468>)
  403cf2:	f7fe bf99 	b.w	402c28 <_svfprintf_r+0x38c>
  403cf6:	bf00      	nop
  403cf8:	004067ec 	.word	0x004067ec
  403cfc:	0040679c 	.word	0x0040679c
  403d00:	66666667 	.word	0x66666667
  403d04:	004067e4 	.word	0x004067e4
  403d08:	aa23      	add	r2, sp, #140	; 0x8c
  403d0a:	9909      	ldr	r1, [sp, #36]	; 0x24
  403d0c:	980a      	ldr	r0, [sp, #40]	; 0x28
  403d0e:	f002 fb51 	bl	4063b4 <__ssprint_r>
  403d12:	2800      	cmp	r0, #0
  403d14:	f47e aebb 	bne.w	402a8e <_svfprintf_r+0x1f2>
  403d18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  403d1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  403d1c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403d1e:	1ad3      	subs	r3, r2, r3
  403d20:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403d24:	e4e7      	b.n	4036f6 <_svfprintf_r+0xe5a>
  403d26:	f04f 0b06 	mov.w	fp, #6
  403d2a:	e58f      	b.n	40384c <_svfprintf_r+0xfb0>
  403d2c:	a821      	add	r0, sp, #132	; 0x84
  403d2e:	a91e      	add	r1, sp, #120	; 0x78
  403d30:	9004      	str	r0, [sp, #16]
  403d32:	9103      	str	r1, [sp, #12]
  403d34:	a81d      	add	r0, sp, #116	; 0x74
  403d36:	2103      	movs	r1, #3
  403d38:	9002      	str	r0, [sp, #8]
  403d3a:	9a08      	ldr	r2, [sp, #32]
  403d3c:	f8cd b004 	str.w	fp, [sp, #4]
  403d40:	463b      	mov	r3, r7
  403d42:	9100      	str	r1, [sp, #0]
  403d44:	980a      	ldr	r0, [sp, #40]	; 0x28
  403d46:	f000 f99b 	bl	404080 <_dtoa_r>
  403d4a:	465d      	mov	r5, fp
  403d4c:	4606      	mov	r6, r0
  403d4e:	eb00 040b 	add.w	r4, r0, fp
  403d52:	e6f9      	b.n	403b48 <_svfprintf_r+0x12ac>
  403d54:	9307      	str	r3, [sp, #28]
  403d56:	f7ff b959 	b.w	40300c <_svfprintf_r+0x770>
  403d5a:	272d      	movs	r7, #45	; 0x2d
  403d5c:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  403d60:	f7ff b8b2 	b.w	402ec8 <_svfprintf_r+0x62c>
  403d64:	9a16      	ldr	r2, [sp, #88]	; 0x58
  403d66:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403d68:	4413      	add	r3, r2
  403d6a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  403d6c:	930d      	str	r3, [sp, #52]	; 0x34
  403d6e:	2a00      	cmp	r2, #0
  403d70:	dd7e      	ble.n	403e70 <_svfprintf_r+0x15d4>
  403d72:	2267      	movs	r2, #103	; 0x67
  403d74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403d78:	9211      	str	r2, [sp, #68]	; 0x44
  403d7a:	e5cc      	b.n	403916 <_svfprintf_r+0x107a>
  403d7c:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
  403d80:	970e      	str	r7, [sp, #56]	; 0x38
  403d82:	9308      	str	r3, [sp, #32]
  403d84:	950d      	str	r5, [sp, #52]	; 0x34
  403d86:	4683      	mov	fp, r0
  403d88:	9013      	str	r0, [sp, #76]	; 0x4c
  403d8a:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  403d8e:	f7fe bf4b 	b.w	402c28 <_svfprintf_r+0x38c>
  403d92:	9b07      	ldr	r3, [sp, #28]
  403d94:	07db      	lsls	r3, r3, #31
  403d96:	465f      	mov	r7, fp
  403d98:	d505      	bpl.n	403da6 <_svfprintf_r+0x150a>
  403d9a:	ae40      	add	r6, sp, #256	; 0x100
  403d9c:	2330      	movs	r3, #48	; 0x30
  403d9e:	f806 3d41 	strb.w	r3, [r6, #-65]!
  403da2:	f7fe bf37 	b.w	402c14 <_svfprintf_r+0x378>
  403da6:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  403daa:	ae30      	add	r6, sp, #192	; 0xc0
  403dac:	f7fe bf35 	b.w	402c1a <_svfprintf_r+0x37e>
  403db0:	2b00      	cmp	r3, #0
  403db2:	dd7d      	ble.n	403eb0 <_svfprintf_r+0x1614>
  403db4:	f1bb 0f00 	cmp.w	fp, #0
  403db8:	d13d      	bne.n	403e36 <_svfprintf_r+0x159a>
  403dba:	9a07      	ldr	r2, [sp, #28]
  403dbc:	07d4      	lsls	r4, r2, #31
  403dbe:	d43a      	bmi.n	403e36 <_svfprintf_r+0x159a>
  403dc0:	461a      	mov	r2, r3
  403dc2:	920d      	str	r2, [sp, #52]	; 0x34
  403dc4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403dc8:	e5a5      	b.n	403916 <_svfprintf_r+0x107a>
  403dca:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403dcc:	2b47      	cmp	r3, #71	; 0x47
  403dce:	f47f ad70 	bne.w	4038b2 <_svfprintf_r+0x1016>
  403dd2:	9b07      	ldr	r3, [sp, #28]
  403dd4:	07db      	lsls	r3, r3, #31
  403dd6:	f53f aeb1 	bmi.w	403b3c <_svfprintf_r+0x12a0>
  403dda:	9b21      	ldr	r3, [sp, #132]	; 0x84
  403ddc:	1b9b      	subs	r3, r3, r6
  403dde:	9312      	str	r3, [sp, #72]	; 0x48
  403de0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403de2:	2b47      	cmp	r3, #71	; 0x47
  403de4:	f43f aef8 	beq.w	403bd8 <_svfprintf_r+0x133c>
  403de8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  403dea:	e71a      	b.n	403c22 <_svfprintf_r+0x1386>
  403dec:	aa23      	add	r2, sp, #140	; 0x8c
  403dee:	9909      	ldr	r1, [sp, #36]	; 0x24
  403df0:	980a      	ldr	r0, [sp, #40]	; 0x28
  403df2:	f002 fadf 	bl	4063b4 <__ssprint_r>
  403df6:	2800      	cmp	r0, #0
  403df8:	f47e ae49 	bne.w	402a8e <_svfprintf_r+0x1f2>
  403dfc:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  403dfe:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403e00:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403e02:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403e06:	e631      	b.n	403a6c <_svfprintf_r+0x11d0>
  403e08:	46a0      	mov	r8, r4
  403e0a:	2500      	movs	r5, #0
  403e0c:	f7fe bda1 	b.w	402952 <_svfprintf_r+0xb6>
  403e10:	9b21      	ldr	r3, [sp, #132]	; 0x84
  403e12:	e562      	b.n	4038da <_svfprintf_r+0x103e>
  403e14:	9a16      	ldr	r2, [sp, #88]	; 0x58
  403e16:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403e18:	4413      	add	r3, r2
  403e1a:	2267      	movs	r2, #103	; 0x67
  403e1c:	930d      	str	r3, [sp, #52]	; 0x34
  403e1e:	9211      	str	r2, [sp, #68]	; 0x44
  403e20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403e24:	e577      	b.n	403916 <_svfprintf_r+0x107a>
  403e26:	3330      	adds	r3, #48	; 0x30
  403e28:	2230      	movs	r2, #48	; 0x30
  403e2a:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  403e2e:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  403e32:	ab20      	add	r3, sp, #128	; 0x80
  403e34:	e731      	b.n	403c9a <_svfprintf_r+0x13fe>
  403e36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403e38:	9a16      	ldr	r2, [sp, #88]	; 0x58
  403e3a:	189d      	adds	r5, r3, r2
  403e3c:	eb05 030b 	add.w	r3, r5, fp
  403e40:	930d      	str	r3, [sp, #52]	; 0x34
  403e42:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403e46:	e566      	b.n	403916 <_svfprintf_r+0x107a>
  403e48:	9808      	ldr	r0, [sp, #32]
  403e4a:	4639      	mov	r1, r7
  403e4c:	2200      	movs	r2, #0
  403e4e:	2300      	movs	r3, #0
  403e50:	f002 fc08 	bl	406664 <__aeabi_dcmpeq>
  403e54:	2800      	cmp	r0, #0
  403e56:	f47f ae7b 	bne.w	403b50 <_svfprintf_r+0x12b4>
  403e5a:	f1c5 0501 	rsb	r5, r5, #1
  403e5e:	951d      	str	r5, [sp, #116]	; 0x74
  403e60:	442c      	add	r4, r5
  403e62:	e527      	b.n	4038b4 <_svfprintf_r+0x1018>
  403e64:	4e32      	ldr	r6, [pc, #200]	; (403f30 <_svfprintf_r+0x1694>)
  403e66:	4b33      	ldr	r3, [pc, #204]	; (403f34 <_svfprintf_r+0x1698>)
  403e68:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  403e6c:	f7ff b82e 	b.w	402ecc <_svfprintf_r+0x630>
  403e70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403e72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403e74:	f1c3 0301 	rsb	r3, r3, #1
  403e78:	441a      	add	r2, r3
  403e7a:	4613      	mov	r3, r2
  403e7c:	920d      	str	r2, [sp, #52]	; 0x34
  403e7e:	e778      	b.n	403d72 <_svfprintf_r+0x14d6>
  403e80:	9b07      	ldr	r3, [sp, #28]
  403e82:	f013 0301 	ands.w	r3, r3, #1
  403e86:	f47f af11 	bne.w	403cac <_svfprintf_r+0x1410>
  403e8a:	9313      	str	r3, [sp, #76]	; 0x4c
  403e8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403e8e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403e92:	e540      	b.n	403916 <_svfprintf_r+0x107a>
  403e94:	980e      	ldr	r0, [sp, #56]	; 0x38
  403e96:	f898 3001 	ldrb.w	r3, [r8, #1]
  403e9a:	6805      	ldr	r5, [r0, #0]
  403e9c:	3004      	adds	r0, #4
  403e9e:	2d00      	cmp	r5, #0
  403ea0:	900e      	str	r0, [sp, #56]	; 0x38
  403ea2:	46a0      	mov	r8, r4
  403ea4:	f6be ad53 	bge.w	40294e <_svfprintf_r+0xb2>
  403ea8:	f04f 35ff 	mov.w	r5, #4294967295
  403eac:	f7fe bd4f 	b.w	40294e <_svfprintf_r+0xb2>
  403eb0:	f1bb 0f00 	cmp.w	fp, #0
  403eb4:	d102      	bne.n	403ebc <_svfprintf_r+0x1620>
  403eb6:	9b07      	ldr	r3, [sp, #28]
  403eb8:	07d8      	lsls	r0, r3, #31
  403eba:	d507      	bpl.n	403ecc <_svfprintf_r+0x1630>
  403ebc:	9b16      	ldr	r3, [sp, #88]	; 0x58
  403ebe:	1c5d      	adds	r5, r3, #1
  403ec0:	eb05 030b 	add.w	r3, r5, fp
  403ec4:	930d      	str	r3, [sp, #52]	; 0x34
  403ec6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403eca:	e524      	b.n	403916 <_svfprintf_r+0x107a>
  403ecc:	2301      	movs	r3, #1
  403ece:	930d      	str	r3, [sp, #52]	; 0x34
  403ed0:	e521      	b.n	403916 <_svfprintf_r+0x107a>
  403ed2:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  403ed6:	f7ff b921 	b.w	40311c <_svfprintf_r+0x880>
  403eda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403edc:	230c      	movs	r3, #12
  403ede:	6013      	str	r3, [r2, #0]
  403ee0:	f04f 30ff 	mov.w	r0, #4294967295
  403ee4:	f7fe bddc 	b.w	402aa0 <_svfprintf_r+0x204>
  403ee8:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  403eec:	f7ff b8f9 	b.w	4030e2 <_svfprintf_r+0x846>
  403ef0:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  403ef4:	e6d1      	b.n	403c9a <_svfprintf_r+0x13fe>
  403ef6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  403efa:	f7fe bdd9 	b.w	402ab0 <_svfprintf_r+0x214>
  403efe:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  403f02:	f7ff b857 	b.w	402fb4 <_svfprintf_r+0x718>
  403f06:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  403f0a:	f7ff b825 	b.w	402f58 <_svfprintf_r+0x6bc>
  403f0e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  403f12:	f7ff b94c 	b.w	4031ae <_svfprintf_r+0x912>
  403f16:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  403f1a:	f7fe bff3 	b.w	402f04 <_svfprintf_r+0x668>
  403f1e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  403f22:	f7fe bfa3 	b.w	402e6c <_svfprintf_r+0x5d0>
  403f26:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  403f2a:	f7fe be33 	b.w	402b94 <_svfprintf_r+0x2f8>
  403f2e:	bf00      	nop
  403f30:	004067b8 	.word	0x004067b8
  403f34:	004067b4 	.word	0x004067b4

00403f38 <register_fini>:
  403f38:	4b02      	ldr	r3, [pc, #8]	; (403f44 <register_fini+0xc>)
  403f3a:	b113      	cbz	r3, 403f42 <register_fini+0xa>
  403f3c:	4802      	ldr	r0, [pc, #8]	; (403f48 <register_fini+0x10>)
  403f3e:	f000 b805 	b.w	403f4c <atexit>
  403f42:	4770      	bx	lr
  403f44:	00000000 	.word	0x00000000
  403f48:	00404ed9 	.word	0x00404ed9

00403f4c <atexit>:
  403f4c:	2300      	movs	r3, #0
  403f4e:	4601      	mov	r1, r0
  403f50:	461a      	mov	r2, r3
  403f52:	4618      	mov	r0, r3
  403f54:	f002 baae 	b.w	4064b4 <__register_exitproc>

00403f58 <quorem>:
  403f58:	6902      	ldr	r2, [r0, #16]
  403f5a:	690b      	ldr	r3, [r1, #16]
  403f5c:	4293      	cmp	r3, r2
  403f5e:	f300 808d 	bgt.w	40407c <quorem+0x124>
  403f62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403f66:	f103 38ff 	add.w	r8, r3, #4294967295
  403f6a:	f101 0714 	add.w	r7, r1, #20
  403f6e:	f100 0b14 	add.w	fp, r0, #20
  403f72:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  403f76:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  403f7a:	ea4f 0488 	mov.w	r4, r8, lsl #2
  403f7e:	b083      	sub	sp, #12
  403f80:	3201      	adds	r2, #1
  403f82:	fbb3 f9f2 	udiv	r9, r3, r2
  403f86:	eb0b 0304 	add.w	r3, fp, r4
  403f8a:	9400      	str	r4, [sp, #0]
  403f8c:	eb07 0a04 	add.w	sl, r7, r4
  403f90:	9301      	str	r3, [sp, #4]
  403f92:	f1b9 0f00 	cmp.w	r9, #0
  403f96:	d039      	beq.n	40400c <quorem+0xb4>
  403f98:	2500      	movs	r5, #0
  403f9a:	46bc      	mov	ip, r7
  403f9c:	46de      	mov	lr, fp
  403f9e:	462b      	mov	r3, r5
  403fa0:	f85c 6b04 	ldr.w	r6, [ip], #4
  403fa4:	f8de 2000 	ldr.w	r2, [lr]
  403fa8:	b2b4      	uxth	r4, r6
  403faa:	fb09 5504 	mla	r5, r9, r4, r5
  403fae:	0c36      	lsrs	r6, r6, #16
  403fb0:	0c2c      	lsrs	r4, r5, #16
  403fb2:	fb09 4406 	mla	r4, r9, r6, r4
  403fb6:	b2ad      	uxth	r5, r5
  403fb8:	1b5b      	subs	r3, r3, r5
  403fba:	b2a6      	uxth	r6, r4
  403fbc:	fa13 f382 	uxtah	r3, r3, r2
  403fc0:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
  403fc4:	eb06 4623 	add.w	r6, r6, r3, asr #16
  403fc8:	b29b      	uxth	r3, r3
  403fca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  403fce:	45e2      	cmp	sl, ip
  403fd0:	f84e 3b04 	str.w	r3, [lr], #4
  403fd4:	ea4f 4514 	mov.w	r5, r4, lsr #16
  403fd8:	ea4f 4326 	mov.w	r3, r6, asr #16
  403fdc:	d2e0      	bcs.n	403fa0 <quorem+0x48>
  403fde:	9b00      	ldr	r3, [sp, #0]
  403fe0:	f85b 3003 	ldr.w	r3, [fp, r3]
  403fe4:	b993      	cbnz	r3, 40400c <quorem+0xb4>
  403fe6:	9c01      	ldr	r4, [sp, #4]
  403fe8:	1f23      	subs	r3, r4, #4
  403fea:	459b      	cmp	fp, r3
  403fec:	d20c      	bcs.n	404008 <quorem+0xb0>
  403fee:	f854 3c04 	ldr.w	r3, [r4, #-4]
  403ff2:	b94b      	cbnz	r3, 404008 <quorem+0xb0>
  403ff4:	f1a4 0308 	sub.w	r3, r4, #8
  403ff8:	e002      	b.n	404000 <quorem+0xa8>
  403ffa:	681a      	ldr	r2, [r3, #0]
  403ffc:	3b04      	subs	r3, #4
  403ffe:	b91a      	cbnz	r2, 404008 <quorem+0xb0>
  404000:	459b      	cmp	fp, r3
  404002:	f108 38ff 	add.w	r8, r8, #4294967295
  404006:	d3f8      	bcc.n	403ffa <quorem+0xa2>
  404008:	f8c0 8010 	str.w	r8, [r0, #16]
  40400c:	4604      	mov	r4, r0
  40400e:	f001 fec9 	bl	405da4 <__mcmp>
  404012:	2800      	cmp	r0, #0
  404014:	db2e      	blt.n	404074 <quorem+0x11c>
  404016:	f109 0901 	add.w	r9, r9, #1
  40401a:	465d      	mov	r5, fp
  40401c:	2300      	movs	r3, #0
  40401e:	f857 1b04 	ldr.w	r1, [r7], #4
  404022:	6828      	ldr	r0, [r5, #0]
  404024:	b28a      	uxth	r2, r1
  404026:	1a9a      	subs	r2, r3, r2
  404028:	0c09      	lsrs	r1, r1, #16
  40402a:	fa12 f280 	uxtah	r2, r2, r0
  40402e:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
  404032:	eb03 4322 	add.w	r3, r3, r2, asr #16
  404036:	b291      	uxth	r1, r2
  404038:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  40403c:	45ba      	cmp	sl, r7
  40403e:	f845 1b04 	str.w	r1, [r5], #4
  404042:	ea4f 4323 	mov.w	r3, r3, asr #16
  404046:	d2ea      	bcs.n	40401e <quorem+0xc6>
  404048:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  40404c:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  404050:	b982      	cbnz	r2, 404074 <quorem+0x11c>
  404052:	1f1a      	subs	r2, r3, #4
  404054:	4593      	cmp	fp, r2
  404056:	d20b      	bcs.n	404070 <quorem+0x118>
  404058:	f853 2c04 	ldr.w	r2, [r3, #-4]
  40405c:	b942      	cbnz	r2, 404070 <quorem+0x118>
  40405e:	3b08      	subs	r3, #8
  404060:	e002      	b.n	404068 <quorem+0x110>
  404062:	681a      	ldr	r2, [r3, #0]
  404064:	3b04      	subs	r3, #4
  404066:	b91a      	cbnz	r2, 404070 <quorem+0x118>
  404068:	459b      	cmp	fp, r3
  40406a:	f108 38ff 	add.w	r8, r8, #4294967295
  40406e:	d3f8      	bcc.n	404062 <quorem+0x10a>
  404070:	f8c4 8010 	str.w	r8, [r4, #16]
  404074:	4648      	mov	r0, r9
  404076:	b003      	add	sp, #12
  404078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40407c:	2000      	movs	r0, #0
  40407e:	4770      	bx	lr

00404080 <_dtoa_r>:
  404080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404084:	6c01      	ldr	r1, [r0, #64]	; 0x40
  404086:	b097      	sub	sp, #92	; 0x5c
  404088:	4681      	mov	r9, r0
  40408a:	9c23      	ldr	r4, [sp, #140]	; 0x8c
  40408c:	4692      	mov	sl, r2
  40408e:	469b      	mov	fp, r3
  404090:	b149      	cbz	r1, 4040a6 <_dtoa_r+0x26>
  404092:	6c42      	ldr	r2, [r0, #68]	; 0x44
  404094:	604a      	str	r2, [r1, #4]
  404096:	2301      	movs	r3, #1
  404098:	4093      	lsls	r3, r2
  40409a:	608b      	str	r3, [r1, #8]
  40409c:	f001 fca0 	bl	4059e0 <_Bfree>
  4040a0:	2300      	movs	r3, #0
  4040a2:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
  4040a6:	f1bb 0f00 	cmp.w	fp, #0
  4040aa:	46d8      	mov	r8, fp
  4040ac:	db33      	blt.n	404116 <_dtoa_r+0x96>
  4040ae:	2300      	movs	r3, #0
  4040b0:	6023      	str	r3, [r4, #0]
  4040b2:	4ba5      	ldr	r3, [pc, #660]	; (404348 <_dtoa_r+0x2c8>)
  4040b4:	461a      	mov	r2, r3
  4040b6:	ea08 0303 	and.w	r3, r8, r3
  4040ba:	4293      	cmp	r3, r2
  4040bc:	d014      	beq.n	4040e8 <_dtoa_r+0x68>
  4040be:	4650      	mov	r0, sl
  4040c0:	4659      	mov	r1, fp
  4040c2:	2200      	movs	r2, #0
  4040c4:	2300      	movs	r3, #0
  4040c6:	f002 facd 	bl	406664 <__aeabi_dcmpeq>
  4040ca:	4605      	mov	r5, r0
  4040cc:	b348      	cbz	r0, 404122 <_dtoa_r+0xa2>
  4040ce:	9a22      	ldr	r2, [sp, #136]	; 0x88
  4040d0:	2301      	movs	r3, #1
  4040d2:	6013      	str	r3, [r2, #0]
  4040d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4040d6:	2b00      	cmp	r3, #0
  4040d8:	f000 80c5 	beq.w	404266 <_dtoa_r+0x1e6>
  4040dc:	489b      	ldr	r0, [pc, #620]	; (40434c <_dtoa_r+0x2cc>)
  4040de:	6018      	str	r0, [r3, #0]
  4040e0:	3801      	subs	r0, #1
  4040e2:	b017      	add	sp, #92	; 0x5c
  4040e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4040e8:	9a22      	ldr	r2, [sp, #136]	; 0x88
  4040ea:	f242 730f 	movw	r3, #9999	; 0x270f
  4040ee:	6013      	str	r3, [r2, #0]
  4040f0:	f1ba 0f00 	cmp.w	sl, #0
  4040f4:	f000 80a2 	beq.w	40423c <_dtoa_r+0x1bc>
  4040f8:	4895      	ldr	r0, [pc, #596]	; (404350 <_dtoa_r+0x2d0>)
  4040fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4040fc:	2b00      	cmp	r3, #0
  4040fe:	d0f0      	beq.n	4040e2 <_dtoa_r+0x62>
  404100:	78c3      	ldrb	r3, [r0, #3]
  404102:	2b00      	cmp	r3, #0
  404104:	f000 80b1 	beq.w	40426a <_dtoa_r+0x1ea>
  404108:	f100 0308 	add.w	r3, r0, #8
  40410c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40410e:	6013      	str	r3, [r2, #0]
  404110:	b017      	add	sp, #92	; 0x5c
  404112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404116:	2301      	movs	r3, #1
  404118:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
  40411c:	6023      	str	r3, [r4, #0]
  40411e:	46c3      	mov	fp, r8
  404120:	e7c7      	b.n	4040b2 <_dtoa_r+0x32>
  404122:	aa14      	add	r2, sp, #80	; 0x50
  404124:	ab15      	add	r3, sp, #84	; 0x54
  404126:	9201      	str	r2, [sp, #4]
  404128:	9300      	str	r3, [sp, #0]
  40412a:	4652      	mov	r2, sl
  40412c:	465b      	mov	r3, fp
  40412e:	4648      	mov	r0, r9
  404130:	f001 fee2 	bl	405ef8 <__d2b>
  404134:	ea5f 5418 	movs.w	r4, r8, lsr #20
  404138:	9008      	str	r0, [sp, #32]
  40413a:	f040 8088 	bne.w	40424e <_dtoa_r+0x1ce>
  40413e:	9d14      	ldr	r5, [sp, #80]	; 0x50
  404140:	9c15      	ldr	r4, [sp, #84]	; 0x54
  404142:	442c      	add	r4, r5
  404144:	f204 4332 	addw	r3, r4, #1074	; 0x432
  404148:	2b20      	cmp	r3, #32
  40414a:	f340 8291 	ble.w	404670 <_dtoa_r+0x5f0>
  40414e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  404152:	f204 4012 	addw	r0, r4, #1042	; 0x412
  404156:	fa08 f803 	lsl.w	r8, r8, r3
  40415a:	fa2a f000 	lsr.w	r0, sl, r0
  40415e:	ea40 0008 	orr.w	r0, r0, r8
  404162:	f7fd fe71 	bl	401e48 <__aeabi_ui2d>
  404166:	2301      	movs	r3, #1
  404168:	3c01      	subs	r4, #1
  40416a:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40416e:	9310      	str	r3, [sp, #64]	; 0x40
  404170:	2200      	movs	r2, #0
  404172:	4b78      	ldr	r3, [pc, #480]	; (404354 <_dtoa_r+0x2d4>)
  404174:	f7fd fd2a 	bl	401bcc <__aeabi_dsub>
  404178:	a36d      	add	r3, pc, #436	; (adr r3, 404330 <_dtoa_r+0x2b0>)
  40417a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40417e:	f7fd fed9 	bl	401f34 <__aeabi_dmul>
  404182:	a36d      	add	r3, pc, #436	; (adr r3, 404338 <_dtoa_r+0x2b8>)
  404184:	e9d3 2300 	ldrd	r2, r3, [r3]
  404188:	f7fd fd22 	bl	401bd0 <__adddf3>
  40418c:	4606      	mov	r6, r0
  40418e:	4620      	mov	r0, r4
  404190:	460f      	mov	r7, r1
  404192:	f7fd fe69 	bl	401e68 <__aeabi_i2d>
  404196:	a36a      	add	r3, pc, #424	; (adr r3, 404340 <_dtoa_r+0x2c0>)
  404198:	e9d3 2300 	ldrd	r2, r3, [r3]
  40419c:	f7fd feca 	bl	401f34 <__aeabi_dmul>
  4041a0:	4602      	mov	r2, r0
  4041a2:	460b      	mov	r3, r1
  4041a4:	4630      	mov	r0, r6
  4041a6:	4639      	mov	r1, r7
  4041a8:	f7fd fd12 	bl	401bd0 <__adddf3>
  4041ac:	4606      	mov	r6, r0
  4041ae:	460f      	mov	r7, r1
  4041b0:	f002 faa0 	bl	4066f4 <__aeabi_d2iz>
  4041b4:	2200      	movs	r2, #0
  4041b6:	9004      	str	r0, [sp, #16]
  4041b8:	2300      	movs	r3, #0
  4041ba:	4630      	mov	r0, r6
  4041bc:	4639      	mov	r1, r7
  4041be:	f002 fa5b 	bl	406678 <__aeabi_dcmplt>
  4041c2:	2800      	cmp	r0, #0
  4041c4:	f040 8230 	bne.w	404628 <_dtoa_r+0x5a8>
  4041c8:	9e04      	ldr	r6, [sp, #16]
  4041ca:	2e16      	cmp	r6, #22
  4041cc:	f200 8229 	bhi.w	404622 <_dtoa_r+0x5a2>
  4041d0:	4b61      	ldr	r3, [pc, #388]	; (404358 <_dtoa_r+0x2d8>)
  4041d2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  4041d6:	e9d3 0100 	ldrd	r0, r1, [r3]
  4041da:	4652      	mov	r2, sl
  4041dc:	465b      	mov	r3, fp
  4041de:	f002 fa69 	bl	4066b4 <__aeabi_dcmpgt>
  4041e2:	2800      	cmp	r0, #0
  4041e4:	f000 8249 	beq.w	40467a <_dtoa_r+0x5fa>
  4041e8:	1e73      	subs	r3, r6, #1
  4041ea:	9304      	str	r3, [sp, #16]
  4041ec:	2300      	movs	r3, #0
  4041ee:	930c      	str	r3, [sp, #48]	; 0x30
  4041f0:	1b2c      	subs	r4, r5, r4
  4041f2:	1e63      	subs	r3, r4, #1
  4041f4:	9302      	str	r3, [sp, #8]
  4041f6:	f100 8232 	bmi.w	40465e <_dtoa_r+0x5de>
  4041fa:	2300      	movs	r3, #0
  4041fc:	9305      	str	r3, [sp, #20]
  4041fe:	9b04      	ldr	r3, [sp, #16]
  404200:	2b00      	cmp	r3, #0
  404202:	f2c0 8223 	blt.w	40464c <_dtoa_r+0x5cc>
  404206:	9a02      	ldr	r2, [sp, #8]
  404208:	930b      	str	r3, [sp, #44]	; 0x2c
  40420a:	4611      	mov	r1, r2
  40420c:	4419      	add	r1, r3
  40420e:	2300      	movs	r3, #0
  404210:	9102      	str	r1, [sp, #8]
  404212:	930a      	str	r3, [sp, #40]	; 0x28
  404214:	9b20      	ldr	r3, [sp, #128]	; 0x80
  404216:	2b09      	cmp	r3, #9
  404218:	d829      	bhi.n	40426e <_dtoa_r+0x1ee>
  40421a:	2b05      	cmp	r3, #5
  40421c:	f340 8658 	ble.w	404ed0 <_dtoa_r+0xe50>
  404220:	3b04      	subs	r3, #4
  404222:	9320      	str	r3, [sp, #128]	; 0x80
  404224:	2500      	movs	r5, #0
  404226:	9b20      	ldr	r3, [sp, #128]	; 0x80
  404228:	3b02      	subs	r3, #2
  40422a:	2b03      	cmp	r3, #3
  40422c:	f200 8635 	bhi.w	404e9a <_dtoa_r+0xe1a>
  404230:	e8df f013 	tbh	[pc, r3, lsl #1]
  404234:	0228032c 	.word	0x0228032c
  404238:	04590337 	.word	0x04590337
  40423c:	4b44      	ldr	r3, [pc, #272]	; (404350 <_dtoa_r+0x2d0>)
  40423e:	4a47      	ldr	r2, [pc, #284]	; (40435c <_dtoa_r+0x2dc>)
  404240:	f3c8 0013 	ubfx	r0, r8, #0, #20
  404244:	2800      	cmp	r0, #0
  404246:	bf14      	ite	ne
  404248:	4618      	movne	r0, r3
  40424a:	4610      	moveq	r0, r2
  40424c:	e755      	b.n	4040fa <_dtoa_r+0x7a>
  40424e:	f3cb 0313 	ubfx	r3, fp, #0, #20
  404252:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  404256:	9510      	str	r5, [sp, #64]	; 0x40
  404258:	4650      	mov	r0, sl
  40425a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
  40425e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  404262:	9d14      	ldr	r5, [sp, #80]	; 0x50
  404264:	e784      	b.n	404170 <_dtoa_r+0xf0>
  404266:	483e      	ldr	r0, [pc, #248]	; (404360 <_dtoa_r+0x2e0>)
  404268:	e73b      	b.n	4040e2 <_dtoa_r+0x62>
  40426a:	1cc3      	adds	r3, r0, #3
  40426c:	e74e      	b.n	40410c <_dtoa_r+0x8c>
  40426e:	2100      	movs	r1, #0
  404270:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  404274:	4648      	mov	r0, r9
  404276:	9120      	str	r1, [sp, #128]	; 0x80
  404278:	f001 fb8c 	bl	405994 <_Balloc>
  40427c:	f04f 33ff 	mov.w	r3, #4294967295
  404280:	9306      	str	r3, [sp, #24]
  404282:	9a20      	ldr	r2, [sp, #128]	; 0x80
  404284:	930d      	str	r3, [sp, #52]	; 0x34
  404286:	2301      	movs	r3, #1
  404288:	9007      	str	r0, [sp, #28]
  40428a:	9221      	str	r2, [sp, #132]	; 0x84
  40428c:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  404290:	9309      	str	r3, [sp, #36]	; 0x24
  404292:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404294:	2b00      	cmp	r3, #0
  404296:	f2c0 80d1 	blt.w	40443c <_dtoa_r+0x3bc>
  40429a:	9a04      	ldr	r2, [sp, #16]
  40429c:	2a0e      	cmp	r2, #14
  40429e:	f300 80cd 	bgt.w	40443c <_dtoa_r+0x3bc>
  4042a2:	4b2d      	ldr	r3, [pc, #180]	; (404358 <_dtoa_r+0x2d8>)
  4042a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4042a8:	e9d3 3400 	ldrd	r3, r4, [r3]
  4042ac:	e9cd 3402 	strd	r3, r4, [sp, #8]
  4042b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4042b2:	2b00      	cmp	r3, #0
  4042b4:	f2c0 8300 	blt.w	4048b8 <_dtoa_r+0x838>
  4042b8:	4656      	mov	r6, sl
  4042ba:	465f      	mov	r7, fp
  4042bc:	4650      	mov	r0, sl
  4042be:	4659      	mov	r1, fp
  4042c0:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  4042c4:	4652      	mov	r2, sl
  4042c6:	465b      	mov	r3, fp
  4042c8:	f7fd ff5e 	bl	402188 <__aeabi_ddiv>
  4042cc:	f002 fa12 	bl	4066f4 <__aeabi_d2iz>
  4042d0:	4604      	mov	r4, r0
  4042d2:	f7fd fdc9 	bl	401e68 <__aeabi_i2d>
  4042d6:	4652      	mov	r2, sl
  4042d8:	465b      	mov	r3, fp
  4042da:	f7fd fe2b 	bl	401f34 <__aeabi_dmul>
  4042de:	460b      	mov	r3, r1
  4042e0:	4602      	mov	r2, r0
  4042e2:	4639      	mov	r1, r7
  4042e4:	4630      	mov	r0, r6
  4042e6:	f7fd fc71 	bl	401bcc <__aeabi_dsub>
  4042ea:	9d07      	ldr	r5, [sp, #28]
  4042ec:	f104 0330 	add.w	r3, r4, #48	; 0x30
  4042f0:	702b      	strb	r3, [r5, #0]
  4042f2:	9b06      	ldr	r3, [sp, #24]
  4042f4:	2b01      	cmp	r3, #1
  4042f6:	4606      	mov	r6, r0
  4042f8:	460f      	mov	r7, r1
  4042fa:	f105 0501 	add.w	r5, r5, #1
  4042fe:	d062      	beq.n	4043c6 <_dtoa_r+0x346>
  404300:	2200      	movs	r2, #0
  404302:	4b18      	ldr	r3, [pc, #96]	; (404364 <_dtoa_r+0x2e4>)
  404304:	f7fd fe16 	bl	401f34 <__aeabi_dmul>
  404308:	2200      	movs	r2, #0
  40430a:	2300      	movs	r3, #0
  40430c:	4606      	mov	r6, r0
  40430e:	460f      	mov	r7, r1
  404310:	f002 f9a8 	bl	406664 <__aeabi_dcmpeq>
  404314:	2800      	cmp	r0, #0
  404316:	d17e      	bne.n	404416 <_dtoa_r+0x396>
  404318:	f8cd 9014 	str.w	r9, [sp, #20]
  40431c:	f8dd a018 	ldr.w	sl, [sp, #24]
  404320:	f8dd b01c 	ldr.w	fp, [sp, #28]
  404324:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  404328:	e029      	b.n	40437e <_dtoa_r+0x2fe>
  40432a:	bf00      	nop
  40432c:	f3af 8000 	nop.w
  404330:	636f4361 	.word	0x636f4361
  404334:	3fd287a7 	.word	0x3fd287a7
  404338:	8b60c8b3 	.word	0x8b60c8b3
  40433c:	3fc68a28 	.word	0x3fc68a28
  404340:	509f79fb 	.word	0x509f79fb
  404344:	3fd34413 	.word	0x3fd34413
  404348:	7ff00000 	.word	0x7ff00000
  40434c:	004067ed 	.word	0x004067ed
  404350:	0040680c 	.word	0x0040680c
  404354:	3ff80000 	.word	0x3ff80000
  404358:	00406820 	.word	0x00406820
  40435c:	00406800 	.word	0x00406800
  404360:	004067ec 	.word	0x004067ec
  404364:	40240000 	.word	0x40240000
  404368:	f7fd fde4 	bl	401f34 <__aeabi_dmul>
  40436c:	2200      	movs	r2, #0
  40436e:	2300      	movs	r3, #0
  404370:	4606      	mov	r6, r0
  404372:	460f      	mov	r7, r1
  404374:	f002 f976 	bl	406664 <__aeabi_dcmpeq>
  404378:	2800      	cmp	r0, #0
  40437a:	f040 83b7 	bne.w	404aec <_dtoa_r+0xa6c>
  40437e:	4642      	mov	r2, r8
  404380:	464b      	mov	r3, r9
  404382:	4630      	mov	r0, r6
  404384:	4639      	mov	r1, r7
  404386:	f7fd feff 	bl	402188 <__aeabi_ddiv>
  40438a:	f002 f9b3 	bl	4066f4 <__aeabi_d2iz>
  40438e:	4604      	mov	r4, r0
  404390:	f7fd fd6a 	bl	401e68 <__aeabi_i2d>
  404394:	4642      	mov	r2, r8
  404396:	464b      	mov	r3, r9
  404398:	f7fd fdcc 	bl	401f34 <__aeabi_dmul>
  40439c:	4602      	mov	r2, r0
  40439e:	460b      	mov	r3, r1
  4043a0:	4630      	mov	r0, r6
  4043a2:	4639      	mov	r1, r7
  4043a4:	f7fd fc12 	bl	401bcc <__aeabi_dsub>
  4043a8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  4043ac:	f805 eb01 	strb.w	lr, [r5], #1
  4043b0:	ebcb 0e05 	rsb	lr, fp, r5
  4043b4:	45d6      	cmp	lr, sl
  4043b6:	4606      	mov	r6, r0
  4043b8:	460f      	mov	r7, r1
  4043ba:	f04f 0200 	mov.w	r2, #0
  4043be:	4bb0      	ldr	r3, [pc, #704]	; (404680 <_dtoa_r+0x600>)
  4043c0:	d1d2      	bne.n	404368 <_dtoa_r+0x2e8>
  4043c2:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4043c6:	4632      	mov	r2, r6
  4043c8:	463b      	mov	r3, r7
  4043ca:	4630      	mov	r0, r6
  4043cc:	4639      	mov	r1, r7
  4043ce:	f7fd fbff 	bl	401bd0 <__adddf3>
  4043d2:	4606      	mov	r6, r0
  4043d4:	460f      	mov	r7, r1
  4043d6:	4602      	mov	r2, r0
  4043d8:	460b      	mov	r3, r1
  4043da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4043de:	f002 f94b 	bl	406678 <__aeabi_dcmplt>
  4043e2:	b940      	cbnz	r0, 4043f6 <_dtoa_r+0x376>
  4043e4:	4632      	mov	r2, r6
  4043e6:	463b      	mov	r3, r7
  4043e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4043ec:	f002 f93a 	bl	406664 <__aeabi_dcmpeq>
  4043f0:	b188      	cbz	r0, 404416 <_dtoa_r+0x396>
  4043f2:	07e3      	lsls	r3, r4, #31
  4043f4:	d50f      	bpl.n	404416 <_dtoa_r+0x396>
  4043f6:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  4043fa:	9a07      	ldr	r2, [sp, #28]
  4043fc:	1e6b      	subs	r3, r5, #1
  4043fe:	e004      	b.n	40440a <_dtoa_r+0x38a>
  404400:	429a      	cmp	r2, r3
  404402:	f000 842c 	beq.w	404c5e <_dtoa_r+0xbde>
  404406:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40440a:	2c39      	cmp	r4, #57	; 0x39
  40440c:	f103 0501 	add.w	r5, r3, #1
  404410:	d0f6      	beq.n	404400 <_dtoa_r+0x380>
  404412:	3401      	adds	r4, #1
  404414:	701c      	strb	r4, [r3, #0]
  404416:	9908      	ldr	r1, [sp, #32]
  404418:	4648      	mov	r0, r9
  40441a:	f001 fae1 	bl	4059e0 <_Bfree>
  40441e:	2200      	movs	r2, #0
  404420:	9b04      	ldr	r3, [sp, #16]
  404422:	702a      	strb	r2, [r5, #0]
  404424:	9a22      	ldr	r2, [sp, #136]	; 0x88
  404426:	3301      	adds	r3, #1
  404428:	6013      	str	r3, [r2, #0]
  40442a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40442c:	2b00      	cmp	r3, #0
  40442e:	f000 83a7 	beq.w	404b80 <_dtoa_r+0xb00>
  404432:	9807      	ldr	r0, [sp, #28]
  404434:	601d      	str	r5, [r3, #0]
  404436:	b017      	add	sp, #92	; 0x5c
  404438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40443c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40443e:	2a00      	cmp	r2, #0
  404440:	f000 8112 	beq.w	404668 <_dtoa_r+0x5e8>
  404444:	9a20      	ldr	r2, [sp, #128]	; 0x80
  404446:	2a01      	cmp	r2, #1
  404448:	f340 8258 	ble.w	4048fc <_dtoa_r+0x87c>
  40444c:	9b06      	ldr	r3, [sp, #24]
  40444e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404450:	1e5f      	subs	r7, r3, #1
  404452:	42ba      	cmp	r2, r7
  404454:	f2c0 8397 	blt.w	404b86 <_dtoa_r+0xb06>
  404458:	1bd7      	subs	r7, r2, r7
  40445a:	9b06      	ldr	r3, [sp, #24]
  40445c:	2b00      	cmp	r3, #0
  40445e:	f2c0 848a 	blt.w	404d76 <_dtoa_r+0xcf6>
  404462:	9d05      	ldr	r5, [sp, #20]
  404464:	9b06      	ldr	r3, [sp, #24]
  404466:	9a05      	ldr	r2, [sp, #20]
  404468:	441a      	add	r2, r3
  40446a:	9205      	str	r2, [sp, #20]
  40446c:	9a02      	ldr	r2, [sp, #8]
  40446e:	2101      	movs	r1, #1
  404470:	441a      	add	r2, r3
  404472:	4648      	mov	r0, r9
  404474:	9202      	str	r2, [sp, #8]
  404476:	f001 fb4b 	bl	405b10 <__i2b>
  40447a:	4606      	mov	r6, r0
  40447c:	b165      	cbz	r5, 404498 <_dtoa_r+0x418>
  40447e:	9902      	ldr	r1, [sp, #8]
  404480:	2900      	cmp	r1, #0
  404482:	460b      	mov	r3, r1
  404484:	dd08      	ble.n	404498 <_dtoa_r+0x418>
  404486:	42a9      	cmp	r1, r5
  404488:	9a05      	ldr	r2, [sp, #20]
  40448a:	bfa8      	it	ge
  40448c:	462b      	movge	r3, r5
  40448e:	1ad2      	subs	r2, r2, r3
  404490:	1aed      	subs	r5, r5, r3
  404492:	1acb      	subs	r3, r1, r3
  404494:	9205      	str	r2, [sp, #20]
  404496:	9302      	str	r3, [sp, #8]
  404498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40449a:	2b00      	cmp	r3, #0
  40449c:	f340 82fc 	ble.w	404a98 <_dtoa_r+0xa18>
  4044a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4044a2:	2a00      	cmp	r2, #0
  4044a4:	f000 8201 	beq.w	4048aa <_dtoa_r+0x82a>
  4044a8:	2f00      	cmp	r7, #0
  4044aa:	f000 81fe 	beq.w	4048aa <_dtoa_r+0x82a>
  4044ae:	4631      	mov	r1, r6
  4044b0:	463a      	mov	r2, r7
  4044b2:	4648      	mov	r0, r9
  4044b4:	f001 fbce 	bl	405c54 <__pow5mult>
  4044b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
  4044bc:	4601      	mov	r1, r0
  4044be:	4642      	mov	r2, r8
  4044c0:	4606      	mov	r6, r0
  4044c2:	4648      	mov	r0, r9
  4044c4:	f001 fb2e 	bl	405b24 <__multiply>
  4044c8:	4641      	mov	r1, r8
  4044ca:	4604      	mov	r4, r0
  4044cc:	4648      	mov	r0, r9
  4044ce:	f001 fa87 	bl	4059e0 <_Bfree>
  4044d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4044d4:	1bdb      	subs	r3, r3, r7
  4044d6:	930a      	str	r3, [sp, #40]	; 0x28
  4044d8:	f040 81e6 	bne.w	4048a8 <_dtoa_r+0x828>
  4044dc:	2101      	movs	r1, #1
  4044de:	4648      	mov	r0, r9
  4044e0:	f001 fb16 	bl	405b10 <__i2b>
  4044e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4044e6:	4680      	mov	r8, r0
  4044e8:	2b00      	cmp	r3, #0
  4044ea:	f000 8219 	beq.w	404920 <_dtoa_r+0x8a0>
  4044ee:	4601      	mov	r1, r0
  4044f0:	461a      	mov	r2, r3
  4044f2:	4648      	mov	r0, r9
  4044f4:	f001 fbae 	bl	405c54 <__pow5mult>
  4044f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
  4044fa:	2b01      	cmp	r3, #1
  4044fc:	4680      	mov	r8, r0
  4044fe:	f340 82f8 	ble.w	404af2 <_dtoa_r+0xa72>
  404502:	2700      	movs	r7, #0
  404504:	f8d8 3010 	ldr.w	r3, [r8, #16]
  404508:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  40450c:	6918      	ldr	r0, [r3, #16]
  40450e:	f001 fab1 	bl	405a74 <__hi0bits>
  404512:	f1c0 0020 	rsb	r0, r0, #32
  404516:	9a02      	ldr	r2, [sp, #8]
  404518:	4410      	add	r0, r2
  40451a:	f010 001f 	ands.w	r0, r0, #31
  40451e:	f000 81f6 	beq.w	40490e <_dtoa_r+0x88e>
  404522:	f1c0 0320 	rsb	r3, r0, #32
  404526:	2b04      	cmp	r3, #4
  404528:	f340 84ca 	ble.w	404ec0 <_dtoa_r+0xe40>
  40452c:	9b05      	ldr	r3, [sp, #20]
  40452e:	f1c0 001c 	rsb	r0, r0, #28
  404532:	4403      	add	r3, r0
  404534:	9305      	str	r3, [sp, #20]
  404536:	4613      	mov	r3, r2
  404538:	4403      	add	r3, r0
  40453a:	4405      	add	r5, r0
  40453c:	9302      	str	r3, [sp, #8]
  40453e:	9b05      	ldr	r3, [sp, #20]
  404540:	2b00      	cmp	r3, #0
  404542:	dd05      	ble.n	404550 <_dtoa_r+0x4d0>
  404544:	4621      	mov	r1, r4
  404546:	461a      	mov	r2, r3
  404548:	4648      	mov	r0, r9
  40454a:	f001 fbd3 	bl	405cf4 <__lshift>
  40454e:	4604      	mov	r4, r0
  404550:	9b02      	ldr	r3, [sp, #8]
  404552:	2b00      	cmp	r3, #0
  404554:	dd05      	ble.n	404562 <_dtoa_r+0x4e2>
  404556:	4641      	mov	r1, r8
  404558:	461a      	mov	r2, r3
  40455a:	4648      	mov	r0, r9
  40455c:	f001 fbca 	bl	405cf4 <__lshift>
  404560:	4680      	mov	r8, r0
  404562:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404564:	2b00      	cmp	r3, #0
  404566:	f040 827c 	bne.w	404a62 <_dtoa_r+0x9e2>
  40456a:	9b06      	ldr	r3, [sp, #24]
  40456c:	2b00      	cmp	r3, #0
  40456e:	f340 8295 	ble.w	404a9c <_dtoa_r+0xa1c>
  404572:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404574:	2b00      	cmp	r3, #0
  404576:	f040 81f5 	bne.w	404964 <_dtoa_r+0x8e4>
  40457a:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40457e:	9f06      	ldr	r7, [sp, #24]
  404580:	465d      	mov	r5, fp
  404582:	e002      	b.n	40458a <_dtoa_r+0x50a>
  404584:	f001 fa36 	bl	4059f4 <__multadd>
  404588:	4604      	mov	r4, r0
  40458a:	4641      	mov	r1, r8
  40458c:	4620      	mov	r0, r4
  40458e:	f7ff fce3 	bl	403f58 <quorem>
  404592:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  404596:	f805 ab01 	strb.w	sl, [r5], #1
  40459a:	ebcb 0305 	rsb	r3, fp, r5
  40459e:	42bb      	cmp	r3, r7
  4045a0:	f04f 020a 	mov.w	r2, #10
  4045a4:	f04f 0300 	mov.w	r3, #0
  4045a8:	4621      	mov	r1, r4
  4045aa:	4648      	mov	r0, r9
  4045ac:	dbea      	blt.n	404584 <_dtoa_r+0x504>
  4045ae:	9b07      	ldr	r3, [sp, #28]
  4045b0:	9a06      	ldr	r2, [sp, #24]
  4045b2:	2a01      	cmp	r2, #1
  4045b4:	bfac      	ite	ge
  4045b6:	189b      	addge	r3, r3, r2
  4045b8:	3301      	addlt	r3, #1
  4045ba:	461d      	mov	r5, r3
  4045bc:	f04f 0b00 	mov.w	fp, #0
  4045c0:	4621      	mov	r1, r4
  4045c2:	2201      	movs	r2, #1
  4045c4:	4648      	mov	r0, r9
  4045c6:	f001 fb95 	bl	405cf4 <__lshift>
  4045ca:	4641      	mov	r1, r8
  4045cc:	9008      	str	r0, [sp, #32]
  4045ce:	f001 fbe9 	bl	405da4 <__mcmp>
  4045d2:	2800      	cmp	r0, #0
  4045d4:	f340 830d 	ble.w	404bf2 <_dtoa_r+0xb72>
  4045d8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  4045dc:	9907      	ldr	r1, [sp, #28]
  4045de:	1e6b      	subs	r3, r5, #1
  4045e0:	e004      	b.n	4045ec <_dtoa_r+0x56c>
  4045e2:	428b      	cmp	r3, r1
  4045e4:	f000 8278 	beq.w	404ad8 <_dtoa_r+0xa58>
  4045e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  4045ec:	2a39      	cmp	r2, #57	; 0x39
  4045ee:	f103 0501 	add.w	r5, r3, #1
  4045f2:	d0f6      	beq.n	4045e2 <_dtoa_r+0x562>
  4045f4:	3201      	adds	r2, #1
  4045f6:	701a      	strb	r2, [r3, #0]
  4045f8:	4641      	mov	r1, r8
  4045fa:	4648      	mov	r0, r9
  4045fc:	f001 f9f0 	bl	4059e0 <_Bfree>
  404600:	2e00      	cmp	r6, #0
  404602:	f43f af08 	beq.w	404416 <_dtoa_r+0x396>
  404606:	f1bb 0f00 	cmp.w	fp, #0
  40460a:	d005      	beq.n	404618 <_dtoa_r+0x598>
  40460c:	45b3      	cmp	fp, r6
  40460e:	d003      	beq.n	404618 <_dtoa_r+0x598>
  404610:	4659      	mov	r1, fp
  404612:	4648      	mov	r0, r9
  404614:	f001 f9e4 	bl	4059e0 <_Bfree>
  404618:	4631      	mov	r1, r6
  40461a:	4648      	mov	r0, r9
  40461c:	f001 f9e0 	bl	4059e0 <_Bfree>
  404620:	e6f9      	b.n	404416 <_dtoa_r+0x396>
  404622:	2301      	movs	r3, #1
  404624:	930c      	str	r3, [sp, #48]	; 0x30
  404626:	e5e3      	b.n	4041f0 <_dtoa_r+0x170>
  404628:	f8dd 8010 	ldr.w	r8, [sp, #16]
  40462c:	4640      	mov	r0, r8
  40462e:	f7fd fc1b 	bl	401e68 <__aeabi_i2d>
  404632:	4602      	mov	r2, r0
  404634:	460b      	mov	r3, r1
  404636:	4630      	mov	r0, r6
  404638:	4639      	mov	r1, r7
  40463a:	f002 f813 	bl	406664 <__aeabi_dcmpeq>
  40463e:	2800      	cmp	r0, #0
  404640:	f47f adc2 	bne.w	4041c8 <_dtoa_r+0x148>
  404644:	f108 33ff 	add.w	r3, r8, #4294967295
  404648:	9304      	str	r3, [sp, #16]
  40464a:	e5bd      	b.n	4041c8 <_dtoa_r+0x148>
  40464c:	9a05      	ldr	r2, [sp, #20]
  40464e:	9b04      	ldr	r3, [sp, #16]
  404650:	1ad2      	subs	r2, r2, r3
  404652:	425b      	negs	r3, r3
  404654:	930a      	str	r3, [sp, #40]	; 0x28
  404656:	2300      	movs	r3, #0
  404658:	9205      	str	r2, [sp, #20]
  40465a:	930b      	str	r3, [sp, #44]	; 0x2c
  40465c:	e5da      	b.n	404214 <_dtoa_r+0x194>
  40465e:	425b      	negs	r3, r3
  404660:	9305      	str	r3, [sp, #20]
  404662:	2300      	movs	r3, #0
  404664:	9302      	str	r3, [sp, #8]
  404666:	e5ca      	b.n	4041fe <_dtoa_r+0x17e>
  404668:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40466a:	9d05      	ldr	r5, [sp, #20]
  40466c:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40466e:	e705      	b.n	40447c <_dtoa_r+0x3fc>
  404670:	f1c3 0820 	rsb	r8, r3, #32
  404674:	fa0a f008 	lsl.w	r0, sl, r8
  404678:	e573      	b.n	404162 <_dtoa_r+0xe2>
  40467a:	900c      	str	r0, [sp, #48]	; 0x30
  40467c:	e5b8      	b.n	4041f0 <_dtoa_r+0x170>
  40467e:	bf00      	nop
  404680:	40240000 	.word	0x40240000
  404684:	2300      	movs	r3, #0
  404686:	9309      	str	r3, [sp, #36]	; 0x24
  404688:	9b04      	ldr	r3, [sp, #16]
  40468a:	9a21      	ldr	r2, [sp, #132]	; 0x84
  40468c:	4413      	add	r3, r2
  40468e:	930d      	str	r3, [sp, #52]	; 0x34
  404690:	3301      	adds	r3, #1
  404692:	2b00      	cmp	r3, #0
  404694:	9306      	str	r3, [sp, #24]
  404696:	f340 8283 	ble.w	404ba0 <_dtoa_r+0xb20>
  40469a:	9c06      	ldr	r4, [sp, #24]
  40469c:	4626      	mov	r6, r4
  40469e:	2100      	movs	r1, #0
  4046a0:	2e17      	cmp	r6, #23
  4046a2:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  4046a6:	d90b      	bls.n	4046c0 <_dtoa_r+0x640>
  4046a8:	2201      	movs	r2, #1
  4046aa:	2304      	movs	r3, #4
  4046ac:	005b      	lsls	r3, r3, #1
  4046ae:	f103 0014 	add.w	r0, r3, #20
  4046b2:	42b0      	cmp	r0, r6
  4046b4:	4611      	mov	r1, r2
  4046b6:	f102 0201 	add.w	r2, r2, #1
  4046ba:	d9f7      	bls.n	4046ac <_dtoa_r+0x62c>
  4046bc:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  4046c0:	4648      	mov	r0, r9
  4046c2:	f001 f967 	bl	405994 <_Balloc>
  4046c6:	2c0e      	cmp	r4, #14
  4046c8:	9007      	str	r0, [sp, #28]
  4046ca:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  4046ce:	f63f ade0 	bhi.w	404292 <_dtoa_r+0x212>
  4046d2:	2d00      	cmp	r5, #0
  4046d4:	f43f addd 	beq.w	404292 <_dtoa_r+0x212>
  4046d8:	9904      	ldr	r1, [sp, #16]
  4046da:	4657      	mov	r7, sl
  4046dc:	46d8      	mov	r8, fp
  4046de:	2900      	cmp	r1, #0
  4046e0:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
  4046e4:	f340 8292 	ble.w	404c0c <_dtoa_r+0xb8c>
  4046e8:	4b91      	ldr	r3, [pc, #580]	; (404930 <_dtoa_r+0x8b0>)
  4046ea:	f001 020f 	and.w	r2, r1, #15
  4046ee:	110e      	asrs	r6, r1, #4
  4046f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4046f4:	06f0      	lsls	r0, r6, #27
  4046f6:	e9d3 4500 	ldrd	r4, r5, [r3]
  4046fa:	f140 824c 	bpl.w	404b96 <_dtoa_r+0xb16>
  4046fe:	4b8d      	ldr	r3, [pc, #564]	; (404934 <_dtoa_r+0x8b4>)
  404700:	4650      	mov	r0, sl
  404702:	4659      	mov	r1, fp
  404704:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  404708:	f7fd fd3e 	bl	402188 <__aeabi_ddiv>
  40470c:	f006 060f 	and.w	r6, r6, #15
  404710:	4682      	mov	sl, r0
  404712:	468b      	mov	fp, r1
  404714:	f04f 0803 	mov.w	r8, #3
  404718:	b186      	cbz	r6, 40473c <_dtoa_r+0x6bc>
  40471a:	4f86      	ldr	r7, [pc, #536]	; (404934 <_dtoa_r+0x8b4>)
  40471c:	07f1      	lsls	r1, r6, #31
  40471e:	d509      	bpl.n	404734 <_dtoa_r+0x6b4>
  404720:	4620      	mov	r0, r4
  404722:	4629      	mov	r1, r5
  404724:	e9d7 2300 	ldrd	r2, r3, [r7]
  404728:	f7fd fc04 	bl	401f34 <__aeabi_dmul>
  40472c:	f108 0801 	add.w	r8, r8, #1
  404730:	4604      	mov	r4, r0
  404732:	460d      	mov	r5, r1
  404734:	1076      	asrs	r6, r6, #1
  404736:	f107 0708 	add.w	r7, r7, #8
  40473a:	d1ef      	bne.n	40471c <_dtoa_r+0x69c>
  40473c:	4622      	mov	r2, r4
  40473e:	462b      	mov	r3, r5
  404740:	4650      	mov	r0, sl
  404742:	4659      	mov	r1, fp
  404744:	f7fd fd20 	bl	402188 <__aeabi_ddiv>
  404748:	4606      	mov	r6, r0
  40474a:	460f      	mov	r7, r1
  40474c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40474e:	b143      	cbz	r3, 404762 <_dtoa_r+0x6e2>
  404750:	2200      	movs	r2, #0
  404752:	4b79      	ldr	r3, [pc, #484]	; (404938 <_dtoa_r+0x8b8>)
  404754:	4630      	mov	r0, r6
  404756:	4639      	mov	r1, r7
  404758:	f001 ff8e 	bl	406678 <__aeabi_dcmplt>
  40475c:	2800      	cmp	r0, #0
  40475e:	f040 8320 	bne.w	404da2 <_dtoa_r+0xd22>
  404762:	4640      	mov	r0, r8
  404764:	f7fd fb80 	bl	401e68 <__aeabi_i2d>
  404768:	4632      	mov	r2, r6
  40476a:	463b      	mov	r3, r7
  40476c:	f7fd fbe2 	bl	401f34 <__aeabi_dmul>
  404770:	4b72      	ldr	r3, [pc, #456]	; (40493c <_dtoa_r+0x8bc>)
  404772:	2200      	movs	r2, #0
  404774:	f7fd fa2c 	bl	401bd0 <__adddf3>
  404778:	9b06      	ldr	r3, [sp, #24]
  40477a:	4604      	mov	r4, r0
  40477c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  404780:	2b00      	cmp	r3, #0
  404782:	f000 81df 	beq.w	404b44 <_dtoa_r+0xac4>
  404786:	9b04      	ldr	r3, [sp, #16]
  404788:	f8dd 8018 	ldr.w	r8, [sp, #24]
  40478c:	9311      	str	r3, [sp, #68]	; 0x44
  40478e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404790:	2b00      	cmp	r3, #0
  404792:	f000 8297 	beq.w	404cc4 <_dtoa_r+0xc44>
  404796:	4b66      	ldr	r3, [pc, #408]	; (404930 <_dtoa_r+0x8b0>)
  404798:	4969      	ldr	r1, [pc, #420]	; (404940 <_dtoa_r+0x8c0>)
  40479a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  40479e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4047a2:	2000      	movs	r0, #0
  4047a4:	f7fd fcf0 	bl	402188 <__aeabi_ddiv>
  4047a8:	4622      	mov	r2, r4
  4047aa:	462b      	mov	r3, r5
  4047ac:	f7fd fa0e 	bl	401bcc <__aeabi_dsub>
  4047b0:	4682      	mov	sl, r0
  4047b2:	468b      	mov	fp, r1
  4047b4:	4630      	mov	r0, r6
  4047b6:	4639      	mov	r1, r7
  4047b8:	f001 ff9c 	bl	4066f4 <__aeabi_d2iz>
  4047bc:	4604      	mov	r4, r0
  4047be:	f7fd fb53 	bl	401e68 <__aeabi_i2d>
  4047c2:	4602      	mov	r2, r0
  4047c4:	460b      	mov	r3, r1
  4047c6:	4630      	mov	r0, r6
  4047c8:	4639      	mov	r1, r7
  4047ca:	f7fd f9ff 	bl	401bcc <__aeabi_dsub>
  4047ce:	3430      	adds	r4, #48	; 0x30
  4047d0:	9d07      	ldr	r5, [sp, #28]
  4047d2:	b2e4      	uxtb	r4, r4
  4047d4:	4606      	mov	r6, r0
  4047d6:	460f      	mov	r7, r1
  4047d8:	702c      	strb	r4, [r5, #0]
  4047da:	4602      	mov	r2, r0
  4047dc:	460b      	mov	r3, r1
  4047de:	4650      	mov	r0, sl
  4047e0:	4659      	mov	r1, fp
  4047e2:	3501      	adds	r5, #1
  4047e4:	f001 ff66 	bl	4066b4 <__aeabi_dcmpgt>
  4047e8:	2800      	cmp	r0, #0
  4047ea:	d14c      	bne.n	404886 <_dtoa_r+0x806>
  4047ec:	4632      	mov	r2, r6
  4047ee:	463b      	mov	r3, r7
  4047f0:	2000      	movs	r0, #0
  4047f2:	4951      	ldr	r1, [pc, #324]	; (404938 <_dtoa_r+0x8b8>)
  4047f4:	f7fd f9ea 	bl	401bcc <__aeabi_dsub>
  4047f8:	4602      	mov	r2, r0
  4047fa:	460b      	mov	r3, r1
  4047fc:	4650      	mov	r0, sl
  4047fe:	4659      	mov	r1, fp
  404800:	f001 ff58 	bl	4066b4 <__aeabi_dcmpgt>
  404804:	2800      	cmp	r0, #0
  404806:	f040 830d 	bne.w	404e24 <_dtoa_r+0xda4>
  40480a:	f1b8 0f01 	cmp.w	r8, #1
  40480e:	f340 81b3 	ble.w	404b78 <_dtoa_r+0xaf8>
  404812:	9b07      	ldr	r3, [sp, #28]
  404814:	4498      	add	r8, r3
  404816:	e00d      	b.n	404834 <_dtoa_r+0x7b4>
  404818:	2000      	movs	r0, #0
  40481a:	4947      	ldr	r1, [pc, #284]	; (404938 <_dtoa_r+0x8b8>)
  40481c:	f7fd f9d6 	bl	401bcc <__aeabi_dsub>
  404820:	4652      	mov	r2, sl
  404822:	465b      	mov	r3, fp
  404824:	f001 ff28 	bl	406678 <__aeabi_dcmplt>
  404828:	2800      	cmp	r0, #0
  40482a:	f040 82fb 	bne.w	404e24 <_dtoa_r+0xda4>
  40482e:	4545      	cmp	r5, r8
  404830:	f000 81a2 	beq.w	404b78 <_dtoa_r+0xaf8>
  404834:	4650      	mov	r0, sl
  404836:	4659      	mov	r1, fp
  404838:	2200      	movs	r2, #0
  40483a:	4b42      	ldr	r3, [pc, #264]	; (404944 <_dtoa_r+0x8c4>)
  40483c:	f7fd fb7a 	bl	401f34 <__aeabi_dmul>
  404840:	2200      	movs	r2, #0
  404842:	4b40      	ldr	r3, [pc, #256]	; (404944 <_dtoa_r+0x8c4>)
  404844:	4682      	mov	sl, r0
  404846:	468b      	mov	fp, r1
  404848:	4630      	mov	r0, r6
  40484a:	4639      	mov	r1, r7
  40484c:	f7fd fb72 	bl	401f34 <__aeabi_dmul>
  404850:	460f      	mov	r7, r1
  404852:	4606      	mov	r6, r0
  404854:	f001 ff4e 	bl	4066f4 <__aeabi_d2iz>
  404858:	4604      	mov	r4, r0
  40485a:	f7fd fb05 	bl	401e68 <__aeabi_i2d>
  40485e:	4602      	mov	r2, r0
  404860:	460b      	mov	r3, r1
  404862:	4630      	mov	r0, r6
  404864:	4639      	mov	r1, r7
  404866:	f7fd f9b1 	bl	401bcc <__aeabi_dsub>
  40486a:	3430      	adds	r4, #48	; 0x30
  40486c:	b2e4      	uxtb	r4, r4
  40486e:	4652      	mov	r2, sl
  404870:	465b      	mov	r3, fp
  404872:	f805 4b01 	strb.w	r4, [r5], #1
  404876:	4606      	mov	r6, r0
  404878:	460f      	mov	r7, r1
  40487a:	f001 fefd 	bl	406678 <__aeabi_dcmplt>
  40487e:	4632      	mov	r2, r6
  404880:	463b      	mov	r3, r7
  404882:	2800      	cmp	r0, #0
  404884:	d0c8      	beq.n	404818 <_dtoa_r+0x798>
  404886:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404888:	9304      	str	r3, [sp, #16]
  40488a:	e5c4      	b.n	404416 <_dtoa_r+0x396>
  40488c:	2300      	movs	r3, #0
  40488e:	9309      	str	r3, [sp, #36]	; 0x24
  404890:	9b21      	ldr	r3, [sp, #132]	; 0x84
  404892:	2b00      	cmp	r3, #0
  404894:	f340 8189 	ble.w	404baa <_dtoa_r+0xb2a>
  404898:	461e      	mov	r6, r3
  40489a:	461c      	mov	r4, r3
  40489c:	930d      	str	r3, [sp, #52]	; 0x34
  40489e:	9306      	str	r3, [sp, #24]
  4048a0:	e6fd      	b.n	40469e <_dtoa_r+0x61e>
  4048a2:	2301      	movs	r3, #1
  4048a4:	9309      	str	r3, [sp, #36]	; 0x24
  4048a6:	e7f3      	b.n	404890 <_dtoa_r+0x810>
  4048a8:	9408      	str	r4, [sp, #32]
  4048aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4048ac:	9908      	ldr	r1, [sp, #32]
  4048ae:	4648      	mov	r0, r9
  4048b0:	f001 f9d0 	bl	405c54 <__pow5mult>
  4048b4:	4604      	mov	r4, r0
  4048b6:	e611      	b.n	4044dc <_dtoa_r+0x45c>
  4048b8:	9b06      	ldr	r3, [sp, #24]
  4048ba:	2b00      	cmp	r3, #0
  4048bc:	f73f acfc 	bgt.w	4042b8 <_dtoa_r+0x238>
  4048c0:	f040 82da 	bne.w	404e78 <_dtoa_r+0xdf8>
  4048c4:	2200      	movs	r2, #0
  4048c6:	4b20      	ldr	r3, [pc, #128]	; (404948 <_dtoa_r+0x8c8>)
  4048c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4048cc:	f7fd fb32 	bl	401f34 <__aeabi_dmul>
  4048d0:	4652      	mov	r2, sl
  4048d2:	465b      	mov	r3, fp
  4048d4:	f001 fee4 	bl	4066a0 <__aeabi_dcmpge>
  4048d8:	f8dd 8018 	ldr.w	r8, [sp, #24]
  4048dc:	4646      	mov	r6, r8
  4048de:	2800      	cmp	r0, #0
  4048e0:	f000 80f2 	beq.w	404ac8 <_dtoa_r+0xa48>
  4048e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4048e6:	9d07      	ldr	r5, [sp, #28]
  4048e8:	43db      	mvns	r3, r3
  4048ea:	9304      	str	r3, [sp, #16]
  4048ec:	4641      	mov	r1, r8
  4048ee:	4648      	mov	r0, r9
  4048f0:	f001 f876 	bl	4059e0 <_Bfree>
  4048f4:	2e00      	cmp	r6, #0
  4048f6:	f43f ad8e 	beq.w	404416 <_dtoa_r+0x396>
  4048fa:	e68d      	b.n	404618 <_dtoa_r+0x598>
  4048fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4048fe:	2a00      	cmp	r2, #0
  404900:	f000 8241 	beq.w	404d86 <_dtoa_r+0xd06>
  404904:	f203 4333 	addw	r3, r3, #1075	; 0x433
  404908:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40490a:	9d05      	ldr	r5, [sp, #20]
  40490c:	e5ab      	b.n	404466 <_dtoa_r+0x3e6>
  40490e:	201c      	movs	r0, #28
  404910:	9b05      	ldr	r3, [sp, #20]
  404912:	4403      	add	r3, r0
  404914:	9305      	str	r3, [sp, #20]
  404916:	9b02      	ldr	r3, [sp, #8]
  404918:	4403      	add	r3, r0
  40491a:	4405      	add	r5, r0
  40491c:	9302      	str	r3, [sp, #8]
  40491e:	e60e      	b.n	40453e <_dtoa_r+0x4be>
  404920:	9b20      	ldr	r3, [sp, #128]	; 0x80
  404922:	2b01      	cmp	r3, #1
  404924:	f340 8282 	ble.w	404e2c <_dtoa_r+0xdac>
  404928:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  40492a:	2001      	movs	r0, #1
  40492c:	e5f3      	b.n	404516 <_dtoa_r+0x496>
  40492e:	bf00      	nop
  404930:	00406820 	.word	0x00406820
  404934:	004068e8 	.word	0x004068e8
  404938:	3ff00000 	.word	0x3ff00000
  40493c:	401c0000 	.word	0x401c0000
  404940:	3fe00000 	.word	0x3fe00000
  404944:	40240000 	.word	0x40240000
  404948:	40140000 	.word	0x40140000
  40494c:	4631      	mov	r1, r6
  40494e:	2300      	movs	r3, #0
  404950:	220a      	movs	r2, #10
  404952:	4648      	mov	r0, r9
  404954:	f001 f84e 	bl	4059f4 <__multadd>
  404958:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40495a:	2b00      	cmp	r3, #0
  40495c:	4606      	mov	r6, r0
  40495e:	f340 8297 	ble.w	404e90 <_dtoa_r+0xe10>
  404962:	9306      	str	r3, [sp, #24]
  404964:	2d00      	cmp	r5, #0
  404966:	dd05      	ble.n	404974 <_dtoa_r+0x8f4>
  404968:	4631      	mov	r1, r6
  40496a:	462a      	mov	r2, r5
  40496c:	4648      	mov	r0, r9
  40496e:	f001 f9c1 	bl	405cf4 <__lshift>
  404972:	4606      	mov	r6, r0
  404974:	2f00      	cmp	r7, #0
  404976:	f040 817c 	bne.w	404c72 <_dtoa_r+0xbf2>
  40497a:	9605      	str	r6, [sp, #20]
  40497c:	9b06      	ldr	r3, [sp, #24]
  40497e:	9a07      	ldr	r2, [sp, #28]
  404980:	f8dd b014 	ldr.w	fp, [sp, #20]
  404984:	3b01      	subs	r3, #1
  404986:	18d3      	adds	r3, r2, r3
  404988:	9308      	str	r3, [sp, #32]
  40498a:	f00a 0301 	and.w	r3, sl, #1
  40498e:	9309      	str	r3, [sp, #36]	; 0x24
  404990:	4617      	mov	r7, r2
  404992:	46c2      	mov	sl, r8
  404994:	4651      	mov	r1, sl
  404996:	4620      	mov	r0, r4
  404998:	f7ff fade 	bl	403f58 <quorem>
  40499c:	4631      	mov	r1, r6
  40499e:	4605      	mov	r5, r0
  4049a0:	4620      	mov	r0, r4
  4049a2:	f001 f9ff 	bl	405da4 <__mcmp>
  4049a6:	465a      	mov	r2, fp
  4049a8:	9002      	str	r0, [sp, #8]
  4049aa:	4651      	mov	r1, sl
  4049ac:	4648      	mov	r0, r9
  4049ae:	f001 fa19 	bl	405de4 <__mdiff>
  4049b2:	68c2      	ldr	r2, [r0, #12]
  4049b4:	4680      	mov	r8, r0
  4049b6:	f105 0330 	add.w	r3, r5, #48	; 0x30
  4049ba:	2a00      	cmp	r2, #0
  4049bc:	d149      	bne.n	404a52 <_dtoa_r+0x9d2>
  4049be:	4601      	mov	r1, r0
  4049c0:	4620      	mov	r0, r4
  4049c2:	9306      	str	r3, [sp, #24]
  4049c4:	f001 f9ee 	bl	405da4 <__mcmp>
  4049c8:	4641      	mov	r1, r8
  4049ca:	9005      	str	r0, [sp, #20]
  4049cc:	4648      	mov	r0, r9
  4049ce:	f001 f807 	bl	4059e0 <_Bfree>
  4049d2:	9a05      	ldr	r2, [sp, #20]
  4049d4:	9b06      	ldr	r3, [sp, #24]
  4049d6:	b92a      	cbnz	r2, 4049e4 <_dtoa_r+0x964>
  4049d8:	9920      	ldr	r1, [sp, #128]	; 0x80
  4049da:	b919      	cbnz	r1, 4049e4 <_dtoa_r+0x964>
  4049dc:	9909      	ldr	r1, [sp, #36]	; 0x24
  4049de:	2900      	cmp	r1, #0
  4049e0:	f000 8236 	beq.w	404e50 <_dtoa_r+0xdd0>
  4049e4:	9902      	ldr	r1, [sp, #8]
  4049e6:	2900      	cmp	r1, #0
  4049e8:	f2c0 80e4 	blt.w	404bb4 <_dtoa_r+0xb34>
  4049ec:	d105      	bne.n	4049fa <_dtoa_r+0x97a>
  4049ee:	9920      	ldr	r1, [sp, #128]	; 0x80
  4049f0:	b919      	cbnz	r1, 4049fa <_dtoa_r+0x97a>
  4049f2:	9909      	ldr	r1, [sp, #36]	; 0x24
  4049f4:	2900      	cmp	r1, #0
  4049f6:	f000 80dd 	beq.w	404bb4 <_dtoa_r+0xb34>
  4049fa:	2a00      	cmp	r2, #0
  4049fc:	f300 814d 	bgt.w	404c9a <_dtoa_r+0xc1a>
  404a00:	9a08      	ldr	r2, [sp, #32]
  404a02:	703b      	strb	r3, [r7, #0]
  404a04:	f107 0801 	add.w	r8, r7, #1
  404a08:	4297      	cmp	r7, r2
  404a0a:	4645      	mov	r5, r8
  404a0c:	f000 8154 	beq.w	404cb8 <_dtoa_r+0xc38>
  404a10:	4621      	mov	r1, r4
  404a12:	2300      	movs	r3, #0
  404a14:	220a      	movs	r2, #10
  404a16:	4648      	mov	r0, r9
  404a18:	f000 ffec 	bl	4059f4 <__multadd>
  404a1c:	455e      	cmp	r6, fp
  404a1e:	4604      	mov	r4, r0
  404a20:	4631      	mov	r1, r6
  404a22:	f04f 0300 	mov.w	r3, #0
  404a26:	f04f 020a 	mov.w	r2, #10
  404a2a:	4648      	mov	r0, r9
  404a2c:	d00b      	beq.n	404a46 <_dtoa_r+0x9c6>
  404a2e:	f000 ffe1 	bl	4059f4 <__multadd>
  404a32:	4659      	mov	r1, fp
  404a34:	4606      	mov	r6, r0
  404a36:	2300      	movs	r3, #0
  404a38:	220a      	movs	r2, #10
  404a3a:	4648      	mov	r0, r9
  404a3c:	f000 ffda 	bl	4059f4 <__multadd>
  404a40:	4647      	mov	r7, r8
  404a42:	4683      	mov	fp, r0
  404a44:	e7a6      	b.n	404994 <_dtoa_r+0x914>
  404a46:	f000 ffd5 	bl	4059f4 <__multadd>
  404a4a:	4647      	mov	r7, r8
  404a4c:	4606      	mov	r6, r0
  404a4e:	4683      	mov	fp, r0
  404a50:	e7a0      	b.n	404994 <_dtoa_r+0x914>
  404a52:	4601      	mov	r1, r0
  404a54:	4648      	mov	r0, r9
  404a56:	9305      	str	r3, [sp, #20]
  404a58:	f000 ffc2 	bl	4059e0 <_Bfree>
  404a5c:	2201      	movs	r2, #1
  404a5e:	9b05      	ldr	r3, [sp, #20]
  404a60:	e7c0      	b.n	4049e4 <_dtoa_r+0x964>
  404a62:	4641      	mov	r1, r8
  404a64:	4620      	mov	r0, r4
  404a66:	f001 f99d 	bl	405da4 <__mcmp>
  404a6a:	2800      	cmp	r0, #0
  404a6c:	f6bf ad7d 	bge.w	40456a <_dtoa_r+0x4ea>
  404a70:	4621      	mov	r1, r4
  404a72:	9c04      	ldr	r4, [sp, #16]
  404a74:	2300      	movs	r3, #0
  404a76:	3c01      	subs	r4, #1
  404a78:	220a      	movs	r2, #10
  404a7a:	4648      	mov	r0, r9
  404a7c:	9404      	str	r4, [sp, #16]
  404a7e:	f000 ffb9 	bl	4059f4 <__multadd>
  404a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404a84:	4604      	mov	r4, r0
  404a86:	2b00      	cmp	r3, #0
  404a88:	f47f af60 	bne.w	40494c <_dtoa_r+0x8cc>
  404a8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404a8e:	2b00      	cmp	r3, #0
  404a90:	f340 81f6 	ble.w	404e80 <_dtoa_r+0xe00>
  404a94:	9306      	str	r3, [sp, #24]
  404a96:	e570      	b.n	40457a <_dtoa_r+0x4fa>
  404a98:	9c08      	ldr	r4, [sp, #32]
  404a9a:	e51f      	b.n	4044dc <_dtoa_r+0x45c>
  404a9c:	9b20      	ldr	r3, [sp, #128]	; 0x80
  404a9e:	2b02      	cmp	r3, #2
  404aa0:	f77f ad67 	ble.w	404572 <_dtoa_r+0x4f2>
  404aa4:	9b06      	ldr	r3, [sp, #24]
  404aa6:	2b00      	cmp	r3, #0
  404aa8:	f040 8179 	bne.w	404d9e <_dtoa_r+0xd1e>
  404aac:	4641      	mov	r1, r8
  404aae:	2205      	movs	r2, #5
  404ab0:	4648      	mov	r0, r9
  404ab2:	f000 ff9f 	bl	4059f4 <__multadd>
  404ab6:	4601      	mov	r1, r0
  404ab8:	4680      	mov	r8, r0
  404aba:	4620      	mov	r0, r4
  404abc:	f001 f972 	bl	405da4 <__mcmp>
  404ac0:	2800      	cmp	r0, #0
  404ac2:	9408      	str	r4, [sp, #32]
  404ac4:	f77f af0e 	ble.w	4048e4 <_dtoa_r+0x864>
  404ac8:	9a04      	ldr	r2, [sp, #16]
  404aca:	9907      	ldr	r1, [sp, #28]
  404acc:	2331      	movs	r3, #49	; 0x31
  404ace:	3201      	adds	r2, #1
  404ad0:	9204      	str	r2, [sp, #16]
  404ad2:	700b      	strb	r3, [r1, #0]
  404ad4:	1c4d      	adds	r5, r1, #1
  404ad6:	e709      	b.n	4048ec <_dtoa_r+0x86c>
  404ad8:	9a04      	ldr	r2, [sp, #16]
  404ada:	3201      	adds	r2, #1
  404adc:	9204      	str	r2, [sp, #16]
  404ade:	9a07      	ldr	r2, [sp, #28]
  404ae0:	2331      	movs	r3, #49	; 0x31
  404ae2:	7013      	strb	r3, [r2, #0]
  404ae4:	e588      	b.n	4045f8 <_dtoa_r+0x578>
  404ae6:	2301      	movs	r3, #1
  404ae8:	9309      	str	r3, [sp, #36]	; 0x24
  404aea:	e5cd      	b.n	404688 <_dtoa_r+0x608>
  404aec:	f8dd 9014 	ldr.w	r9, [sp, #20]
  404af0:	e491      	b.n	404416 <_dtoa_r+0x396>
  404af2:	f1ba 0f00 	cmp.w	sl, #0
  404af6:	f47f ad04 	bne.w	404502 <_dtoa_r+0x482>
  404afa:	f3cb 0313 	ubfx	r3, fp, #0, #20
  404afe:	2b00      	cmp	r3, #0
  404b00:	f040 813f 	bne.w	404d82 <_dtoa_r+0xd02>
  404b04:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  404b08:	0d3f      	lsrs	r7, r7, #20
  404b0a:	053f      	lsls	r7, r7, #20
  404b0c:	b137      	cbz	r7, 404b1c <_dtoa_r+0xa9c>
  404b0e:	9b05      	ldr	r3, [sp, #20]
  404b10:	3301      	adds	r3, #1
  404b12:	9305      	str	r3, [sp, #20]
  404b14:	9b02      	ldr	r3, [sp, #8]
  404b16:	3301      	adds	r3, #1
  404b18:	9302      	str	r3, [sp, #8]
  404b1a:	2701      	movs	r7, #1
  404b1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404b1e:	2001      	movs	r0, #1
  404b20:	2b00      	cmp	r3, #0
  404b22:	f43f acf8 	beq.w	404516 <_dtoa_r+0x496>
  404b26:	e4ed      	b.n	404504 <_dtoa_r+0x484>
  404b28:	4640      	mov	r0, r8
  404b2a:	f7fd f99d 	bl	401e68 <__aeabi_i2d>
  404b2e:	4632      	mov	r2, r6
  404b30:	463b      	mov	r3, r7
  404b32:	f7fd f9ff 	bl	401f34 <__aeabi_dmul>
  404b36:	2200      	movs	r2, #0
  404b38:	4bbf      	ldr	r3, [pc, #764]	; (404e38 <_dtoa_r+0xdb8>)
  404b3a:	f7fd f849 	bl	401bd0 <__adddf3>
  404b3e:	4604      	mov	r4, r0
  404b40:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  404b44:	4630      	mov	r0, r6
  404b46:	4639      	mov	r1, r7
  404b48:	2200      	movs	r2, #0
  404b4a:	4bbc      	ldr	r3, [pc, #752]	; (404e3c <_dtoa_r+0xdbc>)
  404b4c:	f7fd f83e 	bl	401bcc <__aeabi_dsub>
  404b50:	4622      	mov	r2, r4
  404b52:	462b      	mov	r3, r5
  404b54:	4606      	mov	r6, r0
  404b56:	460f      	mov	r7, r1
  404b58:	f001 fdac 	bl	4066b4 <__aeabi_dcmpgt>
  404b5c:	4680      	mov	r8, r0
  404b5e:	2800      	cmp	r0, #0
  404b60:	f040 8105 	bne.w	404d6e <_dtoa_r+0xcee>
  404b64:	4622      	mov	r2, r4
  404b66:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  404b6a:	4630      	mov	r0, r6
  404b6c:	4639      	mov	r1, r7
  404b6e:	f001 fd83 	bl	406678 <__aeabi_dcmplt>
  404b72:	b108      	cbz	r0, 404b78 <_dtoa_r+0xaf8>
  404b74:	4646      	mov	r6, r8
  404b76:	e6b5      	b.n	4048e4 <_dtoa_r+0x864>
  404b78:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  404b7c:	f7ff bb89 	b.w	404292 <_dtoa_r+0x212>
  404b80:	9807      	ldr	r0, [sp, #28]
  404b82:	f7ff baae 	b.w	4040e2 <_dtoa_r+0x62>
  404b86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404b88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404b8a:	970a      	str	r7, [sp, #40]	; 0x28
  404b8c:	1afb      	subs	r3, r7, r3
  404b8e:	441a      	add	r2, r3
  404b90:	920b      	str	r2, [sp, #44]	; 0x2c
  404b92:	2700      	movs	r7, #0
  404b94:	e461      	b.n	40445a <_dtoa_r+0x3da>
  404b96:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  404b9a:	f04f 0802 	mov.w	r8, #2
  404b9e:	e5bb      	b.n	404718 <_dtoa_r+0x698>
  404ba0:	461c      	mov	r4, r3
  404ba2:	2100      	movs	r1, #0
  404ba4:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  404ba8:	e58a      	b.n	4046c0 <_dtoa_r+0x640>
  404baa:	2401      	movs	r4, #1
  404bac:	9421      	str	r4, [sp, #132]	; 0x84
  404bae:	940d      	str	r4, [sp, #52]	; 0x34
  404bb0:	9406      	str	r4, [sp, #24]
  404bb2:	e7f6      	b.n	404ba2 <_dtoa_r+0xb22>
  404bb4:	2a00      	cmp	r2, #0
  404bb6:	46d0      	mov	r8, sl
  404bb8:	f8cd b014 	str.w	fp, [sp, #20]
  404bbc:	469a      	mov	sl, r3
  404bbe:	dd11      	ble.n	404be4 <_dtoa_r+0xb64>
  404bc0:	4621      	mov	r1, r4
  404bc2:	2201      	movs	r2, #1
  404bc4:	4648      	mov	r0, r9
  404bc6:	f001 f895 	bl	405cf4 <__lshift>
  404bca:	4641      	mov	r1, r8
  404bcc:	4604      	mov	r4, r0
  404bce:	f001 f8e9 	bl	405da4 <__mcmp>
  404bd2:	2800      	cmp	r0, #0
  404bd4:	f340 8149 	ble.w	404e6a <_dtoa_r+0xdea>
  404bd8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  404bdc:	f000 8106 	beq.w	404dec <_dtoa_r+0xd6c>
  404be0:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  404be4:	46b3      	mov	fp, r6
  404be6:	f887 a000 	strb.w	sl, [r7]
  404bea:	1c7d      	adds	r5, r7, #1
  404bec:	9e05      	ldr	r6, [sp, #20]
  404bee:	9408      	str	r4, [sp, #32]
  404bf0:	e502      	b.n	4045f8 <_dtoa_r+0x578>
  404bf2:	d104      	bne.n	404bfe <_dtoa_r+0xb7e>
  404bf4:	f01a 0f01 	tst.w	sl, #1
  404bf8:	d001      	beq.n	404bfe <_dtoa_r+0xb7e>
  404bfa:	e4ed      	b.n	4045d8 <_dtoa_r+0x558>
  404bfc:	4615      	mov	r5, r2
  404bfe:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404c02:	2b30      	cmp	r3, #48	; 0x30
  404c04:	f105 32ff 	add.w	r2, r5, #4294967295
  404c08:	d0f8      	beq.n	404bfc <_dtoa_r+0xb7c>
  404c0a:	e4f5      	b.n	4045f8 <_dtoa_r+0x578>
  404c0c:	9b04      	ldr	r3, [sp, #16]
  404c0e:	425c      	negs	r4, r3
  404c10:	2c00      	cmp	r4, #0
  404c12:	f000 80bf 	beq.w	404d94 <_dtoa_r+0xd14>
  404c16:	4b8a      	ldr	r3, [pc, #552]	; (404e40 <_dtoa_r+0xdc0>)
  404c18:	f004 020f 	and.w	r2, r4, #15
  404c1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  404c20:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c24:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  404c28:	f7fd f984 	bl	401f34 <__aeabi_dmul>
  404c2c:	1124      	asrs	r4, r4, #4
  404c2e:	4606      	mov	r6, r0
  404c30:	460f      	mov	r7, r1
  404c32:	f000 812a 	beq.w	404e8a <_dtoa_r+0xe0a>
  404c36:	4d83      	ldr	r5, [pc, #524]	; (404e44 <_dtoa_r+0xdc4>)
  404c38:	f04f 0802 	mov.w	r8, #2
  404c3c:	07e2      	lsls	r2, r4, #31
  404c3e:	d509      	bpl.n	404c54 <_dtoa_r+0xbd4>
  404c40:	4630      	mov	r0, r6
  404c42:	4639      	mov	r1, r7
  404c44:	e9d5 2300 	ldrd	r2, r3, [r5]
  404c48:	f7fd f974 	bl	401f34 <__aeabi_dmul>
  404c4c:	f108 0801 	add.w	r8, r8, #1
  404c50:	4606      	mov	r6, r0
  404c52:	460f      	mov	r7, r1
  404c54:	1064      	asrs	r4, r4, #1
  404c56:	f105 0508 	add.w	r5, r5, #8
  404c5a:	d1ef      	bne.n	404c3c <_dtoa_r+0xbbc>
  404c5c:	e576      	b.n	40474c <_dtoa_r+0x6cc>
  404c5e:	9907      	ldr	r1, [sp, #28]
  404c60:	2230      	movs	r2, #48	; 0x30
  404c62:	700a      	strb	r2, [r1, #0]
  404c64:	9a04      	ldr	r2, [sp, #16]
  404c66:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  404c6a:	3201      	adds	r2, #1
  404c6c:	9204      	str	r2, [sp, #16]
  404c6e:	f7ff bbd0 	b.w	404412 <_dtoa_r+0x392>
  404c72:	6871      	ldr	r1, [r6, #4]
  404c74:	4648      	mov	r0, r9
  404c76:	f000 fe8d 	bl	405994 <_Balloc>
  404c7a:	6933      	ldr	r3, [r6, #16]
  404c7c:	1c9a      	adds	r2, r3, #2
  404c7e:	4605      	mov	r5, r0
  404c80:	0092      	lsls	r2, r2, #2
  404c82:	f106 010c 	add.w	r1, r6, #12
  404c86:	300c      	adds	r0, #12
  404c88:	f000 fd82 	bl	405790 <memcpy>
  404c8c:	4629      	mov	r1, r5
  404c8e:	2201      	movs	r2, #1
  404c90:	4648      	mov	r0, r9
  404c92:	f001 f82f 	bl	405cf4 <__lshift>
  404c96:	9005      	str	r0, [sp, #20]
  404c98:	e670      	b.n	40497c <_dtoa_r+0x8fc>
  404c9a:	2b39      	cmp	r3, #57	; 0x39
  404c9c:	f8cd b014 	str.w	fp, [sp, #20]
  404ca0:	46d0      	mov	r8, sl
  404ca2:	f000 80a3 	beq.w	404dec <_dtoa_r+0xd6c>
  404ca6:	f103 0a01 	add.w	sl, r3, #1
  404caa:	46b3      	mov	fp, r6
  404cac:	f887 a000 	strb.w	sl, [r7]
  404cb0:	1c7d      	adds	r5, r7, #1
  404cb2:	9e05      	ldr	r6, [sp, #20]
  404cb4:	9408      	str	r4, [sp, #32]
  404cb6:	e49f      	b.n	4045f8 <_dtoa_r+0x578>
  404cb8:	465a      	mov	r2, fp
  404cba:	46d0      	mov	r8, sl
  404cbc:	46b3      	mov	fp, r6
  404cbe:	469a      	mov	sl, r3
  404cc0:	4616      	mov	r6, r2
  404cc2:	e47d      	b.n	4045c0 <_dtoa_r+0x540>
  404cc4:	495e      	ldr	r1, [pc, #376]	; (404e40 <_dtoa_r+0xdc0>)
  404cc6:	f108 3aff 	add.w	sl, r8, #4294967295
  404cca:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
  404cce:	4622      	mov	r2, r4
  404cd0:	462b      	mov	r3, r5
  404cd2:	e9d1 0100 	ldrd	r0, r1, [r1]
  404cd6:	f7fd f92d 	bl	401f34 <__aeabi_dmul>
  404cda:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  404cde:	4639      	mov	r1, r7
  404ce0:	4630      	mov	r0, r6
  404ce2:	f001 fd07 	bl	4066f4 <__aeabi_d2iz>
  404ce6:	4604      	mov	r4, r0
  404ce8:	f7fd f8be 	bl	401e68 <__aeabi_i2d>
  404cec:	4602      	mov	r2, r0
  404cee:	460b      	mov	r3, r1
  404cf0:	4630      	mov	r0, r6
  404cf2:	4639      	mov	r1, r7
  404cf4:	f7fc ff6a 	bl	401bcc <__aeabi_dsub>
  404cf8:	9a07      	ldr	r2, [sp, #28]
  404cfa:	3430      	adds	r4, #48	; 0x30
  404cfc:	f1b8 0f01 	cmp.w	r8, #1
  404d00:	4606      	mov	r6, r0
  404d02:	460f      	mov	r7, r1
  404d04:	7014      	strb	r4, [r2, #0]
  404d06:	f102 0501 	add.w	r5, r2, #1
  404d0a:	d01e      	beq.n	404d4a <_dtoa_r+0xcca>
  404d0c:	9b07      	ldr	r3, [sp, #28]
  404d0e:	eb03 0b08 	add.w	fp, r3, r8
  404d12:	46a8      	mov	r8, r5
  404d14:	2200      	movs	r2, #0
  404d16:	4b4c      	ldr	r3, [pc, #304]	; (404e48 <_dtoa_r+0xdc8>)
  404d18:	4630      	mov	r0, r6
  404d1a:	4639      	mov	r1, r7
  404d1c:	f7fd f90a 	bl	401f34 <__aeabi_dmul>
  404d20:	460f      	mov	r7, r1
  404d22:	4606      	mov	r6, r0
  404d24:	f001 fce6 	bl	4066f4 <__aeabi_d2iz>
  404d28:	4604      	mov	r4, r0
  404d2a:	f7fd f89d 	bl	401e68 <__aeabi_i2d>
  404d2e:	3430      	adds	r4, #48	; 0x30
  404d30:	4602      	mov	r2, r0
  404d32:	460b      	mov	r3, r1
  404d34:	4630      	mov	r0, r6
  404d36:	4639      	mov	r1, r7
  404d38:	f7fc ff48 	bl	401bcc <__aeabi_dsub>
  404d3c:	f808 4b01 	strb.w	r4, [r8], #1
  404d40:	45c3      	cmp	fp, r8
  404d42:	4606      	mov	r6, r0
  404d44:	460f      	mov	r7, r1
  404d46:	d1e5      	bne.n	404d14 <_dtoa_r+0xc94>
  404d48:	4455      	add	r5, sl
  404d4a:	2200      	movs	r2, #0
  404d4c:	4b3f      	ldr	r3, [pc, #252]	; (404e4c <_dtoa_r+0xdcc>)
  404d4e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  404d52:	f7fc ff3d 	bl	401bd0 <__adddf3>
  404d56:	4632      	mov	r2, r6
  404d58:	463b      	mov	r3, r7
  404d5a:	f001 fc8d 	bl	406678 <__aeabi_dcmplt>
  404d5e:	2800      	cmp	r0, #0
  404d60:	d04c      	beq.n	404dfc <_dtoa_r+0xd7c>
  404d62:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404d64:	9304      	str	r3, [sp, #16]
  404d66:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  404d6a:	f7ff bb46 	b.w	4043fa <_dtoa_r+0x37a>
  404d6e:	f04f 0800 	mov.w	r8, #0
  404d72:	4646      	mov	r6, r8
  404d74:	e6a8      	b.n	404ac8 <_dtoa_r+0xa48>
  404d76:	9b05      	ldr	r3, [sp, #20]
  404d78:	9a06      	ldr	r2, [sp, #24]
  404d7a:	1a9d      	subs	r5, r3, r2
  404d7c:	2300      	movs	r3, #0
  404d7e:	f7ff bb72 	b.w	404466 <_dtoa_r+0x3e6>
  404d82:	2700      	movs	r7, #0
  404d84:	e6ca      	b.n	404b1c <_dtoa_r+0xa9c>
  404d86:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404d88:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404d8a:	9d05      	ldr	r5, [sp, #20]
  404d8c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  404d90:	f7ff bb69 	b.w	404466 <_dtoa_r+0x3e6>
  404d94:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
  404d98:	f04f 0802 	mov.w	r8, #2
  404d9c:	e4d6      	b.n	40474c <_dtoa_r+0x6cc>
  404d9e:	9408      	str	r4, [sp, #32]
  404da0:	e5a0      	b.n	4048e4 <_dtoa_r+0x864>
  404da2:	9b06      	ldr	r3, [sp, #24]
  404da4:	2b00      	cmp	r3, #0
  404da6:	f43f aebf 	beq.w	404b28 <_dtoa_r+0xaa8>
  404daa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404dac:	2b00      	cmp	r3, #0
  404dae:	f77f aee3 	ble.w	404b78 <_dtoa_r+0xaf8>
  404db2:	2200      	movs	r2, #0
  404db4:	4b24      	ldr	r3, [pc, #144]	; (404e48 <_dtoa_r+0xdc8>)
  404db6:	4630      	mov	r0, r6
  404db8:	4639      	mov	r1, r7
  404dba:	f7fd f8bb 	bl	401f34 <__aeabi_dmul>
  404dbe:	4606      	mov	r6, r0
  404dc0:	460f      	mov	r7, r1
  404dc2:	f108 0001 	add.w	r0, r8, #1
  404dc6:	f7fd f84f 	bl	401e68 <__aeabi_i2d>
  404dca:	4632      	mov	r2, r6
  404dcc:	463b      	mov	r3, r7
  404dce:	f7fd f8b1 	bl	401f34 <__aeabi_dmul>
  404dd2:	2200      	movs	r2, #0
  404dd4:	4b18      	ldr	r3, [pc, #96]	; (404e38 <_dtoa_r+0xdb8>)
  404dd6:	f7fc fefb 	bl	401bd0 <__adddf3>
  404dda:	9a04      	ldr	r2, [sp, #16]
  404ddc:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  404de0:	3a01      	subs	r2, #1
  404de2:	4604      	mov	r4, r0
  404de4:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  404de8:	9211      	str	r2, [sp, #68]	; 0x44
  404dea:	e4d0      	b.n	40478e <_dtoa_r+0x70e>
  404dec:	2239      	movs	r2, #57	; 0x39
  404dee:	46b3      	mov	fp, r6
  404df0:	9408      	str	r4, [sp, #32]
  404df2:	9e05      	ldr	r6, [sp, #20]
  404df4:	703a      	strb	r2, [r7, #0]
  404df6:	1c7d      	adds	r5, r7, #1
  404df8:	f7ff bbf0 	b.w	4045dc <_dtoa_r+0x55c>
  404dfc:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  404e00:	2000      	movs	r0, #0
  404e02:	4912      	ldr	r1, [pc, #72]	; (404e4c <_dtoa_r+0xdcc>)
  404e04:	f7fc fee2 	bl	401bcc <__aeabi_dsub>
  404e08:	4632      	mov	r2, r6
  404e0a:	463b      	mov	r3, r7
  404e0c:	f001 fc52 	bl	4066b4 <__aeabi_dcmpgt>
  404e10:	b908      	cbnz	r0, 404e16 <_dtoa_r+0xd96>
  404e12:	e6b1      	b.n	404b78 <_dtoa_r+0xaf8>
  404e14:	4615      	mov	r5, r2
  404e16:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404e1a:	2b30      	cmp	r3, #48	; 0x30
  404e1c:	f105 32ff 	add.w	r2, r5, #4294967295
  404e20:	d0f8      	beq.n	404e14 <_dtoa_r+0xd94>
  404e22:	e530      	b.n	404886 <_dtoa_r+0x806>
  404e24:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404e26:	9304      	str	r3, [sp, #16]
  404e28:	f7ff bae7 	b.w	4043fa <_dtoa_r+0x37a>
  404e2c:	f1ba 0f00 	cmp.w	sl, #0
  404e30:	f47f ad7a 	bne.w	404928 <_dtoa_r+0x8a8>
  404e34:	e661      	b.n	404afa <_dtoa_r+0xa7a>
  404e36:	bf00      	nop
  404e38:	401c0000 	.word	0x401c0000
  404e3c:	40140000 	.word	0x40140000
  404e40:	00406820 	.word	0x00406820
  404e44:	004068e8 	.word	0x004068e8
  404e48:	40240000 	.word	0x40240000
  404e4c:	3fe00000 	.word	0x3fe00000
  404e50:	2b39      	cmp	r3, #57	; 0x39
  404e52:	f8cd b014 	str.w	fp, [sp, #20]
  404e56:	46d0      	mov	r8, sl
  404e58:	f8dd b008 	ldr.w	fp, [sp, #8]
  404e5c:	469a      	mov	sl, r3
  404e5e:	d0c5      	beq.n	404dec <_dtoa_r+0xd6c>
  404e60:	f1bb 0f00 	cmp.w	fp, #0
  404e64:	f73f aebc 	bgt.w	404be0 <_dtoa_r+0xb60>
  404e68:	e6bc      	b.n	404be4 <_dtoa_r+0xb64>
  404e6a:	f47f aebb 	bne.w	404be4 <_dtoa_r+0xb64>
  404e6e:	f01a 0f01 	tst.w	sl, #1
  404e72:	f43f aeb7 	beq.w	404be4 <_dtoa_r+0xb64>
  404e76:	e6af      	b.n	404bd8 <_dtoa_r+0xb58>
  404e78:	f04f 0800 	mov.w	r8, #0
  404e7c:	4646      	mov	r6, r8
  404e7e:	e531      	b.n	4048e4 <_dtoa_r+0x864>
  404e80:	9b20      	ldr	r3, [sp, #128]	; 0x80
  404e82:	2b02      	cmp	r3, #2
  404e84:	dc21      	bgt.n	404eca <_dtoa_r+0xe4a>
  404e86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404e88:	e604      	b.n	404a94 <_dtoa_r+0xa14>
  404e8a:	f04f 0802 	mov.w	r8, #2
  404e8e:	e45d      	b.n	40474c <_dtoa_r+0x6cc>
  404e90:	9b20      	ldr	r3, [sp, #128]	; 0x80
  404e92:	2b02      	cmp	r3, #2
  404e94:	dc19      	bgt.n	404eca <_dtoa_r+0xe4a>
  404e96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404e98:	e563      	b.n	404962 <_dtoa_r+0x8e2>
  404e9a:	2400      	movs	r4, #0
  404e9c:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
  404ea0:	4621      	mov	r1, r4
  404ea2:	4648      	mov	r0, r9
  404ea4:	f000 fd76 	bl	405994 <_Balloc>
  404ea8:	f04f 33ff 	mov.w	r3, #4294967295
  404eac:	9306      	str	r3, [sp, #24]
  404eae:	930d      	str	r3, [sp, #52]	; 0x34
  404eb0:	2301      	movs	r3, #1
  404eb2:	9007      	str	r0, [sp, #28]
  404eb4:	9421      	str	r4, [sp, #132]	; 0x84
  404eb6:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  404eba:	9309      	str	r3, [sp, #36]	; 0x24
  404ebc:	f7ff b9e9 	b.w	404292 <_dtoa_r+0x212>
  404ec0:	f43f ab3d 	beq.w	40453e <_dtoa_r+0x4be>
  404ec4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  404ec8:	e522      	b.n	404910 <_dtoa_r+0x890>
  404eca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404ecc:	9306      	str	r3, [sp, #24]
  404ece:	e5e9      	b.n	404aa4 <_dtoa_r+0xa24>
  404ed0:	2501      	movs	r5, #1
  404ed2:	f7ff b9a8 	b.w	404226 <_dtoa_r+0x1a6>
  404ed6:	bf00      	nop

00404ed8 <__libc_fini_array>:
  404ed8:	b538      	push	{r3, r4, r5, lr}
  404eda:	4d07      	ldr	r5, [pc, #28]	; (404ef8 <__libc_fini_array+0x20>)
  404edc:	4c07      	ldr	r4, [pc, #28]	; (404efc <__libc_fini_array+0x24>)
  404ede:	1b2c      	subs	r4, r5, r4
  404ee0:	10a4      	asrs	r4, r4, #2
  404ee2:	d005      	beq.n	404ef0 <__libc_fini_array+0x18>
  404ee4:	3c01      	subs	r4, #1
  404ee6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  404eea:	4798      	blx	r3
  404eec:	2c00      	cmp	r4, #0
  404eee:	d1f9      	bne.n	404ee4 <__libc_fini_array+0xc>
  404ef0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404ef4:	f001 bd1c 	b.w	406930 <_fini>
  404ef8:	00406940 	.word	0x00406940
  404efc:	0040693c 	.word	0x0040693c

00404f00 <_malloc_trim_r>:
  404f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404f02:	4f23      	ldr	r7, [pc, #140]	; (404f90 <_malloc_trim_r+0x90>)
  404f04:	460c      	mov	r4, r1
  404f06:	4606      	mov	r6, r0
  404f08:	f000 fd40 	bl	40598c <__malloc_lock>
  404f0c:	68bb      	ldr	r3, [r7, #8]
  404f0e:	685d      	ldr	r5, [r3, #4]
  404f10:	f025 0503 	bic.w	r5, r5, #3
  404f14:	1b29      	subs	r1, r5, r4
  404f16:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  404f1a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  404f1e:	f021 010f 	bic.w	r1, r1, #15
  404f22:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  404f26:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  404f2a:	db07      	blt.n	404f3c <_malloc_trim_r+0x3c>
  404f2c:	2100      	movs	r1, #0
  404f2e:	4630      	mov	r0, r6
  404f30:	f001 fa2e 	bl	406390 <_sbrk_r>
  404f34:	68bb      	ldr	r3, [r7, #8]
  404f36:	442b      	add	r3, r5
  404f38:	4298      	cmp	r0, r3
  404f3a:	d004      	beq.n	404f46 <_malloc_trim_r+0x46>
  404f3c:	4630      	mov	r0, r6
  404f3e:	f000 fd27 	bl	405990 <__malloc_unlock>
  404f42:	2000      	movs	r0, #0
  404f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404f46:	4261      	negs	r1, r4
  404f48:	4630      	mov	r0, r6
  404f4a:	f001 fa21 	bl	406390 <_sbrk_r>
  404f4e:	3001      	adds	r0, #1
  404f50:	d00d      	beq.n	404f6e <_malloc_trim_r+0x6e>
  404f52:	4b10      	ldr	r3, [pc, #64]	; (404f94 <_malloc_trim_r+0x94>)
  404f54:	68ba      	ldr	r2, [r7, #8]
  404f56:	6819      	ldr	r1, [r3, #0]
  404f58:	1b2d      	subs	r5, r5, r4
  404f5a:	f045 0501 	orr.w	r5, r5, #1
  404f5e:	4630      	mov	r0, r6
  404f60:	1b09      	subs	r1, r1, r4
  404f62:	6055      	str	r5, [r2, #4]
  404f64:	6019      	str	r1, [r3, #0]
  404f66:	f000 fd13 	bl	405990 <__malloc_unlock>
  404f6a:	2001      	movs	r0, #1
  404f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404f6e:	2100      	movs	r1, #0
  404f70:	4630      	mov	r0, r6
  404f72:	f001 fa0d 	bl	406390 <_sbrk_r>
  404f76:	68ba      	ldr	r2, [r7, #8]
  404f78:	1a83      	subs	r3, r0, r2
  404f7a:	2b0f      	cmp	r3, #15
  404f7c:	ddde      	ble.n	404f3c <_malloc_trim_r+0x3c>
  404f7e:	4c06      	ldr	r4, [pc, #24]	; (404f98 <_malloc_trim_r+0x98>)
  404f80:	4904      	ldr	r1, [pc, #16]	; (404f94 <_malloc_trim_r+0x94>)
  404f82:	6824      	ldr	r4, [r4, #0]
  404f84:	f043 0301 	orr.w	r3, r3, #1
  404f88:	1b00      	subs	r0, r0, r4
  404f8a:	6053      	str	r3, [r2, #4]
  404f8c:	6008      	str	r0, [r1, #0]
  404f8e:	e7d5      	b.n	404f3c <_malloc_trim_r+0x3c>
  404f90:	2000087c 	.word	0x2000087c
  404f94:	20000d60 	.word	0x20000d60
  404f98:	20000c88 	.word	0x20000c88

00404f9c <_free_r>:
  404f9c:	2900      	cmp	r1, #0
  404f9e:	d045      	beq.n	40502c <_free_r+0x90>
  404fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404fa4:	460d      	mov	r5, r1
  404fa6:	4680      	mov	r8, r0
  404fa8:	f000 fcf0 	bl	40598c <__malloc_lock>
  404fac:	f855 7c04 	ldr.w	r7, [r5, #-4]
  404fb0:	496a      	ldr	r1, [pc, #424]	; (40515c <_free_r+0x1c0>)
  404fb2:	f027 0301 	bic.w	r3, r7, #1
  404fb6:	f1a5 0408 	sub.w	r4, r5, #8
  404fba:	18e2      	adds	r2, r4, r3
  404fbc:	688e      	ldr	r6, [r1, #8]
  404fbe:	6850      	ldr	r0, [r2, #4]
  404fc0:	42b2      	cmp	r2, r6
  404fc2:	f020 0003 	bic.w	r0, r0, #3
  404fc6:	d062      	beq.n	40508e <_free_r+0xf2>
  404fc8:	07fe      	lsls	r6, r7, #31
  404fca:	6050      	str	r0, [r2, #4]
  404fcc:	d40b      	bmi.n	404fe6 <_free_r+0x4a>
  404fce:	f855 7c08 	ldr.w	r7, [r5, #-8]
  404fd2:	1be4      	subs	r4, r4, r7
  404fd4:	f101 0e08 	add.w	lr, r1, #8
  404fd8:	68a5      	ldr	r5, [r4, #8]
  404fda:	4575      	cmp	r5, lr
  404fdc:	443b      	add	r3, r7
  404fde:	d06f      	beq.n	4050c0 <_free_r+0x124>
  404fe0:	68e7      	ldr	r7, [r4, #12]
  404fe2:	60ef      	str	r7, [r5, #12]
  404fe4:	60bd      	str	r5, [r7, #8]
  404fe6:	1815      	adds	r5, r2, r0
  404fe8:	686d      	ldr	r5, [r5, #4]
  404fea:	07ed      	lsls	r5, r5, #31
  404fec:	d542      	bpl.n	405074 <_free_r+0xd8>
  404fee:	f043 0201 	orr.w	r2, r3, #1
  404ff2:	6062      	str	r2, [r4, #4]
  404ff4:	50e3      	str	r3, [r4, r3]
  404ff6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404ffa:	d218      	bcs.n	40502e <_free_r+0x92>
  404ffc:	08db      	lsrs	r3, r3, #3
  404ffe:	1c5a      	adds	r2, r3, #1
  405000:	684d      	ldr	r5, [r1, #4]
  405002:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  405006:	60a7      	str	r7, [r4, #8]
  405008:	2001      	movs	r0, #1
  40500a:	109b      	asrs	r3, r3, #2
  40500c:	fa00 f303 	lsl.w	r3, r0, r3
  405010:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  405014:	431d      	orrs	r5, r3
  405016:	3808      	subs	r0, #8
  405018:	60e0      	str	r0, [r4, #12]
  40501a:	604d      	str	r5, [r1, #4]
  40501c:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  405020:	60fc      	str	r4, [r7, #12]
  405022:	4640      	mov	r0, r8
  405024:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405028:	f000 bcb2 	b.w	405990 <__malloc_unlock>
  40502c:	4770      	bx	lr
  40502e:	0a5a      	lsrs	r2, r3, #9
  405030:	2a04      	cmp	r2, #4
  405032:	d853      	bhi.n	4050dc <_free_r+0x140>
  405034:	099a      	lsrs	r2, r3, #6
  405036:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40503a:	007f      	lsls	r7, r7, #1
  40503c:	f102 0538 	add.w	r5, r2, #56	; 0x38
  405040:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  405044:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  405048:	4944      	ldr	r1, [pc, #272]	; (40515c <_free_r+0x1c0>)
  40504a:	3808      	subs	r0, #8
  40504c:	4290      	cmp	r0, r2
  40504e:	d04d      	beq.n	4050ec <_free_r+0x150>
  405050:	6851      	ldr	r1, [r2, #4]
  405052:	f021 0103 	bic.w	r1, r1, #3
  405056:	428b      	cmp	r3, r1
  405058:	d202      	bcs.n	405060 <_free_r+0xc4>
  40505a:	6892      	ldr	r2, [r2, #8]
  40505c:	4290      	cmp	r0, r2
  40505e:	d1f7      	bne.n	405050 <_free_r+0xb4>
  405060:	68d0      	ldr	r0, [r2, #12]
  405062:	60e0      	str	r0, [r4, #12]
  405064:	60a2      	str	r2, [r4, #8]
  405066:	6084      	str	r4, [r0, #8]
  405068:	60d4      	str	r4, [r2, #12]
  40506a:	4640      	mov	r0, r8
  40506c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405070:	f000 bc8e 	b.w	405990 <__malloc_unlock>
  405074:	6895      	ldr	r5, [r2, #8]
  405076:	4f3a      	ldr	r7, [pc, #232]	; (405160 <_free_r+0x1c4>)
  405078:	42bd      	cmp	r5, r7
  40507a:	4403      	add	r3, r0
  40507c:	d03f      	beq.n	4050fe <_free_r+0x162>
  40507e:	68d0      	ldr	r0, [r2, #12]
  405080:	60e8      	str	r0, [r5, #12]
  405082:	f043 0201 	orr.w	r2, r3, #1
  405086:	6085      	str	r5, [r0, #8]
  405088:	6062      	str	r2, [r4, #4]
  40508a:	50e3      	str	r3, [r4, r3]
  40508c:	e7b3      	b.n	404ff6 <_free_r+0x5a>
  40508e:	07ff      	lsls	r7, r7, #31
  405090:	4403      	add	r3, r0
  405092:	d407      	bmi.n	4050a4 <_free_r+0x108>
  405094:	f855 2c08 	ldr.w	r2, [r5, #-8]
  405098:	1aa4      	subs	r4, r4, r2
  40509a:	4413      	add	r3, r2
  40509c:	68a0      	ldr	r0, [r4, #8]
  40509e:	68e2      	ldr	r2, [r4, #12]
  4050a0:	60c2      	str	r2, [r0, #12]
  4050a2:	6090      	str	r0, [r2, #8]
  4050a4:	4a2f      	ldr	r2, [pc, #188]	; (405164 <_free_r+0x1c8>)
  4050a6:	6812      	ldr	r2, [r2, #0]
  4050a8:	f043 0001 	orr.w	r0, r3, #1
  4050ac:	4293      	cmp	r3, r2
  4050ae:	6060      	str	r0, [r4, #4]
  4050b0:	608c      	str	r4, [r1, #8]
  4050b2:	d3b6      	bcc.n	405022 <_free_r+0x86>
  4050b4:	4b2c      	ldr	r3, [pc, #176]	; (405168 <_free_r+0x1cc>)
  4050b6:	4640      	mov	r0, r8
  4050b8:	6819      	ldr	r1, [r3, #0]
  4050ba:	f7ff ff21 	bl	404f00 <_malloc_trim_r>
  4050be:	e7b0      	b.n	405022 <_free_r+0x86>
  4050c0:	1811      	adds	r1, r2, r0
  4050c2:	6849      	ldr	r1, [r1, #4]
  4050c4:	07c9      	lsls	r1, r1, #31
  4050c6:	d444      	bmi.n	405152 <_free_r+0x1b6>
  4050c8:	6891      	ldr	r1, [r2, #8]
  4050ca:	68d2      	ldr	r2, [r2, #12]
  4050cc:	60ca      	str	r2, [r1, #12]
  4050ce:	4403      	add	r3, r0
  4050d0:	f043 0001 	orr.w	r0, r3, #1
  4050d4:	6091      	str	r1, [r2, #8]
  4050d6:	6060      	str	r0, [r4, #4]
  4050d8:	50e3      	str	r3, [r4, r3]
  4050da:	e7a2      	b.n	405022 <_free_r+0x86>
  4050dc:	2a14      	cmp	r2, #20
  4050de:	d817      	bhi.n	405110 <_free_r+0x174>
  4050e0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4050e4:	007f      	lsls	r7, r7, #1
  4050e6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4050ea:	e7a9      	b.n	405040 <_free_r+0xa4>
  4050ec:	10aa      	asrs	r2, r5, #2
  4050ee:	684b      	ldr	r3, [r1, #4]
  4050f0:	2501      	movs	r5, #1
  4050f2:	fa05 f202 	lsl.w	r2, r5, r2
  4050f6:	4313      	orrs	r3, r2
  4050f8:	604b      	str	r3, [r1, #4]
  4050fa:	4602      	mov	r2, r0
  4050fc:	e7b1      	b.n	405062 <_free_r+0xc6>
  4050fe:	f043 0201 	orr.w	r2, r3, #1
  405102:	614c      	str	r4, [r1, #20]
  405104:	610c      	str	r4, [r1, #16]
  405106:	60e5      	str	r5, [r4, #12]
  405108:	60a5      	str	r5, [r4, #8]
  40510a:	6062      	str	r2, [r4, #4]
  40510c:	50e3      	str	r3, [r4, r3]
  40510e:	e788      	b.n	405022 <_free_r+0x86>
  405110:	2a54      	cmp	r2, #84	; 0x54
  405112:	d806      	bhi.n	405122 <_free_r+0x186>
  405114:	0b1a      	lsrs	r2, r3, #12
  405116:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40511a:	007f      	lsls	r7, r7, #1
  40511c:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  405120:	e78e      	b.n	405040 <_free_r+0xa4>
  405122:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405126:	d806      	bhi.n	405136 <_free_r+0x19a>
  405128:	0bda      	lsrs	r2, r3, #15
  40512a:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40512e:	007f      	lsls	r7, r7, #1
  405130:	f102 0577 	add.w	r5, r2, #119	; 0x77
  405134:	e784      	b.n	405040 <_free_r+0xa4>
  405136:	f240 5054 	movw	r0, #1364	; 0x554
  40513a:	4282      	cmp	r2, r0
  40513c:	d806      	bhi.n	40514c <_free_r+0x1b0>
  40513e:	0c9a      	lsrs	r2, r3, #18
  405140:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  405144:	007f      	lsls	r7, r7, #1
  405146:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40514a:	e779      	b.n	405040 <_free_r+0xa4>
  40514c:	27fe      	movs	r7, #254	; 0xfe
  40514e:	257e      	movs	r5, #126	; 0x7e
  405150:	e776      	b.n	405040 <_free_r+0xa4>
  405152:	f043 0201 	orr.w	r2, r3, #1
  405156:	6062      	str	r2, [r4, #4]
  405158:	50e3      	str	r3, [r4, r3]
  40515a:	e762      	b.n	405022 <_free_r+0x86>
  40515c:	2000087c 	.word	0x2000087c
  405160:	20000884 	.word	0x20000884
  405164:	20000c84 	.word	0x20000c84
  405168:	20000d5c 	.word	0x20000d5c

0040516c <_localeconv_r>:
  40516c:	4800      	ldr	r0, [pc, #0]	; (405170 <_localeconv_r+0x4>)
  40516e:	4770      	bx	lr
  405170:	20000844 	.word	0x20000844

00405174 <_malloc_r>:
  405174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405178:	f101 050b 	add.w	r5, r1, #11
  40517c:	2d16      	cmp	r5, #22
  40517e:	b083      	sub	sp, #12
  405180:	4606      	mov	r6, r0
  405182:	f240 809f 	bls.w	4052c4 <_malloc_r+0x150>
  405186:	f035 0507 	bics.w	r5, r5, #7
  40518a:	f100 80bf 	bmi.w	40530c <_malloc_r+0x198>
  40518e:	42a9      	cmp	r1, r5
  405190:	f200 80bc 	bhi.w	40530c <_malloc_r+0x198>
  405194:	f000 fbfa 	bl	40598c <__malloc_lock>
  405198:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  40519c:	f0c0 829c 	bcc.w	4056d8 <_malloc_r+0x564>
  4051a0:	0a6b      	lsrs	r3, r5, #9
  4051a2:	f000 80ba 	beq.w	40531a <_malloc_r+0x1a6>
  4051a6:	2b04      	cmp	r3, #4
  4051a8:	f200 8183 	bhi.w	4054b2 <_malloc_r+0x33e>
  4051ac:	09a8      	lsrs	r0, r5, #6
  4051ae:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  4051b2:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4051b6:	3038      	adds	r0, #56	; 0x38
  4051b8:	4fc4      	ldr	r7, [pc, #784]	; (4054cc <_malloc_r+0x358>)
  4051ba:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  4051be:	f1a3 0108 	sub.w	r1, r3, #8
  4051c2:	685c      	ldr	r4, [r3, #4]
  4051c4:	42a1      	cmp	r1, r4
  4051c6:	d107      	bne.n	4051d8 <_malloc_r+0x64>
  4051c8:	e0ac      	b.n	405324 <_malloc_r+0x1b0>
  4051ca:	2a00      	cmp	r2, #0
  4051cc:	f280 80ac 	bge.w	405328 <_malloc_r+0x1b4>
  4051d0:	68e4      	ldr	r4, [r4, #12]
  4051d2:	42a1      	cmp	r1, r4
  4051d4:	f000 80a6 	beq.w	405324 <_malloc_r+0x1b0>
  4051d8:	6863      	ldr	r3, [r4, #4]
  4051da:	f023 0303 	bic.w	r3, r3, #3
  4051de:	1b5a      	subs	r2, r3, r5
  4051e0:	2a0f      	cmp	r2, #15
  4051e2:	ddf2      	ble.n	4051ca <_malloc_r+0x56>
  4051e4:	49b9      	ldr	r1, [pc, #740]	; (4054cc <_malloc_r+0x358>)
  4051e6:	693c      	ldr	r4, [r7, #16]
  4051e8:	f101 0e08 	add.w	lr, r1, #8
  4051ec:	4574      	cmp	r4, lr
  4051ee:	f000 81b3 	beq.w	405558 <_malloc_r+0x3e4>
  4051f2:	6863      	ldr	r3, [r4, #4]
  4051f4:	f023 0303 	bic.w	r3, r3, #3
  4051f8:	1b5a      	subs	r2, r3, r5
  4051fa:	2a0f      	cmp	r2, #15
  4051fc:	f300 8199 	bgt.w	405532 <_malloc_r+0x3be>
  405200:	2a00      	cmp	r2, #0
  405202:	f8c1 e014 	str.w	lr, [r1, #20]
  405206:	f8c1 e010 	str.w	lr, [r1, #16]
  40520a:	f280 809e 	bge.w	40534a <_malloc_r+0x1d6>
  40520e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405212:	f080 8167 	bcs.w	4054e4 <_malloc_r+0x370>
  405216:	08db      	lsrs	r3, r3, #3
  405218:	f103 0c01 	add.w	ip, r3, #1
  40521c:	2201      	movs	r2, #1
  40521e:	109b      	asrs	r3, r3, #2
  405220:	fa02 f303 	lsl.w	r3, r2, r3
  405224:	684a      	ldr	r2, [r1, #4]
  405226:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  40522a:	f8c4 8008 	str.w	r8, [r4, #8]
  40522e:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  405232:	431a      	orrs	r2, r3
  405234:	f1a9 0308 	sub.w	r3, r9, #8
  405238:	60e3      	str	r3, [r4, #12]
  40523a:	604a      	str	r2, [r1, #4]
  40523c:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  405240:	f8c8 400c 	str.w	r4, [r8, #12]
  405244:	1083      	asrs	r3, r0, #2
  405246:	2401      	movs	r4, #1
  405248:	409c      	lsls	r4, r3
  40524a:	4294      	cmp	r4, r2
  40524c:	f200 808a 	bhi.w	405364 <_malloc_r+0x1f0>
  405250:	4214      	tst	r4, r2
  405252:	d106      	bne.n	405262 <_malloc_r+0xee>
  405254:	f020 0003 	bic.w	r0, r0, #3
  405258:	0064      	lsls	r4, r4, #1
  40525a:	4214      	tst	r4, r2
  40525c:	f100 0004 	add.w	r0, r0, #4
  405260:	d0fa      	beq.n	405258 <_malloc_r+0xe4>
  405262:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  405266:	46cc      	mov	ip, r9
  405268:	4680      	mov	r8, r0
  40526a:	f8dc 100c 	ldr.w	r1, [ip, #12]
  40526e:	458c      	cmp	ip, r1
  405270:	d107      	bne.n	405282 <_malloc_r+0x10e>
  405272:	e173      	b.n	40555c <_malloc_r+0x3e8>
  405274:	2a00      	cmp	r2, #0
  405276:	f280 8181 	bge.w	40557c <_malloc_r+0x408>
  40527a:	68c9      	ldr	r1, [r1, #12]
  40527c:	458c      	cmp	ip, r1
  40527e:	f000 816d 	beq.w	40555c <_malloc_r+0x3e8>
  405282:	684b      	ldr	r3, [r1, #4]
  405284:	f023 0303 	bic.w	r3, r3, #3
  405288:	1b5a      	subs	r2, r3, r5
  40528a:	2a0f      	cmp	r2, #15
  40528c:	ddf2      	ble.n	405274 <_malloc_r+0x100>
  40528e:	460c      	mov	r4, r1
  405290:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  405294:	f854 8f08 	ldr.w	r8, [r4, #8]!
  405298:	194b      	adds	r3, r1, r5
  40529a:	f045 0501 	orr.w	r5, r5, #1
  40529e:	604d      	str	r5, [r1, #4]
  4052a0:	f042 0101 	orr.w	r1, r2, #1
  4052a4:	f8c8 c00c 	str.w	ip, [r8, #12]
  4052a8:	4630      	mov	r0, r6
  4052aa:	f8cc 8008 	str.w	r8, [ip, #8]
  4052ae:	617b      	str	r3, [r7, #20]
  4052b0:	613b      	str	r3, [r7, #16]
  4052b2:	f8c3 e00c 	str.w	lr, [r3, #12]
  4052b6:	f8c3 e008 	str.w	lr, [r3, #8]
  4052ba:	6059      	str	r1, [r3, #4]
  4052bc:	509a      	str	r2, [r3, r2]
  4052be:	f000 fb67 	bl	405990 <__malloc_unlock>
  4052c2:	e01f      	b.n	405304 <_malloc_r+0x190>
  4052c4:	2910      	cmp	r1, #16
  4052c6:	d821      	bhi.n	40530c <_malloc_r+0x198>
  4052c8:	f000 fb60 	bl	40598c <__malloc_lock>
  4052cc:	2510      	movs	r5, #16
  4052ce:	2306      	movs	r3, #6
  4052d0:	2002      	movs	r0, #2
  4052d2:	4f7e      	ldr	r7, [pc, #504]	; (4054cc <_malloc_r+0x358>)
  4052d4:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  4052d8:	f1a3 0208 	sub.w	r2, r3, #8
  4052dc:	685c      	ldr	r4, [r3, #4]
  4052de:	4294      	cmp	r4, r2
  4052e0:	f000 8145 	beq.w	40556e <_malloc_r+0x3fa>
  4052e4:	6863      	ldr	r3, [r4, #4]
  4052e6:	68e1      	ldr	r1, [r4, #12]
  4052e8:	68a5      	ldr	r5, [r4, #8]
  4052ea:	f023 0303 	bic.w	r3, r3, #3
  4052ee:	4423      	add	r3, r4
  4052f0:	4630      	mov	r0, r6
  4052f2:	685a      	ldr	r2, [r3, #4]
  4052f4:	60e9      	str	r1, [r5, #12]
  4052f6:	f042 0201 	orr.w	r2, r2, #1
  4052fa:	608d      	str	r5, [r1, #8]
  4052fc:	605a      	str	r2, [r3, #4]
  4052fe:	f000 fb47 	bl	405990 <__malloc_unlock>
  405302:	3408      	adds	r4, #8
  405304:	4620      	mov	r0, r4
  405306:	b003      	add	sp, #12
  405308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40530c:	2400      	movs	r4, #0
  40530e:	230c      	movs	r3, #12
  405310:	4620      	mov	r0, r4
  405312:	6033      	str	r3, [r6, #0]
  405314:	b003      	add	sp, #12
  405316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40531a:	2380      	movs	r3, #128	; 0x80
  40531c:	f04f 0e40 	mov.w	lr, #64	; 0x40
  405320:	203f      	movs	r0, #63	; 0x3f
  405322:	e749      	b.n	4051b8 <_malloc_r+0x44>
  405324:	4670      	mov	r0, lr
  405326:	e75d      	b.n	4051e4 <_malloc_r+0x70>
  405328:	4423      	add	r3, r4
  40532a:	68e1      	ldr	r1, [r4, #12]
  40532c:	685a      	ldr	r2, [r3, #4]
  40532e:	68a5      	ldr	r5, [r4, #8]
  405330:	f042 0201 	orr.w	r2, r2, #1
  405334:	60e9      	str	r1, [r5, #12]
  405336:	4630      	mov	r0, r6
  405338:	608d      	str	r5, [r1, #8]
  40533a:	605a      	str	r2, [r3, #4]
  40533c:	f000 fb28 	bl	405990 <__malloc_unlock>
  405340:	3408      	adds	r4, #8
  405342:	4620      	mov	r0, r4
  405344:	b003      	add	sp, #12
  405346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40534a:	4423      	add	r3, r4
  40534c:	4630      	mov	r0, r6
  40534e:	685a      	ldr	r2, [r3, #4]
  405350:	f042 0201 	orr.w	r2, r2, #1
  405354:	605a      	str	r2, [r3, #4]
  405356:	f000 fb1b 	bl	405990 <__malloc_unlock>
  40535a:	3408      	adds	r4, #8
  40535c:	4620      	mov	r0, r4
  40535e:	b003      	add	sp, #12
  405360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405364:	68bc      	ldr	r4, [r7, #8]
  405366:	6863      	ldr	r3, [r4, #4]
  405368:	f023 0803 	bic.w	r8, r3, #3
  40536c:	45a8      	cmp	r8, r5
  40536e:	d304      	bcc.n	40537a <_malloc_r+0x206>
  405370:	ebc5 0308 	rsb	r3, r5, r8
  405374:	2b0f      	cmp	r3, #15
  405376:	f300 808c 	bgt.w	405492 <_malloc_r+0x31e>
  40537a:	4b55      	ldr	r3, [pc, #340]	; (4054d0 <_malloc_r+0x35c>)
  40537c:	f8df 9160 	ldr.w	r9, [pc, #352]	; 4054e0 <_malloc_r+0x36c>
  405380:	681a      	ldr	r2, [r3, #0]
  405382:	f8d9 3000 	ldr.w	r3, [r9]
  405386:	3301      	adds	r3, #1
  405388:	442a      	add	r2, r5
  40538a:	eb04 0a08 	add.w	sl, r4, r8
  40538e:	f000 8160 	beq.w	405652 <_malloc_r+0x4de>
  405392:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  405396:	320f      	adds	r2, #15
  405398:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  40539c:	f022 020f 	bic.w	r2, r2, #15
  4053a0:	4611      	mov	r1, r2
  4053a2:	4630      	mov	r0, r6
  4053a4:	9201      	str	r2, [sp, #4]
  4053a6:	f000 fff3 	bl	406390 <_sbrk_r>
  4053aa:	f1b0 3fff 	cmp.w	r0, #4294967295
  4053ae:	4683      	mov	fp, r0
  4053b0:	9a01      	ldr	r2, [sp, #4]
  4053b2:	f000 8158 	beq.w	405666 <_malloc_r+0x4f2>
  4053b6:	4582      	cmp	sl, r0
  4053b8:	f200 80fc 	bhi.w	4055b4 <_malloc_r+0x440>
  4053bc:	4b45      	ldr	r3, [pc, #276]	; (4054d4 <_malloc_r+0x360>)
  4053be:	6819      	ldr	r1, [r3, #0]
  4053c0:	45da      	cmp	sl, fp
  4053c2:	4411      	add	r1, r2
  4053c4:	6019      	str	r1, [r3, #0]
  4053c6:	f000 8153 	beq.w	405670 <_malloc_r+0x4fc>
  4053ca:	f8d9 0000 	ldr.w	r0, [r9]
  4053ce:	f8df e110 	ldr.w	lr, [pc, #272]	; 4054e0 <_malloc_r+0x36c>
  4053d2:	3001      	adds	r0, #1
  4053d4:	bf1b      	ittet	ne
  4053d6:	ebca 0a0b 	rsbne	sl, sl, fp
  4053da:	4451      	addne	r1, sl
  4053dc:	f8ce b000 	streq.w	fp, [lr]
  4053e0:	6019      	strne	r1, [r3, #0]
  4053e2:	f01b 0107 	ands.w	r1, fp, #7
  4053e6:	f000 8117 	beq.w	405618 <_malloc_r+0x4a4>
  4053ea:	f1c1 0008 	rsb	r0, r1, #8
  4053ee:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4053f2:	4483      	add	fp, r0
  4053f4:	3108      	adds	r1, #8
  4053f6:	445a      	add	r2, fp
  4053f8:	f3c2 020b 	ubfx	r2, r2, #0, #12
  4053fc:	ebc2 0901 	rsb	r9, r2, r1
  405400:	4649      	mov	r1, r9
  405402:	4630      	mov	r0, r6
  405404:	9301      	str	r3, [sp, #4]
  405406:	f000 ffc3 	bl	406390 <_sbrk_r>
  40540a:	1c43      	adds	r3, r0, #1
  40540c:	9b01      	ldr	r3, [sp, #4]
  40540e:	f000 813f 	beq.w	405690 <_malloc_r+0x51c>
  405412:	ebcb 0200 	rsb	r2, fp, r0
  405416:	444a      	add	r2, r9
  405418:	f042 0201 	orr.w	r2, r2, #1
  40541c:	6819      	ldr	r1, [r3, #0]
  40541e:	f8c7 b008 	str.w	fp, [r7, #8]
  405422:	4449      	add	r1, r9
  405424:	42bc      	cmp	r4, r7
  405426:	f8cb 2004 	str.w	r2, [fp, #4]
  40542a:	6019      	str	r1, [r3, #0]
  40542c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4054d4 <_malloc_r+0x360>
  405430:	d016      	beq.n	405460 <_malloc_r+0x2ec>
  405432:	f1b8 0f0f 	cmp.w	r8, #15
  405436:	f240 80fd 	bls.w	405634 <_malloc_r+0x4c0>
  40543a:	6862      	ldr	r2, [r4, #4]
  40543c:	f1a8 030c 	sub.w	r3, r8, #12
  405440:	f023 0307 	bic.w	r3, r3, #7
  405444:	18e0      	adds	r0, r4, r3
  405446:	f002 0201 	and.w	r2, r2, #1
  40544a:	f04f 0e05 	mov.w	lr, #5
  40544e:	431a      	orrs	r2, r3
  405450:	2b0f      	cmp	r3, #15
  405452:	6062      	str	r2, [r4, #4]
  405454:	f8c0 e004 	str.w	lr, [r0, #4]
  405458:	f8c0 e008 	str.w	lr, [r0, #8]
  40545c:	f200 811c 	bhi.w	405698 <_malloc_r+0x524>
  405460:	4b1d      	ldr	r3, [pc, #116]	; (4054d8 <_malloc_r+0x364>)
  405462:	68bc      	ldr	r4, [r7, #8]
  405464:	681a      	ldr	r2, [r3, #0]
  405466:	4291      	cmp	r1, r2
  405468:	bf88      	it	hi
  40546a:	6019      	strhi	r1, [r3, #0]
  40546c:	4b1b      	ldr	r3, [pc, #108]	; (4054dc <_malloc_r+0x368>)
  40546e:	681a      	ldr	r2, [r3, #0]
  405470:	4291      	cmp	r1, r2
  405472:	6862      	ldr	r2, [r4, #4]
  405474:	bf88      	it	hi
  405476:	6019      	strhi	r1, [r3, #0]
  405478:	f022 0203 	bic.w	r2, r2, #3
  40547c:	4295      	cmp	r5, r2
  40547e:	eba2 0305 	sub.w	r3, r2, r5
  405482:	d801      	bhi.n	405488 <_malloc_r+0x314>
  405484:	2b0f      	cmp	r3, #15
  405486:	dc04      	bgt.n	405492 <_malloc_r+0x31e>
  405488:	4630      	mov	r0, r6
  40548a:	f000 fa81 	bl	405990 <__malloc_unlock>
  40548e:	2400      	movs	r4, #0
  405490:	e738      	b.n	405304 <_malloc_r+0x190>
  405492:	1962      	adds	r2, r4, r5
  405494:	f043 0301 	orr.w	r3, r3, #1
  405498:	f045 0501 	orr.w	r5, r5, #1
  40549c:	6065      	str	r5, [r4, #4]
  40549e:	4630      	mov	r0, r6
  4054a0:	60ba      	str	r2, [r7, #8]
  4054a2:	6053      	str	r3, [r2, #4]
  4054a4:	f000 fa74 	bl	405990 <__malloc_unlock>
  4054a8:	3408      	adds	r4, #8
  4054aa:	4620      	mov	r0, r4
  4054ac:	b003      	add	sp, #12
  4054ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4054b2:	2b14      	cmp	r3, #20
  4054b4:	d971      	bls.n	40559a <_malloc_r+0x426>
  4054b6:	2b54      	cmp	r3, #84	; 0x54
  4054b8:	f200 80a4 	bhi.w	405604 <_malloc_r+0x490>
  4054bc:	0b28      	lsrs	r0, r5, #12
  4054be:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  4054c2:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4054c6:	306e      	adds	r0, #110	; 0x6e
  4054c8:	e676      	b.n	4051b8 <_malloc_r+0x44>
  4054ca:	bf00      	nop
  4054cc:	2000087c 	.word	0x2000087c
  4054d0:	20000d5c 	.word	0x20000d5c
  4054d4:	20000d60 	.word	0x20000d60
  4054d8:	20000d58 	.word	0x20000d58
  4054dc:	20000d54 	.word	0x20000d54
  4054e0:	20000c88 	.word	0x20000c88
  4054e4:	0a5a      	lsrs	r2, r3, #9
  4054e6:	2a04      	cmp	r2, #4
  4054e8:	d95e      	bls.n	4055a8 <_malloc_r+0x434>
  4054ea:	2a14      	cmp	r2, #20
  4054ec:	f200 80b3 	bhi.w	405656 <_malloc_r+0x4e2>
  4054f0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4054f4:	0049      	lsls	r1, r1, #1
  4054f6:	325b      	adds	r2, #91	; 0x5b
  4054f8:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  4054fc:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  405500:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 4056e0 <_malloc_r+0x56c>
  405504:	f1ac 0c08 	sub.w	ip, ip, #8
  405508:	458c      	cmp	ip, r1
  40550a:	f000 8088 	beq.w	40561e <_malloc_r+0x4aa>
  40550e:	684a      	ldr	r2, [r1, #4]
  405510:	f022 0203 	bic.w	r2, r2, #3
  405514:	4293      	cmp	r3, r2
  405516:	d202      	bcs.n	40551e <_malloc_r+0x3aa>
  405518:	6889      	ldr	r1, [r1, #8]
  40551a:	458c      	cmp	ip, r1
  40551c:	d1f7      	bne.n	40550e <_malloc_r+0x39a>
  40551e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  405522:	687a      	ldr	r2, [r7, #4]
  405524:	f8c4 c00c 	str.w	ip, [r4, #12]
  405528:	60a1      	str	r1, [r4, #8]
  40552a:	f8cc 4008 	str.w	r4, [ip, #8]
  40552e:	60cc      	str	r4, [r1, #12]
  405530:	e688      	b.n	405244 <_malloc_r+0xd0>
  405532:	1963      	adds	r3, r4, r5
  405534:	f042 0701 	orr.w	r7, r2, #1
  405538:	f045 0501 	orr.w	r5, r5, #1
  40553c:	6065      	str	r5, [r4, #4]
  40553e:	4630      	mov	r0, r6
  405540:	614b      	str	r3, [r1, #20]
  405542:	610b      	str	r3, [r1, #16]
  405544:	f8c3 e00c 	str.w	lr, [r3, #12]
  405548:	f8c3 e008 	str.w	lr, [r3, #8]
  40554c:	605f      	str	r7, [r3, #4]
  40554e:	509a      	str	r2, [r3, r2]
  405550:	3408      	adds	r4, #8
  405552:	f000 fa1d 	bl	405990 <__malloc_unlock>
  405556:	e6d5      	b.n	405304 <_malloc_r+0x190>
  405558:	684a      	ldr	r2, [r1, #4]
  40555a:	e673      	b.n	405244 <_malloc_r+0xd0>
  40555c:	f108 0801 	add.w	r8, r8, #1
  405560:	f018 0f03 	tst.w	r8, #3
  405564:	f10c 0c08 	add.w	ip, ip, #8
  405568:	f47f ae7f 	bne.w	40526a <_malloc_r+0xf6>
  40556c:	e030      	b.n	4055d0 <_malloc_r+0x45c>
  40556e:	68dc      	ldr	r4, [r3, #12]
  405570:	42a3      	cmp	r3, r4
  405572:	bf08      	it	eq
  405574:	3002      	addeq	r0, #2
  405576:	f43f ae35 	beq.w	4051e4 <_malloc_r+0x70>
  40557a:	e6b3      	b.n	4052e4 <_malloc_r+0x170>
  40557c:	440b      	add	r3, r1
  40557e:	460c      	mov	r4, r1
  405580:	685a      	ldr	r2, [r3, #4]
  405582:	68c9      	ldr	r1, [r1, #12]
  405584:	f854 5f08 	ldr.w	r5, [r4, #8]!
  405588:	f042 0201 	orr.w	r2, r2, #1
  40558c:	605a      	str	r2, [r3, #4]
  40558e:	4630      	mov	r0, r6
  405590:	60e9      	str	r1, [r5, #12]
  405592:	608d      	str	r5, [r1, #8]
  405594:	f000 f9fc 	bl	405990 <__malloc_unlock>
  405598:	e6b4      	b.n	405304 <_malloc_r+0x190>
  40559a:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  40559e:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  4055a2:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4055a6:	e607      	b.n	4051b8 <_malloc_r+0x44>
  4055a8:	099a      	lsrs	r2, r3, #6
  4055aa:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4055ae:	0049      	lsls	r1, r1, #1
  4055b0:	3238      	adds	r2, #56	; 0x38
  4055b2:	e7a1      	b.n	4054f8 <_malloc_r+0x384>
  4055b4:	42bc      	cmp	r4, r7
  4055b6:	4b4a      	ldr	r3, [pc, #296]	; (4056e0 <_malloc_r+0x56c>)
  4055b8:	f43f af00 	beq.w	4053bc <_malloc_r+0x248>
  4055bc:	689c      	ldr	r4, [r3, #8]
  4055be:	6862      	ldr	r2, [r4, #4]
  4055c0:	f022 0203 	bic.w	r2, r2, #3
  4055c4:	e75a      	b.n	40547c <_malloc_r+0x308>
  4055c6:	f859 3908 	ldr.w	r3, [r9], #-8
  4055ca:	4599      	cmp	r9, r3
  4055cc:	f040 8082 	bne.w	4056d4 <_malloc_r+0x560>
  4055d0:	f010 0f03 	tst.w	r0, #3
  4055d4:	f100 30ff 	add.w	r0, r0, #4294967295
  4055d8:	d1f5      	bne.n	4055c6 <_malloc_r+0x452>
  4055da:	687b      	ldr	r3, [r7, #4]
  4055dc:	ea23 0304 	bic.w	r3, r3, r4
  4055e0:	607b      	str	r3, [r7, #4]
  4055e2:	0064      	lsls	r4, r4, #1
  4055e4:	429c      	cmp	r4, r3
  4055e6:	f63f aebd 	bhi.w	405364 <_malloc_r+0x1f0>
  4055ea:	2c00      	cmp	r4, #0
  4055ec:	f43f aeba 	beq.w	405364 <_malloc_r+0x1f0>
  4055f0:	421c      	tst	r4, r3
  4055f2:	4640      	mov	r0, r8
  4055f4:	f47f ae35 	bne.w	405262 <_malloc_r+0xee>
  4055f8:	0064      	lsls	r4, r4, #1
  4055fa:	421c      	tst	r4, r3
  4055fc:	f100 0004 	add.w	r0, r0, #4
  405600:	d0fa      	beq.n	4055f8 <_malloc_r+0x484>
  405602:	e62e      	b.n	405262 <_malloc_r+0xee>
  405604:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  405608:	d818      	bhi.n	40563c <_malloc_r+0x4c8>
  40560a:	0be8      	lsrs	r0, r5, #15
  40560c:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  405610:	ea4f 034e 	mov.w	r3, lr, lsl #1
  405614:	3077      	adds	r0, #119	; 0x77
  405616:	e5cf      	b.n	4051b8 <_malloc_r+0x44>
  405618:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40561c:	e6eb      	b.n	4053f6 <_malloc_r+0x282>
  40561e:	2101      	movs	r1, #1
  405620:	f8d8 3004 	ldr.w	r3, [r8, #4]
  405624:	1092      	asrs	r2, r2, #2
  405626:	fa01 f202 	lsl.w	r2, r1, r2
  40562a:	431a      	orrs	r2, r3
  40562c:	f8c8 2004 	str.w	r2, [r8, #4]
  405630:	4661      	mov	r1, ip
  405632:	e777      	b.n	405524 <_malloc_r+0x3b0>
  405634:	2301      	movs	r3, #1
  405636:	f8cb 3004 	str.w	r3, [fp, #4]
  40563a:	e725      	b.n	405488 <_malloc_r+0x314>
  40563c:	f240 5254 	movw	r2, #1364	; 0x554
  405640:	4293      	cmp	r3, r2
  405642:	d820      	bhi.n	405686 <_malloc_r+0x512>
  405644:	0ca8      	lsrs	r0, r5, #18
  405646:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  40564a:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40564e:	307c      	adds	r0, #124	; 0x7c
  405650:	e5b2      	b.n	4051b8 <_malloc_r+0x44>
  405652:	3210      	adds	r2, #16
  405654:	e6a4      	b.n	4053a0 <_malloc_r+0x22c>
  405656:	2a54      	cmp	r2, #84	; 0x54
  405658:	d826      	bhi.n	4056a8 <_malloc_r+0x534>
  40565a:	0b1a      	lsrs	r2, r3, #12
  40565c:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  405660:	0049      	lsls	r1, r1, #1
  405662:	326e      	adds	r2, #110	; 0x6e
  405664:	e748      	b.n	4054f8 <_malloc_r+0x384>
  405666:	68bc      	ldr	r4, [r7, #8]
  405668:	6862      	ldr	r2, [r4, #4]
  40566a:	f022 0203 	bic.w	r2, r2, #3
  40566e:	e705      	b.n	40547c <_malloc_r+0x308>
  405670:	f3ca 000b 	ubfx	r0, sl, #0, #12
  405674:	2800      	cmp	r0, #0
  405676:	f47f aea8 	bne.w	4053ca <_malloc_r+0x256>
  40567a:	4442      	add	r2, r8
  40567c:	68bb      	ldr	r3, [r7, #8]
  40567e:	f042 0201 	orr.w	r2, r2, #1
  405682:	605a      	str	r2, [r3, #4]
  405684:	e6ec      	b.n	405460 <_malloc_r+0x2ec>
  405686:	23fe      	movs	r3, #254	; 0xfe
  405688:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  40568c:	207e      	movs	r0, #126	; 0x7e
  40568e:	e593      	b.n	4051b8 <_malloc_r+0x44>
  405690:	2201      	movs	r2, #1
  405692:	f04f 0900 	mov.w	r9, #0
  405696:	e6c1      	b.n	40541c <_malloc_r+0x2a8>
  405698:	f104 0108 	add.w	r1, r4, #8
  40569c:	4630      	mov	r0, r6
  40569e:	f7ff fc7d 	bl	404f9c <_free_r>
  4056a2:	f8d9 1000 	ldr.w	r1, [r9]
  4056a6:	e6db      	b.n	405460 <_malloc_r+0x2ec>
  4056a8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4056ac:	d805      	bhi.n	4056ba <_malloc_r+0x546>
  4056ae:	0bda      	lsrs	r2, r3, #15
  4056b0:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4056b4:	0049      	lsls	r1, r1, #1
  4056b6:	3277      	adds	r2, #119	; 0x77
  4056b8:	e71e      	b.n	4054f8 <_malloc_r+0x384>
  4056ba:	f240 5154 	movw	r1, #1364	; 0x554
  4056be:	428a      	cmp	r2, r1
  4056c0:	d805      	bhi.n	4056ce <_malloc_r+0x55a>
  4056c2:	0c9a      	lsrs	r2, r3, #18
  4056c4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4056c8:	0049      	lsls	r1, r1, #1
  4056ca:	327c      	adds	r2, #124	; 0x7c
  4056cc:	e714      	b.n	4054f8 <_malloc_r+0x384>
  4056ce:	21fe      	movs	r1, #254	; 0xfe
  4056d0:	227e      	movs	r2, #126	; 0x7e
  4056d2:	e711      	b.n	4054f8 <_malloc_r+0x384>
  4056d4:	687b      	ldr	r3, [r7, #4]
  4056d6:	e784      	b.n	4055e2 <_malloc_r+0x46e>
  4056d8:	08e8      	lsrs	r0, r5, #3
  4056da:	1c43      	adds	r3, r0, #1
  4056dc:	005b      	lsls	r3, r3, #1
  4056de:	e5f8      	b.n	4052d2 <_malloc_r+0x15e>
  4056e0:	2000087c 	.word	0x2000087c
	...

004056f0 <memchr>:
  4056f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4056f4:	2a10      	cmp	r2, #16
  4056f6:	db2b      	blt.n	405750 <memchr+0x60>
  4056f8:	f010 0f07 	tst.w	r0, #7
  4056fc:	d008      	beq.n	405710 <memchr+0x20>
  4056fe:	f810 3b01 	ldrb.w	r3, [r0], #1
  405702:	3a01      	subs	r2, #1
  405704:	428b      	cmp	r3, r1
  405706:	d02d      	beq.n	405764 <memchr+0x74>
  405708:	f010 0f07 	tst.w	r0, #7
  40570c:	b342      	cbz	r2, 405760 <memchr+0x70>
  40570e:	d1f6      	bne.n	4056fe <memchr+0xe>
  405710:	b4f0      	push	{r4, r5, r6, r7}
  405712:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405716:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40571a:	f022 0407 	bic.w	r4, r2, #7
  40571e:	f07f 0700 	mvns.w	r7, #0
  405722:	2300      	movs	r3, #0
  405724:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405728:	3c08      	subs	r4, #8
  40572a:	ea85 0501 	eor.w	r5, r5, r1
  40572e:	ea86 0601 	eor.w	r6, r6, r1
  405732:	fa85 f547 	uadd8	r5, r5, r7
  405736:	faa3 f587 	sel	r5, r3, r7
  40573a:	fa86 f647 	uadd8	r6, r6, r7
  40573e:	faa5 f687 	sel	r6, r5, r7
  405742:	b98e      	cbnz	r6, 405768 <memchr+0x78>
  405744:	d1ee      	bne.n	405724 <memchr+0x34>
  405746:	bcf0      	pop	{r4, r5, r6, r7}
  405748:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40574c:	f002 0207 	and.w	r2, r2, #7
  405750:	b132      	cbz	r2, 405760 <memchr+0x70>
  405752:	f810 3b01 	ldrb.w	r3, [r0], #1
  405756:	3a01      	subs	r2, #1
  405758:	ea83 0301 	eor.w	r3, r3, r1
  40575c:	b113      	cbz	r3, 405764 <memchr+0x74>
  40575e:	d1f8      	bne.n	405752 <memchr+0x62>
  405760:	2000      	movs	r0, #0
  405762:	4770      	bx	lr
  405764:	3801      	subs	r0, #1
  405766:	4770      	bx	lr
  405768:	2d00      	cmp	r5, #0
  40576a:	bf06      	itte	eq
  40576c:	4635      	moveq	r5, r6
  40576e:	3803      	subeq	r0, #3
  405770:	3807      	subne	r0, #7
  405772:	f015 0f01 	tst.w	r5, #1
  405776:	d107      	bne.n	405788 <memchr+0x98>
  405778:	3001      	adds	r0, #1
  40577a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40577e:	bf02      	ittt	eq
  405780:	3001      	addeq	r0, #1
  405782:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405786:	3001      	addeq	r0, #1
  405788:	bcf0      	pop	{r4, r5, r6, r7}
  40578a:	3801      	subs	r0, #1
  40578c:	4770      	bx	lr
  40578e:	bf00      	nop

00405790 <memcpy>:
  405790:	4684      	mov	ip, r0
  405792:	ea41 0300 	orr.w	r3, r1, r0
  405796:	f013 0303 	ands.w	r3, r3, #3
  40579a:	d16d      	bne.n	405878 <memcpy+0xe8>
  40579c:	3a40      	subs	r2, #64	; 0x40
  40579e:	d341      	bcc.n	405824 <memcpy+0x94>
  4057a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4057a4:	f840 3b04 	str.w	r3, [r0], #4
  4057a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4057ac:	f840 3b04 	str.w	r3, [r0], #4
  4057b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4057b4:	f840 3b04 	str.w	r3, [r0], #4
  4057b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4057bc:	f840 3b04 	str.w	r3, [r0], #4
  4057c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4057c4:	f840 3b04 	str.w	r3, [r0], #4
  4057c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4057cc:	f840 3b04 	str.w	r3, [r0], #4
  4057d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4057d4:	f840 3b04 	str.w	r3, [r0], #4
  4057d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4057dc:	f840 3b04 	str.w	r3, [r0], #4
  4057e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4057e4:	f840 3b04 	str.w	r3, [r0], #4
  4057e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4057ec:	f840 3b04 	str.w	r3, [r0], #4
  4057f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4057f4:	f840 3b04 	str.w	r3, [r0], #4
  4057f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4057fc:	f840 3b04 	str.w	r3, [r0], #4
  405800:	f851 3b04 	ldr.w	r3, [r1], #4
  405804:	f840 3b04 	str.w	r3, [r0], #4
  405808:	f851 3b04 	ldr.w	r3, [r1], #4
  40580c:	f840 3b04 	str.w	r3, [r0], #4
  405810:	f851 3b04 	ldr.w	r3, [r1], #4
  405814:	f840 3b04 	str.w	r3, [r0], #4
  405818:	f851 3b04 	ldr.w	r3, [r1], #4
  40581c:	f840 3b04 	str.w	r3, [r0], #4
  405820:	3a40      	subs	r2, #64	; 0x40
  405822:	d2bd      	bcs.n	4057a0 <memcpy+0x10>
  405824:	3230      	adds	r2, #48	; 0x30
  405826:	d311      	bcc.n	40584c <memcpy+0xbc>
  405828:	f851 3b04 	ldr.w	r3, [r1], #4
  40582c:	f840 3b04 	str.w	r3, [r0], #4
  405830:	f851 3b04 	ldr.w	r3, [r1], #4
  405834:	f840 3b04 	str.w	r3, [r0], #4
  405838:	f851 3b04 	ldr.w	r3, [r1], #4
  40583c:	f840 3b04 	str.w	r3, [r0], #4
  405840:	f851 3b04 	ldr.w	r3, [r1], #4
  405844:	f840 3b04 	str.w	r3, [r0], #4
  405848:	3a10      	subs	r2, #16
  40584a:	d2ed      	bcs.n	405828 <memcpy+0x98>
  40584c:	320c      	adds	r2, #12
  40584e:	d305      	bcc.n	40585c <memcpy+0xcc>
  405850:	f851 3b04 	ldr.w	r3, [r1], #4
  405854:	f840 3b04 	str.w	r3, [r0], #4
  405858:	3a04      	subs	r2, #4
  40585a:	d2f9      	bcs.n	405850 <memcpy+0xc0>
  40585c:	3204      	adds	r2, #4
  40585e:	d008      	beq.n	405872 <memcpy+0xe2>
  405860:	07d2      	lsls	r2, r2, #31
  405862:	bf1c      	itt	ne
  405864:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405868:	f800 3b01 	strbne.w	r3, [r0], #1
  40586c:	d301      	bcc.n	405872 <memcpy+0xe2>
  40586e:	880b      	ldrh	r3, [r1, #0]
  405870:	8003      	strh	r3, [r0, #0]
  405872:	4660      	mov	r0, ip
  405874:	4770      	bx	lr
  405876:	bf00      	nop
  405878:	2a08      	cmp	r2, #8
  40587a:	d313      	bcc.n	4058a4 <memcpy+0x114>
  40587c:	078b      	lsls	r3, r1, #30
  40587e:	d08d      	beq.n	40579c <memcpy+0xc>
  405880:	f010 0303 	ands.w	r3, r0, #3
  405884:	d08a      	beq.n	40579c <memcpy+0xc>
  405886:	f1c3 0304 	rsb	r3, r3, #4
  40588a:	1ad2      	subs	r2, r2, r3
  40588c:	07db      	lsls	r3, r3, #31
  40588e:	bf1c      	itt	ne
  405890:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405894:	f800 3b01 	strbne.w	r3, [r0], #1
  405898:	d380      	bcc.n	40579c <memcpy+0xc>
  40589a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40589e:	f820 3b02 	strh.w	r3, [r0], #2
  4058a2:	e77b      	b.n	40579c <memcpy+0xc>
  4058a4:	3a04      	subs	r2, #4
  4058a6:	d3d9      	bcc.n	40585c <memcpy+0xcc>
  4058a8:	3a01      	subs	r2, #1
  4058aa:	f811 3b01 	ldrb.w	r3, [r1], #1
  4058ae:	f800 3b01 	strb.w	r3, [r0], #1
  4058b2:	d2f9      	bcs.n	4058a8 <memcpy+0x118>
  4058b4:	780b      	ldrb	r3, [r1, #0]
  4058b6:	7003      	strb	r3, [r0, #0]
  4058b8:	784b      	ldrb	r3, [r1, #1]
  4058ba:	7043      	strb	r3, [r0, #1]
  4058bc:	788b      	ldrb	r3, [r1, #2]
  4058be:	7083      	strb	r3, [r0, #2]
  4058c0:	4660      	mov	r0, ip
  4058c2:	4770      	bx	lr

004058c4 <memmove>:
  4058c4:	4288      	cmp	r0, r1
  4058c6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4058c8:	d90d      	bls.n	4058e6 <memmove+0x22>
  4058ca:	188b      	adds	r3, r1, r2
  4058cc:	4298      	cmp	r0, r3
  4058ce:	d20a      	bcs.n	4058e6 <memmove+0x22>
  4058d0:	1881      	adds	r1, r0, r2
  4058d2:	2a00      	cmp	r2, #0
  4058d4:	d051      	beq.n	40597a <memmove+0xb6>
  4058d6:	1a9a      	subs	r2, r3, r2
  4058d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4058dc:	f801 4d01 	strb.w	r4, [r1, #-1]!
  4058e0:	4293      	cmp	r3, r2
  4058e2:	d1f9      	bne.n	4058d8 <memmove+0x14>
  4058e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4058e6:	2a0f      	cmp	r2, #15
  4058e8:	d948      	bls.n	40597c <memmove+0xb8>
  4058ea:	ea41 0300 	orr.w	r3, r1, r0
  4058ee:	079b      	lsls	r3, r3, #30
  4058f0:	d146      	bne.n	405980 <memmove+0xbc>
  4058f2:	f100 0410 	add.w	r4, r0, #16
  4058f6:	f101 0310 	add.w	r3, r1, #16
  4058fa:	4615      	mov	r5, r2
  4058fc:	f853 6c10 	ldr.w	r6, [r3, #-16]
  405900:	f844 6c10 	str.w	r6, [r4, #-16]
  405904:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  405908:	f844 6c0c 	str.w	r6, [r4, #-12]
  40590c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  405910:	f844 6c08 	str.w	r6, [r4, #-8]
  405914:	3d10      	subs	r5, #16
  405916:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40591a:	f844 6c04 	str.w	r6, [r4, #-4]
  40591e:	2d0f      	cmp	r5, #15
  405920:	f103 0310 	add.w	r3, r3, #16
  405924:	f104 0410 	add.w	r4, r4, #16
  405928:	d8e8      	bhi.n	4058fc <memmove+0x38>
  40592a:	f1a2 0310 	sub.w	r3, r2, #16
  40592e:	f023 030f 	bic.w	r3, r3, #15
  405932:	f002 0e0f 	and.w	lr, r2, #15
  405936:	3310      	adds	r3, #16
  405938:	f1be 0f03 	cmp.w	lr, #3
  40593c:	4419      	add	r1, r3
  40593e:	4403      	add	r3, r0
  405940:	d921      	bls.n	405986 <memmove+0xc2>
  405942:	1f1e      	subs	r6, r3, #4
  405944:	460d      	mov	r5, r1
  405946:	4674      	mov	r4, lr
  405948:	3c04      	subs	r4, #4
  40594a:	f855 7b04 	ldr.w	r7, [r5], #4
  40594e:	f846 7f04 	str.w	r7, [r6, #4]!
  405952:	2c03      	cmp	r4, #3
  405954:	d8f8      	bhi.n	405948 <memmove+0x84>
  405956:	f1ae 0404 	sub.w	r4, lr, #4
  40595a:	f024 0403 	bic.w	r4, r4, #3
  40595e:	3404      	adds	r4, #4
  405960:	4423      	add	r3, r4
  405962:	4421      	add	r1, r4
  405964:	f002 0203 	and.w	r2, r2, #3
  405968:	b162      	cbz	r2, 405984 <memmove+0xc0>
  40596a:	3b01      	subs	r3, #1
  40596c:	440a      	add	r2, r1
  40596e:	f811 4b01 	ldrb.w	r4, [r1], #1
  405972:	f803 4f01 	strb.w	r4, [r3, #1]!
  405976:	428a      	cmp	r2, r1
  405978:	d1f9      	bne.n	40596e <memmove+0xaa>
  40597a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40597c:	4603      	mov	r3, r0
  40597e:	e7f3      	b.n	405968 <memmove+0xa4>
  405980:	4603      	mov	r3, r0
  405982:	e7f2      	b.n	40596a <memmove+0xa6>
  405984:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405986:	4672      	mov	r2, lr
  405988:	e7ee      	b.n	405968 <memmove+0xa4>
  40598a:	bf00      	nop

0040598c <__malloc_lock>:
  40598c:	4770      	bx	lr
  40598e:	bf00      	nop

00405990 <__malloc_unlock>:
  405990:	4770      	bx	lr
  405992:	bf00      	nop

00405994 <_Balloc>:
  405994:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  405996:	b570      	push	{r4, r5, r6, lr}
  405998:	4605      	mov	r5, r0
  40599a:	460c      	mov	r4, r1
  40599c:	b14b      	cbz	r3, 4059b2 <_Balloc+0x1e>
  40599e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  4059a2:	b180      	cbz	r0, 4059c6 <_Balloc+0x32>
  4059a4:	6802      	ldr	r2, [r0, #0]
  4059a6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  4059aa:	2300      	movs	r3, #0
  4059ac:	6103      	str	r3, [r0, #16]
  4059ae:	60c3      	str	r3, [r0, #12]
  4059b0:	bd70      	pop	{r4, r5, r6, pc}
  4059b2:	2221      	movs	r2, #33	; 0x21
  4059b4:	2104      	movs	r1, #4
  4059b6:	f000 fdcf 	bl	406558 <_calloc_r>
  4059ba:	64e8      	str	r0, [r5, #76]	; 0x4c
  4059bc:	4603      	mov	r3, r0
  4059be:	2800      	cmp	r0, #0
  4059c0:	d1ed      	bne.n	40599e <_Balloc+0xa>
  4059c2:	2000      	movs	r0, #0
  4059c4:	bd70      	pop	{r4, r5, r6, pc}
  4059c6:	2101      	movs	r1, #1
  4059c8:	fa01 f604 	lsl.w	r6, r1, r4
  4059cc:	1d72      	adds	r2, r6, #5
  4059ce:	4628      	mov	r0, r5
  4059d0:	0092      	lsls	r2, r2, #2
  4059d2:	f000 fdc1 	bl	406558 <_calloc_r>
  4059d6:	2800      	cmp	r0, #0
  4059d8:	d0f3      	beq.n	4059c2 <_Balloc+0x2e>
  4059da:	6044      	str	r4, [r0, #4]
  4059dc:	6086      	str	r6, [r0, #8]
  4059de:	e7e4      	b.n	4059aa <_Balloc+0x16>

004059e0 <_Bfree>:
  4059e0:	b131      	cbz	r1, 4059f0 <_Bfree+0x10>
  4059e2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4059e4:	684a      	ldr	r2, [r1, #4]
  4059e6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  4059ea:	6008      	str	r0, [r1, #0]
  4059ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4059f0:	4770      	bx	lr
  4059f2:	bf00      	nop

004059f4 <__multadd>:
  4059f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4059f6:	690c      	ldr	r4, [r1, #16]
  4059f8:	b083      	sub	sp, #12
  4059fa:	460d      	mov	r5, r1
  4059fc:	4606      	mov	r6, r0
  4059fe:	f101 0e14 	add.w	lr, r1, #20
  405a02:	2700      	movs	r7, #0
  405a04:	f8de 0000 	ldr.w	r0, [lr]
  405a08:	b281      	uxth	r1, r0
  405a0a:	fb02 3101 	mla	r1, r2, r1, r3
  405a0e:	0c0b      	lsrs	r3, r1, #16
  405a10:	0c00      	lsrs	r0, r0, #16
  405a12:	fb02 3300 	mla	r3, r2, r0, r3
  405a16:	b289      	uxth	r1, r1
  405a18:	3701      	adds	r7, #1
  405a1a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
  405a1e:	42bc      	cmp	r4, r7
  405a20:	f84e 1b04 	str.w	r1, [lr], #4
  405a24:	ea4f 4313 	mov.w	r3, r3, lsr #16
  405a28:	dcec      	bgt.n	405a04 <__multadd+0x10>
  405a2a:	b13b      	cbz	r3, 405a3c <__multadd+0x48>
  405a2c:	68aa      	ldr	r2, [r5, #8]
  405a2e:	4294      	cmp	r4, r2
  405a30:	da07      	bge.n	405a42 <__multadd+0x4e>
  405a32:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  405a36:	3401      	adds	r4, #1
  405a38:	6153      	str	r3, [r2, #20]
  405a3a:	612c      	str	r4, [r5, #16]
  405a3c:	4628      	mov	r0, r5
  405a3e:	b003      	add	sp, #12
  405a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405a42:	6869      	ldr	r1, [r5, #4]
  405a44:	9301      	str	r3, [sp, #4]
  405a46:	3101      	adds	r1, #1
  405a48:	4630      	mov	r0, r6
  405a4a:	f7ff ffa3 	bl	405994 <_Balloc>
  405a4e:	692a      	ldr	r2, [r5, #16]
  405a50:	3202      	adds	r2, #2
  405a52:	f105 010c 	add.w	r1, r5, #12
  405a56:	4607      	mov	r7, r0
  405a58:	0092      	lsls	r2, r2, #2
  405a5a:	300c      	adds	r0, #12
  405a5c:	f7ff fe98 	bl	405790 <memcpy>
  405a60:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  405a62:	6869      	ldr	r1, [r5, #4]
  405a64:	9b01      	ldr	r3, [sp, #4]
  405a66:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  405a6a:	6028      	str	r0, [r5, #0]
  405a6c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  405a70:	463d      	mov	r5, r7
  405a72:	e7de      	b.n	405a32 <__multadd+0x3e>

00405a74 <__hi0bits>:
  405a74:	0c03      	lsrs	r3, r0, #16
  405a76:	041b      	lsls	r3, r3, #16
  405a78:	b9b3      	cbnz	r3, 405aa8 <__hi0bits+0x34>
  405a7a:	0400      	lsls	r0, r0, #16
  405a7c:	2310      	movs	r3, #16
  405a7e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  405a82:	bf04      	itt	eq
  405a84:	0200      	lsleq	r0, r0, #8
  405a86:	3308      	addeq	r3, #8
  405a88:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  405a8c:	bf04      	itt	eq
  405a8e:	0100      	lsleq	r0, r0, #4
  405a90:	3304      	addeq	r3, #4
  405a92:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  405a96:	bf04      	itt	eq
  405a98:	0080      	lsleq	r0, r0, #2
  405a9a:	3302      	addeq	r3, #2
  405a9c:	2800      	cmp	r0, #0
  405a9e:	db07      	blt.n	405ab0 <__hi0bits+0x3c>
  405aa0:	0042      	lsls	r2, r0, #1
  405aa2:	d403      	bmi.n	405aac <__hi0bits+0x38>
  405aa4:	2020      	movs	r0, #32
  405aa6:	4770      	bx	lr
  405aa8:	2300      	movs	r3, #0
  405aaa:	e7e8      	b.n	405a7e <__hi0bits+0xa>
  405aac:	1c58      	adds	r0, r3, #1
  405aae:	4770      	bx	lr
  405ab0:	4618      	mov	r0, r3
  405ab2:	4770      	bx	lr

00405ab4 <__lo0bits>:
  405ab4:	6803      	ldr	r3, [r0, #0]
  405ab6:	f013 0207 	ands.w	r2, r3, #7
  405aba:	d007      	beq.n	405acc <__lo0bits+0x18>
  405abc:	07d9      	lsls	r1, r3, #31
  405abe:	d420      	bmi.n	405b02 <__lo0bits+0x4e>
  405ac0:	079a      	lsls	r2, r3, #30
  405ac2:	d420      	bmi.n	405b06 <__lo0bits+0x52>
  405ac4:	089b      	lsrs	r3, r3, #2
  405ac6:	6003      	str	r3, [r0, #0]
  405ac8:	2002      	movs	r0, #2
  405aca:	4770      	bx	lr
  405acc:	b299      	uxth	r1, r3
  405ace:	b909      	cbnz	r1, 405ad4 <__lo0bits+0x20>
  405ad0:	0c1b      	lsrs	r3, r3, #16
  405ad2:	2210      	movs	r2, #16
  405ad4:	f013 0fff 	tst.w	r3, #255	; 0xff
  405ad8:	bf04      	itt	eq
  405ada:	0a1b      	lsreq	r3, r3, #8
  405adc:	3208      	addeq	r2, #8
  405ade:	0719      	lsls	r1, r3, #28
  405ae0:	bf04      	itt	eq
  405ae2:	091b      	lsreq	r3, r3, #4
  405ae4:	3204      	addeq	r2, #4
  405ae6:	0799      	lsls	r1, r3, #30
  405ae8:	bf04      	itt	eq
  405aea:	089b      	lsreq	r3, r3, #2
  405aec:	3202      	addeq	r2, #2
  405aee:	07d9      	lsls	r1, r3, #31
  405af0:	d404      	bmi.n	405afc <__lo0bits+0x48>
  405af2:	085b      	lsrs	r3, r3, #1
  405af4:	d101      	bne.n	405afa <__lo0bits+0x46>
  405af6:	2020      	movs	r0, #32
  405af8:	4770      	bx	lr
  405afa:	3201      	adds	r2, #1
  405afc:	6003      	str	r3, [r0, #0]
  405afe:	4610      	mov	r0, r2
  405b00:	4770      	bx	lr
  405b02:	2000      	movs	r0, #0
  405b04:	4770      	bx	lr
  405b06:	085b      	lsrs	r3, r3, #1
  405b08:	6003      	str	r3, [r0, #0]
  405b0a:	2001      	movs	r0, #1
  405b0c:	4770      	bx	lr
  405b0e:	bf00      	nop

00405b10 <__i2b>:
  405b10:	b510      	push	{r4, lr}
  405b12:	460c      	mov	r4, r1
  405b14:	2101      	movs	r1, #1
  405b16:	f7ff ff3d 	bl	405994 <_Balloc>
  405b1a:	2201      	movs	r2, #1
  405b1c:	6144      	str	r4, [r0, #20]
  405b1e:	6102      	str	r2, [r0, #16]
  405b20:	bd10      	pop	{r4, pc}
  405b22:	bf00      	nop

00405b24 <__multiply>:
  405b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405b28:	690d      	ldr	r5, [r1, #16]
  405b2a:	6917      	ldr	r7, [r2, #16]
  405b2c:	42bd      	cmp	r5, r7
  405b2e:	b083      	sub	sp, #12
  405b30:	460c      	mov	r4, r1
  405b32:	4616      	mov	r6, r2
  405b34:	da04      	bge.n	405b40 <__multiply+0x1c>
  405b36:	462a      	mov	r2, r5
  405b38:	4634      	mov	r4, r6
  405b3a:	463d      	mov	r5, r7
  405b3c:	460e      	mov	r6, r1
  405b3e:	4617      	mov	r7, r2
  405b40:	68a3      	ldr	r3, [r4, #8]
  405b42:	6861      	ldr	r1, [r4, #4]
  405b44:	eb05 0807 	add.w	r8, r5, r7
  405b48:	4598      	cmp	r8, r3
  405b4a:	bfc8      	it	gt
  405b4c:	3101      	addgt	r1, #1
  405b4e:	f7ff ff21 	bl	405994 <_Balloc>
  405b52:	f100 0c14 	add.w	ip, r0, #20
  405b56:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
  405b5a:	45cc      	cmp	ip, r9
  405b5c:	9000      	str	r0, [sp, #0]
  405b5e:	d205      	bcs.n	405b6c <__multiply+0x48>
  405b60:	4663      	mov	r3, ip
  405b62:	2100      	movs	r1, #0
  405b64:	f843 1b04 	str.w	r1, [r3], #4
  405b68:	4599      	cmp	r9, r3
  405b6a:	d8fb      	bhi.n	405b64 <__multiply+0x40>
  405b6c:	f106 0214 	add.w	r2, r6, #20
  405b70:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
  405b74:	f104 0314 	add.w	r3, r4, #20
  405b78:	4552      	cmp	r2, sl
  405b7a:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
  405b7e:	d254      	bcs.n	405c2a <__multiply+0x106>
  405b80:	f8cd 9004 	str.w	r9, [sp, #4]
  405b84:	4699      	mov	r9, r3
  405b86:	f852 3b04 	ldr.w	r3, [r2], #4
  405b8a:	fa1f fb83 	uxth.w	fp, r3
  405b8e:	f1bb 0f00 	cmp.w	fp, #0
  405b92:	d020      	beq.n	405bd6 <__multiply+0xb2>
  405b94:	2000      	movs	r0, #0
  405b96:	464f      	mov	r7, r9
  405b98:	4666      	mov	r6, ip
  405b9a:	4605      	mov	r5, r0
  405b9c:	e000      	b.n	405ba0 <__multiply+0x7c>
  405b9e:	461e      	mov	r6, r3
  405ba0:	f857 4b04 	ldr.w	r4, [r7], #4
  405ba4:	6830      	ldr	r0, [r6, #0]
  405ba6:	b2a1      	uxth	r1, r4
  405ba8:	b283      	uxth	r3, r0
  405baa:	fb0b 3101 	mla	r1, fp, r1, r3
  405bae:	0c24      	lsrs	r4, r4, #16
  405bb0:	0c00      	lsrs	r0, r0, #16
  405bb2:	194b      	adds	r3, r1, r5
  405bb4:	fb0b 0004 	mla	r0, fp, r4, r0
  405bb8:	eb00 4013 	add.w	r0, r0, r3, lsr #16
  405bbc:	b299      	uxth	r1, r3
  405bbe:	4633      	mov	r3, r6
  405bc0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
  405bc4:	45be      	cmp	lr, r7
  405bc6:	ea4f 4510 	mov.w	r5, r0, lsr #16
  405bca:	f843 1b04 	str.w	r1, [r3], #4
  405bce:	d8e6      	bhi.n	405b9e <__multiply+0x7a>
  405bd0:	6075      	str	r5, [r6, #4]
  405bd2:	f852 3c04 	ldr.w	r3, [r2, #-4]
  405bd6:	ea5f 4b13 	movs.w	fp, r3, lsr #16
  405bda:	d020      	beq.n	405c1e <__multiply+0xfa>
  405bdc:	f8dc 3000 	ldr.w	r3, [ip]
  405be0:	4667      	mov	r7, ip
  405be2:	4618      	mov	r0, r3
  405be4:	464d      	mov	r5, r9
  405be6:	2100      	movs	r1, #0
  405be8:	e000      	b.n	405bec <__multiply+0xc8>
  405bea:	4637      	mov	r7, r6
  405bec:	882c      	ldrh	r4, [r5, #0]
  405bee:	0c00      	lsrs	r0, r0, #16
  405bf0:	fb0b 0004 	mla	r0, fp, r4, r0
  405bf4:	4401      	add	r1, r0
  405bf6:	b29c      	uxth	r4, r3
  405bf8:	463e      	mov	r6, r7
  405bfa:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
  405bfe:	f846 3b04 	str.w	r3, [r6], #4
  405c02:	6878      	ldr	r0, [r7, #4]
  405c04:	f855 4b04 	ldr.w	r4, [r5], #4
  405c08:	b283      	uxth	r3, r0
  405c0a:	0c24      	lsrs	r4, r4, #16
  405c0c:	fb0b 3404 	mla	r4, fp, r4, r3
  405c10:	eb04 4311 	add.w	r3, r4, r1, lsr #16
  405c14:	45ae      	cmp	lr, r5
  405c16:	ea4f 4113 	mov.w	r1, r3, lsr #16
  405c1a:	d8e6      	bhi.n	405bea <__multiply+0xc6>
  405c1c:	607b      	str	r3, [r7, #4]
  405c1e:	4592      	cmp	sl, r2
  405c20:	f10c 0c04 	add.w	ip, ip, #4
  405c24:	d8af      	bhi.n	405b86 <__multiply+0x62>
  405c26:	f8dd 9004 	ldr.w	r9, [sp, #4]
  405c2a:	f1b8 0f00 	cmp.w	r8, #0
  405c2e:	dd0b      	ble.n	405c48 <__multiply+0x124>
  405c30:	f859 3c04 	ldr.w	r3, [r9, #-4]
  405c34:	f1a9 0904 	sub.w	r9, r9, #4
  405c38:	b11b      	cbz	r3, 405c42 <__multiply+0x11e>
  405c3a:	e005      	b.n	405c48 <__multiply+0x124>
  405c3c:	f859 3d04 	ldr.w	r3, [r9, #-4]!
  405c40:	b913      	cbnz	r3, 405c48 <__multiply+0x124>
  405c42:	f1b8 0801 	subs.w	r8, r8, #1
  405c46:	d1f9      	bne.n	405c3c <__multiply+0x118>
  405c48:	9800      	ldr	r0, [sp, #0]
  405c4a:	f8c0 8010 	str.w	r8, [r0, #16]
  405c4e:	b003      	add	sp, #12
  405c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00405c54 <__pow5mult>:
  405c54:	f012 0303 	ands.w	r3, r2, #3
  405c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405c5c:	4614      	mov	r4, r2
  405c5e:	4607      	mov	r7, r0
  405c60:	d12e      	bne.n	405cc0 <__pow5mult+0x6c>
  405c62:	460e      	mov	r6, r1
  405c64:	10a4      	asrs	r4, r4, #2
  405c66:	d01c      	beq.n	405ca2 <__pow5mult+0x4e>
  405c68:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  405c6a:	b395      	cbz	r5, 405cd2 <__pow5mult+0x7e>
  405c6c:	07e3      	lsls	r3, r4, #31
  405c6e:	f04f 0800 	mov.w	r8, #0
  405c72:	d406      	bmi.n	405c82 <__pow5mult+0x2e>
  405c74:	1064      	asrs	r4, r4, #1
  405c76:	d014      	beq.n	405ca2 <__pow5mult+0x4e>
  405c78:	6828      	ldr	r0, [r5, #0]
  405c7a:	b1a8      	cbz	r0, 405ca8 <__pow5mult+0x54>
  405c7c:	4605      	mov	r5, r0
  405c7e:	07e3      	lsls	r3, r4, #31
  405c80:	d5f8      	bpl.n	405c74 <__pow5mult+0x20>
  405c82:	462a      	mov	r2, r5
  405c84:	4631      	mov	r1, r6
  405c86:	4638      	mov	r0, r7
  405c88:	f7ff ff4c 	bl	405b24 <__multiply>
  405c8c:	b1b6      	cbz	r6, 405cbc <__pow5mult+0x68>
  405c8e:	6872      	ldr	r2, [r6, #4]
  405c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  405c92:	1064      	asrs	r4, r4, #1
  405c94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  405c98:	6031      	str	r1, [r6, #0]
  405c9a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  405c9e:	4606      	mov	r6, r0
  405ca0:	d1ea      	bne.n	405c78 <__pow5mult+0x24>
  405ca2:	4630      	mov	r0, r6
  405ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405ca8:	462a      	mov	r2, r5
  405caa:	4629      	mov	r1, r5
  405cac:	4638      	mov	r0, r7
  405cae:	f7ff ff39 	bl	405b24 <__multiply>
  405cb2:	6028      	str	r0, [r5, #0]
  405cb4:	f8c0 8000 	str.w	r8, [r0]
  405cb8:	4605      	mov	r5, r0
  405cba:	e7e0      	b.n	405c7e <__pow5mult+0x2a>
  405cbc:	4606      	mov	r6, r0
  405cbe:	e7d9      	b.n	405c74 <__pow5mult+0x20>
  405cc0:	1e5a      	subs	r2, r3, #1
  405cc2:	4d0b      	ldr	r5, [pc, #44]	; (405cf0 <__pow5mult+0x9c>)
  405cc4:	2300      	movs	r3, #0
  405cc6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  405cca:	f7ff fe93 	bl	4059f4 <__multadd>
  405cce:	4606      	mov	r6, r0
  405cd0:	e7c8      	b.n	405c64 <__pow5mult+0x10>
  405cd2:	2101      	movs	r1, #1
  405cd4:	4638      	mov	r0, r7
  405cd6:	f7ff fe5d 	bl	405994 <_Balloc>
  405cda:	f240 2171 	movw	r1, #625	; 0x271
  405cde:	2201      	movs	r2, #1
  405ce0:	2300      	movs	r3, #0
  405ce2:	6141      	str	r1, [r0, #20]
  405ce4:	6102      	str	r2, [r0, #16]
  405ce6:	4605      	mov	r5, r0
  405ce8:	64b8      	str	r0, [r7, #72]	; 0x48
  405cea:	6003      	str	r3, [r0, #0]
  405cec:	e7be      	b.n	405c6c <__pow5mult+0x18>
  405cee:	bf00      	nop
  405cf0:	00406910 	.word	0x00406910

00405cf4 <__lshift>:
  405cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405cf8:	4691      	mov	r9, r2
  405cfa:	690a      	ldr	r2, [r1, #16]
  405cfc:	688b      	ldr	r3, [r1, #8]
  405cfe:	ea4f 1469 	mov.w	r4, r9, asr #5
  405d02:	eb04 0802 	add.w	r8, r4, r2
  405d06:	f108 0501 	add.w	r5, r8, #1
  405d0a:	429d      	cmp	r5, r3
  405d0c:	460e      	mov	r6, r1
  405d0e:	4682      	mov	sl, r0
  405d10:	6849      	ldr	r1, [r1, #4]
  405d12:	dd04      	ble.n	405d1e <__lshift+0x2a>
  405d14:	005b      	lsls	r3, r3, #1
  405d16:	429d      	cmp	r5, r3
  405d18:	f101 0101 	add.w	r1, r1, #1
  405d1c:	dcfa      	bgt.n	405d14 <__lshift+0x20>
  405d1e:	4650      	mov	r0, sl
  405d20:	f7ff fe38 	bl	405994 <_Balloc>
  405d24:	2c00      	cmp	r4, #0
  405d26:	f100 0214 	add.w	r2, r0, #20
  405d2a:	dd38      	ble.n	405d9e <__lshift+0xaa>
  405d2c:	eb02 0384 	add.w	r3, r2, r4, lsl #2
  405d30:	2100      	movs	r1, #0
  405d32:	f842 1b04 	str.w	r1, [r2], #4
  405d36:	4293      	cmp	r3, r2
  405d38:	d1fb      	bne.n	405d32 <__lshift+0x3e>
  405d3a:	6934      	ldr	r4, [r6, #16]
  405d3c:	f106 0114 	add.w	r1, r6, #20
  405d40:	f019 091f 	ands.w	r9, r9, #31
  405d44:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  405d48:	d021      	beq.n	405d8e <__lshift+0x9a>
  405d4a:	f1c9 0220 	rsb	r2, r9, #32
  405d4e:	2400      	movs	r4, #0
  405d50:	680f      	ldr	r7, [r1, #0]
  405d52:	fa07 fc09 	lsl.w	ip, r7, r9
  405d56:	ea4c 0404 	orr.w	r4, ip, r4
  405d5a:	469c      	mov	ip, r3
  405d5c:	f843 4b04 	str.w	r4, [r3], #4
  405d60:	f851 4b04 	ldr.w	r4, [r1], #4
  405d64:	458e      	cmp	lr, r1
  405d66:	fa24 f402 	lsr.w	r4, r4, r2
  405d6a:	d8f1      	bhi.n	405d50 <__lshift+0x5c>
  405d6c:	f8cc 4004 	str.w	r4, [ip, #4]
  405d70:	b10c      	cbz	r4, 405d76 <__lshift+0x82>
  405d72:	f108 0502 	add.w	r5, r8, #2
  405d76:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
  405d7a:	6872      	ldr	r2, [r6, #4]
  405d7c:	3d01      	subs	r5, #1
  405d7e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  405d82:	6105      	str	r5, [r0, #16]
  405d84:	6031      	str	r1, [r6, #0]
  405d86:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  405d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405d8e:	3b04      	subs	r3, #4
  405d90:	f851 2b04 	ldr.w	r2, [r1], #4
  405d94:	f843 2f04 	str.w	r2, [r3, #4]!
  405d98:	458e      	cmp	lr, r1
  405d9a:	d8f9      	bhi.n	405d90 <__lshift+0x9c>
  405d9c:	e7eb      	b.n	405d76 <__lshift+0x82>
  405d9e:	4613      	mov	r3, r2
  405da0:	e7cb      	b.n	405d3a <__lshift+0x46>
  405da2:	bf00      	nop

00405da4 <__mcmp>:
  405da4:	6902      	ldr	r2, [r0, #16]
  405da6:	690b      	ldr	r3, [r1, #16]
  405da8:	1ad2      	subs	r2, r2, r3
  405daa:	d112      	bne.n	405dd2 <__mcmp+0x2e>
  405dac:	009b      	lsls	r3, r3, #2
  405dae:	3014      	adds	r0, #20
  405db0:	3114      	adds	r1, #20
  405db2:	4419      	add	r1, r3
  405db4:	b410      	push	{r4}
  405db6:	4403      	add	r3, r0
  405db8:	e001      	b.n	405dbe <__mcmp+0x1a>
  405dba:	4298      	cmp	r0, r3
  405dbc:	d20b      	bcs.n	405dd6 <__mcmp+0x32>
  405dbe:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  405dc2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  405dc6:	4294      	cmp	r4, r2
  405dc8:	d0f7      	beq.n	405dba <__mcmp+0x16>
  405dca:	d307      	bcc.n	405ddc <__mcmp+0x38>
  405dcc:	2001      	movs	r0, #1
  405dce:	bc10      	pop	{r4}
  405dd0:	4770      	bx	lr
  405dd2:	4610      	mov	r0, r2
  405dd4:	4770      	bx	lr
  405dd6:	2000      	movs	r0, #0
  405dd8:	bc10      	pop	{r4}
  405dda:	4770      	bx	lr
  405ddc:	f04f 30ff 	mov.w	r0, #4294967295
  405de0:	e7f5      	b.n	405dce <__mcmp+0x2a>
  405de2:	bf00      	nop

00405de4 <__mdiff>:
  405de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405de8:	690b      	ldr	r3, [r1, #16]
  405dea:	460f      	mov	r7, r1
  405dec:	6911      	ldr	r1, [r2, #16]
  405dee:	1a5b      	subs	r3, r3, r1
  405df0:	2b00      	cmp	r3, #0
  405df2:	4690      	mov	r8, r2
  405df4:	d117      	bne.n	405e26 <__mdiff+0x42>
  405df6:	0089      	lsls	r1, r1, #2
  405df8:	f107 0214 	add.w	r2, r7, #20
  405dfc:	f108 0514 	add.w	r5, r8, #20
  405e00:	1853      	adds	r3, r2, r1
  405e02:	4429      	add	r1, r5
  405e04:	e001      	b.n	405e0a <__mdiff+0x26>
  405e06:	429a      	cmp	r2, r3
  405e08:	d25e      	bcs.n	405ec8 <__mdiff+0xe4>
  405e0a:	f853 6d04 	ldr.w	r6, [r3, #-4]!
  405e0e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  405e12:	42a6      	cmp	r6, r4
  405e14:	d0f7      	beq.n	405e06 <__mdiff+0x22>
  405e16:	d260      	bcs.n	405eda <__mdiff+0xf6>
  405e18:	463b      	mov	r3, r7
  405e1a:	4614      	mov	r4, r2
  405e1c:	4647      	mov	r7, r8
  405e1e:	f04f 0901 	mov.w	r9, #1
  405e22:	4698      	mov	r8, r3
  405e24:	e006      	b.n	405e34 <__mdiff+0x50>
  405e26:	db5d      	blt.n	405ee4 <__mdiff+0x100>
  405e28:	f107 0514 	add.w	r5, r7, #20
  405e2c:	f102 0414 	add.w	r4, r2, #20
  405e30:	f04f 0900 	mov.w	r9, #0
  405e34:	6879      	ldr	r1, [r7, #4]
  405e36:	f7ff fdad 	bl	405994 <_Balloc>
  405e3a:	f8d8 3010 	ldr.w	r3, [r8, #16]
  405e3e:	693e      	ldr	r6, [r7, #16]
  405e40:	f8c0 900c 	str.w	r9, [r0, #12]
  405e44:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  405e48:	46a6      	mov	lr, r4
  405e4a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  405e4e:	f100 0414 	add.w	r4, r0, #20
  405e52:	2300      	movs	r3, #0
  405e54:	f85e 1b04 	ldr.w	r1, [lr], #4
  405e58:	f855 8b04 	ldr.w	r8, [r5], #4
  405e5c:	b28a      	uxth	r2, r1
  405e5e:	fa13 f388 	uxtah	r3, r3, r8
  405e62:	0c09      	lsrs	r1, r1, #16
  405e64:	1a9a      	subs	r2, r3, r2
  405e66:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  405e6a:	eb03 4322 	add.w	r3, r3, r2, asr #16
  405e6e:	b292      	uxth	r2, r2
  405e70:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  405e74:	45f4      	cmp	ip, lr
  405e76:	f844 2b04 	str.w	r2, [r4], #4
  405e7a:	ea4f 4323 	mov.w	r3, r3, asr #16
  405e7e:	d8e9      	bhi.n	405e54 <__mdiff+0x70>
  405e80:	42af      	cmp	r7, r5
  405e82:	d917      	bls.n	405eb4 <__mdiff+0xd0>
  405e84:	46a4      	mov	ip, r4
  405e86:	4629      	mov	r1, r5
  405e88:	f851 eb04 	ldr.w	lr, [r1], #4
  405e8c:	fa13 f28e 	uxtah	r2, r3, lr
  405e90:	1413      	asrs	r3, r2, #16
  405e92:	eb03 431e 	add.w	r3, r3, lr, lsr #16
  405e96:	b292      	uxth	r2, r2
  405e98:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  405e9c:	428f      	cmp	r7, r1
  405e9e:	f84c 2b04 	str.w	r2, [ip], #4
  405ea2:	ea4f 4323 	mov.w	r3, r3, asr #16
  405ea6:	d8ef      	bhi.n	405e88 <__mdiff+0xa4>
  405ea8:	43ed      	mvns	r5, r5
  405eaa:	443d      	add	r5, r7
  405eac:	f025 0503 	bic.w	r5, r5, #3
  405eb0:	3504      	adds	r5, #4
  405eb2:	442c      	add	r4, r5
  405eb4:	3c04      	subs	r4, #4
  405eb6:	b922      	cbnz	r2, 405ec2 <__mdiff+0xde>
  405eb8:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  405ebc:	3e01      	subs	r6, #1
  405ebe:	2b00      	cmp	r3, #0
  405ec0:	d0fa      	beq.n	405eb8 <__mdiff+0xd4>
  405ec2:	6106      	str	r6, [r0, #16]
  405ec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405ec8:	2100      	movs	r1, #0
  405eca:	f7ff fd63 	bl	405994 <_Balloc>
  405ece:	2201      	movs	r2, #1
  405ed0:	2300      	movs	r3, #0
  405ed2:	6102      	str	r2, [r0, #16]
  405ed4:	6143      	str	r3, [r0, #20]
  405ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405eda:	462c      	mov	r4, r5
  405edc:	f04f 0900 	mov.w	r9, #0
  405ee0:	4615      	mov	r5, r2
  405ee2:	e7a7      	b.n	405e34 <__mdiff+0x50>
  405ee4:	463b      	mov	r3, r7
  405ee6:	f107 0414 	add.w	r4, r7, #20
  405eea:	f108 0514 	add.w	r5, r8, #20
  405eee:	4647      	mov	r7, r8
  405ef0:	f04f 0901 	mov.w	r9, #1
  405ef4:	4698      	mov	r8, r3
  405ef6:	e79d      	b.n	405e34 <__mdiff+0x50>

00405ef8 <__d2b>:
  405ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405efc:	b082      	sub	sp, #8
  405efe:	2101      	movs	r1, #1
  405f00:	461c      	mov	r4, r3
  405f02:	f3c3 570a 	ubfx	r7, r3, #20, #11
  405f06:	4615      	mov	r5, r2
  405f08:	9e08      	ldr	r6, [sp, #32]
  405f0a:	f7ff fd43 	bl	405994 <_Balloc>
  405f0e:	f3c4 0413 	ubfx	r4, r4, #0, #20
  405f12:	4680      	mov	r8, r0
  405f14:	b10f      	cbz	r7, 405f1a <__d2b+0x22>
  405f16:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  405f1a:	9401      	str	r4, [sp, #4]
  405f1c:	b31d      	cbz	r5, 405f66 <__d2b+0x6e>
  405f1e:	a802      	add	r0, sp, #8
  405f20:	f840 5d08 	str.w	r5, [r0, #-8]!
  405f24:	f7ff fdc6 	bl	405ab4 <__lo0bits>
  405f28:	2800      	cmp	r0, #0
  405f2a:	d134      	bne.n	405f96 <__d2b+0x9e>
  405f2c:	e89d 000c 	ldmia.w	sp, {r2, r3}
  405f30:	f8c8 2014 	str.w	r2, [r8, #20]
  405f34:	2b00      	cmp	r3, #0
  405f36:	bf0c      	ite	eq
  405f38:	2101      	moveq	r1, #1
  405f3a:	2102      	movne	r1, #2
  405f3c:	f8c8 3018 	str.w	r3, [r8, #24]
  405f40:	f8c8 1010 	str.w	r1, [r8, #16]
  405f44:	b9df      	cbnz	r7, 405f7e <__d2b+0x86>
  405f46:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  405f4a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  405f4e:	6030      	str	r0, [r6, #0]
  405f50:	6918      	ldr	r0, [r3, #16]
  405f52:	f7ff fd8f 	bl	405a74 <__hi0bits>
  405f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405f58:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  405f5c:	6018      	str	r0, [r3, #0]
  405f5e:	4640      	mov	r0, r8
  405f60:	b002      	add	sp, #8
  405f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405f66:	a801      	add	r0, sp, #4
  405f68:	f7ff fda4 	bl	405ab4 <__lo0bits>
  405f6c:	9b01      	ldr	r3, [sp, #4]
  405f6e:	f8c8 3014 	str.w	r3, [r8, #20]
  405f72:	2101      	movs	r1, #1
  405f74:	3020      	adds	r0, #32
  405f76:	f8c8 1010 	str.w	r1, [r8, #16]
  405f7a:	2f00      	cmp	r7, #0
  405f7c:	d0e3      	beq.n	405f46 <__d2b+0x4e>
  405f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405f80:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  405f84:	4407      	add	r7, r0
  405f86:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  405f8a:	6037      	str	r7, [r6, #0]
  405f8c:	6018      	str	r0, [r3, #0]
  405f8e:	4640      	mov	r0, r8
  405f90:	b002      	add	sp, #8
  405f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405f96:	e89d 000c 	ldmia.w	sp, {r2, r3}
  405f9a:	f1c0 0120 	rsb	r1, r0, #32
  405f9e:	fa03 f101 	lsl.w	r1, r3, r1
  405fa2:	430a      	orrs	r2, r1
  405fa4:	40c3      	lsrs	r3, r0
  405fa6:	9301      	str	r3, [sp, #4]
  405fa8:	f8c8 2014 	str.w	r2, [r8, #20]
  405fac:	e7c2      	b.n	405f34 <__d2b+0x3c>
  405fae:	bf00      	nop

00405fb0 <_realloc_r>:
  405fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405fb4:	4617      	mov	r7, r2
  405fb6:	b083      	sub	sp, #12
  405fb8:	2900      	cmp	r1, #0
  405fba:	f000 80c1 	beq.w	406140 <_realloc_r+0x190>
  405fbe:	460e      	mov	r6, r1
  405fc0:	4681      	mov	r9, r0
  405fc2:	f107 050b 	add.w	r5, r7, #11
  405fc6:	f7ff fce1 	bl	40598c <__malloc_lock>
  405fca:	f856 ec04 	ldr.w	lr, [r6, #-4]
  405fce:	2d16      	cmp	r5, #22
  405fd0:	f02e 0403 	bic.w	r4, lr, #3
  405fd4:	f1a6 0808 	sub.w	r8, r6, #8
  405fd8:	d840      	bhi.n	40605c <_realloc_r+0xac>
  405fda:	2210      	movs	r2, #16
  405fdc:	4615      	mov	r5, r2
  405fde:	42af      	cmp	r7, r5
  405fe0:	d841      	bhi.n	406066 <_realloc_r+0xb6>
  405fe2:	4294      	cmp	r4, r2
  405fe4:	da75      	bge.n	4060d2 <_realloc_r+0x122>
  405fe6:	4bc9      	ldr	r3, [pc, #804]	; (40630c <_realloc_r+0x35c>)
  405fe8:	6899      	ldr	r1, [r3, #8]
  405fea:	eb08 0004 	add.w	r0, r8, r4
  405fee:	4288      	cmp	r0, r1
  405ff0:	6841      	ldr	r1, [r0, #4]
  405ff2:	f000 80d9 	beq.w	4061a8 <_realloc_r+0x1f8>
  405ff6:	f021 0301 	bic.w	r3, r1, #1
  405ffa:	4403      	add	r3, r0
  405ffc:	685b      	ldr	r3, [r3, #4]
  405ffe:	07db      	lsls	r3, r3, #31
  406000:	d57d      	bpl.n	4060fe <_realloc_r+0x14e>
  406002:	f01e 0f01 	tst.w	lr, #1
  406006:	d035      	beq.n	406074 <_realloc_r+0xc4>
  406008:	4639      	mov	r1, r7
  40600a:	4648      	mov	r0, r9
  40600c:	f7ff f8b2 	bl	405174 <_malloc_r>
  406010:	4607      	mov	r7, r0
  406012:	b1e0      	cbz	r0, 40604e <_realloc_r+0x9e>
  406014:	f856 3c04 	ldr.w	r3, [r6, #-4]
  406018:	f023 0301 	bic.w	r3, r3, #1
  40601c:	4443      	add	r3, r8
  40601e:	f1a0 0208 	sub.w	r2, r0, #8
  406022:	429a      	cmp	r2, r3
  406024:	f000 8144 	beq.w	4062b0 <_realloc_r+0x300>
  406028:	1f22      	subs	r2, r4, #4
  40602a:	2a24      	cmp	r2, #36	; 0x24
  40602c:	f200 8131 	bhi.w	406292 <_realloc_r+0x2e2>
  406030:	2a13      	cmp	r2, #19
  406032:	f200 8104 	bhi.w	40623e <_realloc_r+0x28e>
  406036:	4603      	mov	r3, r0
  406038:	4632      	mov	r2, r6
  40603a:	6811      	ldr	r1, [r2, #0]
  40603c:	6019      	str	r1, [r3, #0]
  40603e:	6851      	ldr	r1, [r2, #4]
  406040:	6059      	str	r1, [r3, #4]
  406042:	6892      	ldr	r2, [r2, #8]
  406044:	609a      	str	r2, [r3, #8]
  406046:	4631      	mov	r1, r6
  406048:	4648      	mov	r0, r9
  40604a:	f7fe ffa7 	bl	404f9c <_free_r>
  40604e:	4648      	mov	r0, r9
  406050:	f7ff fc9e 	bl	405990 <__malloc_unlock>
  406054:	4638      	mov	r0, r7
  406056:	b003      	add	sp, #12
  406058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40605c:	f025 0507 	bic.w	r5, r5, #7
  406060:	2d00      	cmp	r5, #0
  406062:	462a      	mov	r2, r5
  406064:	dabb      	bge.n	405fde <_realloc_r+0x2e>
  406066:	230c      	movs	r3, #12
  406068:	2000      	movs	r0, #0
  40606a:	f8c9 3000 	str.w	r3, [r9]
  40606e:	b003      	add	sp, #12
  406070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406074:	f856 3c08 	ldr.w	r3, [r6, #-8]
  406078:	ebc3 0a08 	rsb	sl, r3, r8
  40607c:	f8da 3004 	ldr.w	r3, [sl, #4]
  406080:	f023 0c03 	bic.w	ip, r3, #3
  406084:	eb04 030c 	add.w	r3, r4, ip
  406088:	4293      	cmp	r3, r2
  40608a:	dbbd      	blt.n	406008 <_realloc_r+0x58>
  40608c:	4657      	mov	r7, sl
  40608e:	f8da 100c 	ldr.w	r1, [sl, #12]
  406092:	f857 0f08 	ldr.w	r0, [r7, #8]!
  406096:	1f22      	subs	r2, r4, #4
  406098:	2a24      	cmp	r2, #36	; 0x24
  40609a:	60c1      	str	r1, [r0, #12]
  40609c:	6088      	str	r0, [r1, #8]
  40609e:	f200 8117 	bhi.w	4062d0 <_realloc_r+0x320>
  4060a2:	2a13      	cmp	r2, #19
  4060a4:	f240 8112 	bls.w	4062cc <_realloc_r+0x31c>
  4060a8:	6831      	ldr	r1, [r6, #0]
  4060aa:	f8ca 1008 	str.w	r1, [sl, #8]
  4060ae:	6871      	ldr	r1, [r6, #4]
  4060b0:	f8ca 100c 	str.w	r1, [sl, #12]
  4060b4:	2a1b      	cmp	r2, #27
  4060b6:	f200 812b 	bhi.w	406310 <_realloc_r+0x360>
  4060ba:	3608      	adds	r6, #8
  4060bc:	f10a 0210 	add.w	r2, sl, #16
  4060c0:	6831      	ldr	r1, [r6, #0]
  4060c2:	6011      	str	r1, [r2, #0]
  4060c4:	6871      	ldr	r1, [r6, #4]
  4060c6:	6051      	str	r1, [r2, #4]
  4060c8:	68b1      	ldr	r1, [r6, #8]
  4060ca:	6091      	str	r1, [r2, #8]
  4060cc:	463e      	mov	r6, r7
  4060ce:	461c      	mov	r4, r3
  4060d0:	46d0      	mov	r8, sl
  4060d2:	1b63      	subs	r3, r4, r5
  4060d4:	2b0f      	cmp	r3, #15
  4060d6:	d81d      	bhi.n	406114 <_realloc_r+0x164>
  4060d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
  4060dc:	f003 0301 	and.w	r3, r3, #1
  4060e0:	4323      	orrs	r3, r4
  4060e2:	4444      	add	r4, r8
  4060e4:	f8c8 3004 	str.w	r3, [r8, #4]
  4060e8:	6863      	ldr	r3, [r4, #4]
  4060ea:	f043 0301 	orr.w	r3, r3, #1
  4060ee:	6063      	str	r3, [r4, #4]
  4060f0:	4648      	mov	r0, r9
  4060f2:	f7ff fc4d 	bl	405990 <__malloc_unlock>
  4060f6:	4630      	mov	r0, r6
  4060f8:	b003      	add	sp, #12
  4060fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4060fe:	f021 0103 	bic.w	r1, r1, #3
  406102:	4421      	add	r1, r4
  406104:	4291      	cmp	r1, r2
  406106:	db21      	blt.n	40614c <_realloc_r+0x19c>
  406108:	68c3      	ldr	r3, [r0, #12]
  40610a:	6882      	ldr	r2, [r0, #8]
  40610c:	460c      	mov	r4, r1
  40610e:	60d3      	str	r3, [r2, #12]
  406110:	609a      	str	r2, [r3, #8]
  406112:	e7de      	b.n	4060d2 <_realloc_r+0x122>
  406114:	f8d8 2004 	ldr.w	r2, [r8, #4]
  406118:	eb08 0105 	add.w	r1, r8, r5
  40611c:	f002 0201 	and.w	r2, r2, #1
  406120:	4315      	orrs	r5, r2
  406122:	f043 0201 	orr.w	r2, r3, #1
  406126:	440b      	add	r3, r1
  406128:	f8c8 5004 	str.w	r5, [r8, #4]
  40612c:	604a      	str	r2, [r1, #4]
  40612e:	685a      	ldr	r2, [r3, #4]
  406130:	f042 0201 	orr.w	r2, r2, #1
  406134:	3108      	adds	r1, #8
  406136:	605a      	str	r2, [r3, #4]
  406138:	4648      	mov	r0, r9
  40613a:	f7fe ff2f 	bl	404f9c <_free_r>
  40613e:	e7d7      	b.n	4060f0 <_realloc_r+0x140>
  406140:	4611      	mov	r1, r2
  406142:	b003      	add	sp, #12
  406144:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406148:	f7ff b814 	b.w	405174 <_malloc_r>
  40614c:	f01e 0f01 	tst.w	lr, #1
  406150:	f47f af5a 	bne.w	406008 <_realloc_r+0x58>
  406154:	f856 3c08 	ldr.w	r3, [r6, #-8]
  406158:	ebc3 0a08 	rsb	sl, r3, r8
  40615c:	f8da 3004 	ldr.w	r3, [sl, #4]
  406160:	f023 0c03 	bic.w	ip, r3, #3
  406164:	eb01 0e0c 	add.w	lr, r1, ip
  406168:	4596      	cmp	lr, r2
  40616a:	db8b      	blt.n	406084 <_realloc_r+0xd4>
  40616c:	68c3      	ldr	r3, [r0, #12]
  40616e:	6882      	ldr	r2, [r0, #8]
  406170:	4657      	mov	r7, sl
  406172:	60d3      	str	r3, [r2, #12]
  406174:	609a      	str	r2, [r3, #8]
  406176:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40617a:	f8da 300c 	ldr.w	r3, [sl, #12]
  40617e:	60cb      	str	r3, [r1, #12]
  406180:	1f22      	subs	r2, r4, #4
  406182:	2a24      	cmp	r2, #36	; 0x24
  406184:	6099      	str	r1, [r3, #8]
  406186:	f200 8099 	bhi.w	4062bc <_realloc_r+0x30c>
  40618a:	2a13      	cmp	r2, #19
  40618c:	d962      	bls.n	406254 <_realloc_r+0x2a4>
  40618e:	6833      	ldr	r3, [r6, #0]
  406190:	f8ca 3008 	str.w	r3, [sl, #8]
  406194:	6873      	ldr	r3, [r6, #4]
  406196:	f8ca 300c 	str.w	r3, [sl, #12]
  40619a:	2a1b      	cmp	r2, #27
  40619c:	f200 80a0 	bhi.w	4062e0 <_realloc_r+0x330>
  4061a0:	3608      	adds	r6, #8
  4061a2:	f10a 0310 	add.w	r3, sl, #16
  4061a6:	e056      	b.n	406256 <_realloc_r+0x2a6>
  4061a8:	f021 0b03 	bic.w	fp, r1, #3
  4061ac:	44a3      	add	fp, r4
  4061ae:	f105 0010 	add.w	r0, r5, #16
  4061b2:	4583      	cmp	fp, r0
  4061b4:	da59      	bge.n	40626a <_realloc_r+0x2ba>
  4061b6:	f01e 0f01 	tst.w	lr, #1
  4061ba:	f47f af25 	bne.w	406008 <_realloc_r+0x58>
  4061be:	f856 1c08 	ldr.w	r1, [r6, #-8]
  4061c2:	ebc1 0a08 	rsb	sl, r1, r8
  4061c6:	f8da 1004 	ldr.w	r1, [sl, #4]
  4061ca:	f021 0c03 	bic.w	ip, r1, #3
  4061ce:	44e3      	add	fp, ip
  4061d0:	4558      	cmp	r0, fp
  4061d2:	f73f af57 	bgt.w	406084 <_realloc_r+0xd4>
  4061d6:	4657      	mov	r7, sl
  4061d8:	f8da 100c 	ldr.w	r1, [sl, #12]
  4061dc:	f857 0f08 	ldr.w	r0, [r7, #8]!
  4061e0:	1f22      	subs	r2, r4, #4
  4061e2:	2a24      	cmp	r2, #36	; 0x24
  4061e4:	60c1      	str	r1, [r0, #12]
  4061e6:	6088      	str	r0, [r1, #8]
  4061e8:	f200 80b4 	bhi.w	406354 <_realloc_r+0x3a4>
  4061ec:	2a13      	cmp	r2, #19
  4061ee:	f240 80a5 	bls.w	40633c <_realloc_r+0x38c>
  4061f2:	6831      	ldr	r1, [r6, #0]
  4061f4:	f8ca 1008 	str.w	r1, [sl, #8]
  4061f8:	6871      	ldr	r1, [r6, #4]
  4061fa:	f8ca 100c 	str.w	r1, [sl, #12]
  4061fe:	2a1b      	cmp	r2, #27
  406200:	f200 80af 	bhi.w	406362 <_realloc_r+0x3b2>
  406204:	3608      	adds	r6, #8
  406206:	f10a 0210 	add.w	r2, sl, #16
  40620a:	6831      	ldr	r1, [r6, #0]
  40620c:	6011      	str	r1, [r2, #0]
  40620e:	6871      	ldr	r1, [r6, #4]
  406210:	6051      	str	r1, [r2, #4]
  406212:	68b1      	ldr	r1, [r6, #8]
  406214:	6091      	str	r1, [r2, #8]
  406216:	eb0a 0105 	add.w	r1, sl, r5
  40621a:	ebc5 020b 	rsb	r2, r5, fp
  40621e:	f042 0201 	orr.w	r2, r2, #1
  406222:	6099      	str	r1, [r3, #8]
  406224:	604a      	str	r2, [r1, #4]
  406226:	f8da 3004 	ldr.w	r3, [sl, #4]
  40622a:	f003 0301 	and.w	r3, r3, #1
  40622e:	431d      	orrs	r5, r3
  406230:	4648      	mov	r0, r9
  406232:	f8ca 5004 	str.w	r5, [sl, #4]
  406236:	f7ff fbab 	bl	405990 <__malloc_unlock>
  40623a:	4638      	mov	r0, r7
  40623c:	e75c      	b.n	4060f8 <_realloc_r+0x148>
  40623e:	6833      	ldr	r3, [r6, #0]
  406240:	6003      	str	r3, [r0, #0]
  406242:	6873      	ldr	r3, [r6, #4]
  406244:	6043      	str	r3, [r0, #4]
  406246:	2a1b      	cmp	r2, #27
  406248:	d827      	bhi.n	40629a <_realloc_r+0x2ea>
  40624a:	f100 0308 	add.w	r3, r0, #8
  40624e:	f106 0208 	add.w	r2, r6, #8
  406252:	e6f2      	b.n	40603a <_realloc_r+0x8a>
  406254:	463b      	mov	r3, r7
  406256:	6832      	ldr	r2, [r6, #0]
  406258:	601a      	str	r2, [r3, #0]
  40625a:	6872      	ldr	r2, [r6, #4]
  40625c:	605a      	str	r2, [r3, #4]
  40625e:	68b2      	ldr	r2, [r6, #8]
  406260:	609a      	str	r2, [r3, #8]
  406262:	463e      	mov	r6, r7
  406264:	4674      	mov	r4, lr
  406266:	46d0      	mov	r8, sl
  406268:	e733      	b.n	4060d2 <_realloc_r+0x122>
  40626a:	eb08 0105 	add.w	r1, r8, r5
  40626e:	ebc5 0b0b 	rsb	fp, r5, fp
  406272:	f04b 0201 	orr.w	r2, fp, #1
  406276:	6099      	str	r1, [r3, #8]
  406278:	604a      	str	r2, [r1, #4]
  40627a:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40627e:	f003 0301 	and.w	r3, r3, #1
  406282:	431d      	orrs	r5, r3
  406284:	4648      	mov	r0, r9
  406286:	f846 5c04 	str.w	r5, [r6, #-4]
  40628a:	f7ff fb81 	bl	405990 <__malloc_unlock>
  40628e:	4630      	mov	r0, r6
  406290:	e732      	b.n	4060f8 <_realloc_r+0x148>
  406292:	4631      	mov	r1, r6
  406294:	f7ff fb16 	bl	4058c4 <memmove>
  406298:	e6d5      	b.n	406046 <_realloc_r+0x96>
  40629a:	68b3      	ldr	r3, [r6, #8]
  40629c:	6083      	str	r3, [r0, #8]
  40629e:	68f3      	ldr	r3, [r6, #12]
  4062a0:	60c3      	str	r3, [r0, #12]
  4062a2:	2a24      	cmp	r2, #36	; 0x24
  4062a4:	d028      	beq.n	4062f8 <_realloc_r+0x348>
  4062a6:	f100 0310 	add.w	r3, r0, #16
  4062aa:	f106 0210 	add.w	r2, r6, #16
  4062ae:	e6c4      	b.n	40603a <_realloc_r+0x8a>
  4062b0:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4062b4:	f023 0303 	bic.w	r3, r3, #3
  4062b8:	441c      	add	r4, r3
  4062ba:	e70a      	b.n	4060d2 <_realloc_r+0x122>
  4062bc:	4631      	mov	r1, r6
  4062be:	4638      	mov	r0, r7
  4062c0:	4674      	mov	r4, lr
  4062c2:	46d0      	mov	r8, sl
  4062c4:	f7ff fafe 	bl	4058c4 <memmove>
  4062c8:	463e      	mov	r6, r7
  4062ca:	e702      	b.n	4060d2 <_realloc_r+0x122>
  4062cc:	463a      	mov	r2, r7
  4062ce:	e6f7      	b.n	4060c0 <_realloc_r+0x110>
  4062d0:	4631      	mov	r1, r6
  4062d2:	4638      	mov	r0, r7
  4062d4:	461c      	mov	r4, r3
  4062d6:	46d0      	mov	r8, sl
  4062d8:	f7ff faf4 	bl	4058c4 <memmove>
  4062dc:	463e      	mov	r6, r7
  4062de:	e6f8      	b.n	4060d2 <_realloc_r+0x122>
  4062e0:	68b3      	ldr	r3, [r6, #8]
  4062e2:	f8ca 3010 	str.w	r3, [sl, #16]
  4062e6:	68f3      	ldr	r3, [r6, #12]
  4062e8:	f8ca 3014 	str.w	r3, [sl, #20]
  4062ec:	2a24      	cmp	r2, #36	; 0x24
  4062ee:	d01b      	beq.n	406328 <_realloc_r+0x378>
  4062f0:	3610      	adds	r6, #16
  4062f2:	f10a 0318 	add.w	r3, sl, #24
  4062f6:	e7ae      	b.n	406256 <_realloc_r+0x2a6>
  4062f8:	6933      	ldr	r3, [r6, #16]
  4062fa:	6103      	str	r3, [r0, #16]
  4062fc:	6973      	ldr	r3, [r6, #20]
  4062fe:	6143      	str	r3, [r0, #20]
  406300:	f106 0218 	add.w	r2, r6, #24
  406304:	f100 0318 	add.w	r3, r0, #24
  406308:	e697      	b.n	40603a <_realloc_r+0x8a>
  40630a:	bf00      	nop
  40630c:	2000087c 	.word	0x2000087c
  406310:	68b1      	ldr	r1, [r6, #8]
  406312:	f8ca 1010 	str.w	r1, [sl, #16]
  406316:	68f1      	ldr	r1, [r6, #12]
  406318:	f8ca 1014 	str.w	r1, [sl, #20]
  40631c:	2a24      	cmp	r2, #36	; 0x24
  40631e:	d00f      	beq.n	406340 <_realloc_r+0x390>
  406320:	3610      	adds	r6, #16
  406322:	f10a 0218 	add.w	r2, sl, #24
  406326:	e6cb      	b.n	4060c0 <_realloc_r+0x110>
  406328:	6933      	ldr	r3, [r6, #16]
  40632a:	f8ca 3018 	str.w	r3, [sl, #24]
  40632e:	6973      	ldr	r3, [r6, #20]
  406330:	f8ca 301c 	str.w	r3, [sl, #28]
  406334:	3618      	adds	r6, #24
  406336:	f10a 0320 	add.w	r3, sl, #32
  40633a:	e78c      	b.n	406256 <_realloc_r+0x2a6>
  40633c:	463a      	mov	r2, r7
  40633e:	e764      	b.n	40620a <_realloc_r+0x25a>
  406340:	6932      	ldr	r2, [r6, #16]
  406342:	f8ca 2018 	str.w	r2, [sl, #24]
  406346:	6972      	ldr	r2, [r6, #20]
  406348:	f8ca 201c 	str.w	r2, [sl, #28]
  40634c:	3618      	adds	r6, #24
  40634e:	f10a 0220 	add.w	r2, sl, #32
  406352:	e6b5      	b.n	4060c0 <_realloc_r+0x110>
  406354:	4631      	mov	r1, r6
  406356:	4638      	mov	r0, r7
  406358:	9301      	str	r3, [sp, #4]
  40635a:	f7ff fab3 	bl	4058c4 <memmove>
  40635e:	9b01      	ldr	r3, [sp, #4]
  406360:	e759      	b.n	406216 <_realloc_r+0x266>
  406362:	68b1      	ldr	r1, [r6, #8]
  406364:	f8ca 1010 	str.w	r1, [sl, #16]
  406368:	68f1      	ldr	r1, [r6, #12]
  40636a:	f8ca 1014 	str.w	r1, [sl, #20]
  40636e:	2a24      	cmp	r2, #36	; 0x24
  406370:	d003      	beq.n	40637a <_realloc_r+0x3ca>
  406372:	3610      	adds	r6, #16
  406374:	f10a 0218 	add.w	r2, sl, #24
  406378:	e747      	b.n	40620a <_realloc_r+0x25a>
  40637a:	6932      	ldr	r2, [r6, #16]
  40637c:	f8ca 2018 	str.w	r2, [sl, #24]
  406380:	6972      	ldr	r2, [r6, #20]
  406382:	f8ca 201c 	str.w	r2, [sl, #28]
  406386:	3618      	adds	r6, #24
  406388:	f10a 0220 	add.w	r2, sl, #32
  40638c:	e73d      	b.n	40620a <_realloc_r+0x25a>
  40638e:	bf00      	nop

00406390 <_sbrk_r>:
  406390:	b538      	push	{r3, r4, r5, lr}
  406392:	4c07      	ldr	r4, [pc, #28]	; (4063b0 <_sbrk_r+0x20>)
  406394:	2300      	movs	r3, #0
  406396:	4605      	mov	r5, r0
  406398:	4608      	mov	r0, r1
  40639a:	6023      	str	r3, [r4, #0]
  40639c:	f7fb fa02 	bl	4017a4 <_sbrk>
  4063a0:	1c43      	adds	r3, r0, #1
  4063a2:	d000      	beq.n	4063a6 <_sbrk_r+0x16>
  4063a4:	bd38      	pop	{r3, r4, r5, pc}
  4063a6:	6823      	ldr	r3, [r4, #0]
  4063a8:	2b00      	cmp	r3, #0
  4063aa:	d0fb      	beq.n	4063a4 <_sbrk_r+0x14>
  4063ac:	602b      	str	r3, [r5, #0]
  4063ae:	bd38      	pop	{r3, r4, r5, pc}
  4063b0:	20000da4 	.word	0x20000da4

004063b4 <__ssprint_r>:
  4063b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4063b8:	6893      	ldr	r3, [r2, #8]
  4063ba:	b083      	sub	sp, #12
  4063bc:	4690      	mov	r8, r2
  4063be:	2b00      	cmp	r3, #0
  4063c0:	d072      	beq.n	4064a8 <__ssprint_r+0xf4>
  4063c2:	4683      	mov	fp, r0
  4063c4:	f04f 0900 	mov.w	r9, #0
  4063c8:	6816      	ldr	r6, [r2, #0]
  4063ca:	6808      	ldr	r0, [r1, #0]
  4063cc:	688b      	ldr	r3, [r1, #8]
  4063ce:	460d      	mov	r5, r1
  4063d0:	464c      	mov	r4, r9
  4063d2:	2c00      	cmp	r4, #0
  4063d4:	d045      	beq.n	406462 <__ssprint_r+0xae>
  4063d6:	429c      	cmp	r4, r3
  4063d8:	461f      	mov	r7, r3
  4063da:	469a      	mov	sl, r3
  4063dc:	d346      	bcc.n	40646c <__ssprint_r+0xb8>
  4063de:	89ab      	ldrh	r3, [r5, #12]
  4063e0:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4063e4:	d02d      	beq.n	406442 <__ssprint_r+0x8e>
  4063e6:	696f      	ldr	r7, [r5, #20]
  4063e8:	6929      	ldr	r1, [r5, #16]
  4063ea:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  4063ee:	ebc1 0a00 	rsb	sl, r1, r0
  4063f2:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  4063f6:	1c60      	adds	r0, r4, #1
  4063f8:	107f      	asrs	r7, r7, #1
  4063fa:	4450      	add	r0, sl
  4063fc:	42b8      	cmp	r0, r7
  4063fe:	463a      	mov	r2, r7
  406400:	bf84      	itt	hi
  406402:	4607      	movhi	r7, r0
  406404:	463a      	movhi	r2, r7
  406406:	055b      	lsls	r3, r3, #21
  406408:	d533      	bpl.n	406472 <__ssprint_r+0xbe>
  40640a:	4611      	mov	r1, r2
  40640c:	4658      	mov	r0, fp
  40640e:	f7fe feb1 	bl	405174 <_malloc_r>
  406412:	2800      	cmp	r0, #0
  406414:	d037      	beq.n	406486 <__ssprint_r+0xd2>
  406416:	4652      	mov	r2, sl
  406418:	6929      	ldr	r1, [r5, #16]
  40641a:	9001      	str	r0, [sp, #4]
  40641c:	f7ff f9b8 	bl	405790 <memcpy>
  406420:	89aa      	ldrh	r2, [r5, #12]
  406422:	9b01      	ldr	r3, [sp, #4]
  406424:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  406428:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40642c:	81aa      	strh	r2, [r5, #12]
  40642e:	ebca 0207 	rsb	r2, sl, r7
  406432:	eb03 000a 	add.w	r0, r3, sl
  406436:	616f      	str	r7, [r5, #20]
  406438:	612b      	str	r3, [r5, #16]
  40643a:	6028      	str	r0, [r5, #0]
  40643c:	60aa      	str	r2, [r5, #8]
  40643e:	4627      	mov	r7, r4
  406440:	46a2      	mov	sl, r4
  406442:	4652      	mov	r2, sl
  406444:	4649      	mov	r1, r9
  406446:	f7ff fa3d 	bl	4058c4 <memmove>
  40644a:	f8d8 2008 	ldr.w	r2, [r8, #8]
  40644e:	68ab      	ldr	r3, [r5, #8]
  406450:	6828      	ldr	r0, [r5, #0]
  406452:	1bdb      	subs	r3, r3, r7
  406454:	4450      	add	r0, sl
  406456:	1b14      	subs	r4, r2, r4
  406458:	60ab      	str	r3, [r5, #8]
  40645a:	6028      	str	r0, [r5, #0]
  40645c:	f8c8 4008 	str.w	r4, [r8, #8]
  406460:	b314      	cbz	r4, 4064a8 <__ssprint_r+0xf4>
  406462:	f8d6 9000 	ldr.w	r9, [r6]
  406466:	6874      	ldr	r4, [r6, #4]
  406468:	3608      	adds	r6, #8
  40646a:	e7b2      	b.n	4063d2 <__ssprint_r+0x1e>
  40646c:	4627      	mov	r7, r4
  40646e:	46a2      	mov	sl, r4
  406470:	e7e7      	b.n	406442 <__ssprint_r+0x8e>
  406472:	4658      	mov	r0, fp
  406474:	f7ff fd9c 	bl	405fb0 <_realloc_r>
  406478:	4603      	mov	r3, r0
  40647a:	2800      	cmp	r0, #0
  40647c:	d1d7      	bne.n	40642e <__ssprint_r+0x7a>
  40647e:	6929      	ldr	r1, [r5, #16]
  406480:	4658      	mov	r0, fp
  406482:	f7fe fd8b 	bl	404f9c <_free_r>
  406486:	230c      	movs	r3, #12
  406488:	f8cb 3000 	str.w	r3, [fp]
  40648c:	89ab      	ldrh	r3, [r5, #12]
  40648e:	2200      	movs	r2, #0
  406490:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406494:	f04f 30ff 	mov.w	r0, #4294967295
  406498:	81ab      	strh	r3, [r5, #12]
  40649a:	f8c8 2008 	str.w	r2, [r8, #8]
  40649e:	f8c8 2004 	str.w	r2, [r8, #4]
  4064a2:	b003      	add	sp, #12
  4064a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4064a8:	2000      	movs	r0, #0
  4064aa:	f8c8 0004 	str.w	r0, [r8, #4]
  4064ae:	b003      	add	sp, #12
  4064b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004064b4 <__register_exitproc>:
  4064b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4064b8:	4c25      	ldr	r4, [pc, #148]	; (406550 <__register_exitproc+0x9c>)
  4064ba:	6825      	ldr	r5, [r4, #0]
  4064bc:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  4064c0:	4606      	mov	r6, r0
  4064c2:	4688      	mov	r8, r1
  4064c4:	4692      	mov	sl, r2
  4064c6:	4699      	mov	r9, r3
  4064c8:	b3c4      	cbz	r4, 40653c <__register_exitproc+0x88>
  4064ca:	6860      	ldr	r0, [r4, #4]
  4064cc:	281f      	cmp	r0, #31
  4064ce:	dc17      	bgt.n	406500 <__register_exitproc+0x4c>
  4064d0:	1c43      	adds	r3, r0, #1
  4064d2:	b176      	cbz	r6, 4064f2 <__register_exitproc+0x3e>
  4064d4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  4064d8:	2201      	movs	r2, #1
  4064da:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  4064de:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  4064e2:	4082      	lsls	r2, r0
  4064e4:	4311      	orrs	r1, r2
  4064e6:	2e02      	cmp	r6, #2
  4064e8:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  4064ec:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  4064f0:	d01e      	beq.n	406530 <__register_exitproc+0x7c>
  4064f2:	3002      	adds	r0, #2
  4064f4:	6063      	str	r3, [r4, #4]
  4064f6:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  4064fa:	2000      	movs	r0, #0
  4064fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406500:	4b14      	ldr	r3, [pc, #80]	; (406554 <__register_exitproc+0xa0>)
  406502:	b303      	cbz	r3, 406546 <__register_exitproc+0x92>
  406504:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406508:	f3af 8000 	nop.w
  40650c:	4604      	mov	r4, r0
  40650e:	b1d0      	cbz	r0, 406546 <__register_exitproc+0x92>
  406510:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  406514:	2700      	movs	r7, #0
  406516:	e880 0088 	stmia.w	r0, {r3, r7}
  40651a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40651e:	4638      	mov	r0, r7
  406520:	2301      	movs	r3, #1
  406522:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  406526:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40652a:	2e00      	cmp	r6, #0
  40652c:	d0e1      	beq.n	4064f2 <__register_exitproc+0x3e>
  40652e:	e7d1      	b.n	4064d4 <__register_exitproc+0x20>
  406530:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  406534:	430a      	orrs	r2, r1
  406536:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40653a:	e7da      	b.n	4064f2 <__register_exitproc+0x3e>
  40653c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  406540:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  406544:	e7c1      	b.n	4064ca <__register_exitproc+0x16>
  406546:	f04f 30ff 	mov.w	r0, #4294967295
  40654a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40654e:	bf00      	nop
  406550:	00406798 	.word	0x00406798
  406554:	00000000 	.word	0x00000000

00406558 <_calloc_r>:
  406558:	b510      	push	{r4, lr}
  40655a:	fb02 f101 	mul.w	r1, r2, r1
  40655e:	f7fe fe09 	bl	405174 <_malloc_r>
  406562:	4604      	mov	r4, r0
  406564:	b1d8      	cbz	r0, 40659e <_calloc_r+0x46>
  406566:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40656a:	f022 0203 	bic.w	r2, r2, #3
  40656e:	3a04      	subs	r2, #4
  406570:	2a24      	cmp	r2, #36	; 0x24
  406572:	d818      	bhi.n	4065a6 <_calloc_r+0x4e>
  406574:	2a13      	cmp	r2, #19
  406576:	d914      	bls.n	4065a2 <_calloc_r+0x4a>
  406578:	2300      	movs	r3, #0
  40657a:	2a1b      	cmp	r2, #27
  40657c:	6003      	str	r3, [r0, #0]
  40657e:	6043      	str	r3, [r0, #4]
  406580:	d916      	bls.n	4065b0 <_calloc_r+0x58>
  406582:	2a24      	cmp	r2, #36	; 0x24
  406584:	6083      	str	r3, [r0, #8]
  406586:	60c3      	str	r3, [r0, #12]
  406588:	bf11      	iteee	ne
  40658a:	f100 0210 	addne.w	r2, r0, #16
  40658e:	6103      	streq	r3, [r0, #16]
  406590:	6143      	streq	r3, [r0, #20]
  406592:	f100 0218 	addeq.w	r2, r0, #24
  406596:	2300      	movs	r3, #0
  406598:	6013      	str	r3, [r2, #0]
  40659a:	6053      	str	r3, [r2, #4]
  40659c:	6093      	str	r3, [r2, #8]
  40659e:	4620      	mov	r0, r4
  4065a0:	bd10      	pop	{r4, pc}
  4065a2:	4602      	mov	r2, r0
  4065a4:	e7f7      	b.n	406596 <_calloc_r+0x3e>
  4065a6:	2100      	movs	r1, #0
  4065a8:	f7fc f88a 	bl	4026c0 <memset>
  4065ac:	4620      	mov	r0, r4
  4065ae:	bd10      	pop	{r4, pc}
  4065b0:	f100 0208 	add.w	r2, r0, #8
  4065b4:	e7ef      	b.n	406596 <_calloc_r+0x3e>
  4065b6:	bf00      	nop

004065b8 <__gedf2>:
  4065b8:	f04f 3cff 	mov.w	ip, #4294967295
  4065bc:	e006      	b.n	4065cc <__cmpdf2+0x4>
  4065be:	bf00      	nop

004065c0 <__ledf2>:
  4065c0:	f04f 0c01 	mov.w	ip, #1
  4065c4:	e002      	b.n	4065cc <__cmpdf2+0x4>
  4065c6:	bf00      	nop

004065c8 <__cmpdf2>:
  4065c8:	f04f 0c01 	mov.w	ip, #1
  4065cc:	f84d cd04 	str.w	ip, [sp, #-4]!
  4065d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4065d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4065d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4065dc:	bf18      	it	ne
  4065de:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4065e2:	d01b      	beq.n	40661c <__cmpdf2+0x54>
  4065e4:	b001      	add	sp, #4
  4065e6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4065ea:	bf0c      	ite	eq
  4065ec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4065f0:	ea91 0f03 	teqne	r1, r3
  4065f4:	bf02      	ittt	eq
  4065f6:	ea90 0f02 	teqeq	r0, r2
  4065fa:	2000      	moveq	r0, #0
  4065fc:	4770      	bxeq	lr
  4065fe:	f110 0f00 	cmn.w	r0, #0
  406602:	ea91 0f03 	teq	r1, r3
  406606:	bf58      	it	pl
  406608:	4299      	cmppl	r1, r3
  40660a:	bf08      	it	eq
  40660c:	4290      	cmpeq	r0, r2
  40660e:	bf2c      	ite	cs
  406610:	17d8      	asrcs	r0, r3, #31
  406612:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  406616:	f040 0001 	orr.w	r0, r0, #1
  40661a:	4770      	bx	lr
  40661c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  406620:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406624:	d102      	bne.n	40662c <__cmpdf2+0x64>
  406626:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40662a:	d107      	bne.n	40663c <__cmpdf2+0x74>
  40662c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  406630:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406634:	d1d6      	bne.n	4065e4 <__cmpdf2+0x1c>
  406636:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40663a:	d0d3      	beq.n	4065e4 <__cmpdf2+0x1c>
  40663c:	f85d 0b04 	ldr.w	r0, [sp], #4
  406640:	4770      	bx	lr
  406642:	bf00      	nop

00406644 <__aeabi_cdrcmple>:
  406644:	4684      	mov	ip, r0
  406646:	4610      	mov	r0, r2
  406648:	4662      	mov	r2, ip
  40664a:	468c      	mov	ip, r1
  40664c:	4619      	mov	r1, r3
  40664e:	4663      	mov	r3, ip
  406650:	e000      	b.n	406654 <__aeabi_cdcmpeq>
  406652:	bf00      	nop

00406654 <__aeabi_cdcmpeq>:
  406654:	b501      	push	{r0, lr}
  406656:	f7ff ffb7 	bl	4065c8 <__cmpdf2>
  40665a:	2800      	cmp	r0, #0
  40665c:	bf48      	it	mi
  40665e:	f110 0f00 	cmnmi.w	r0, #0
  406662:	bd01      	pop	{r0, pc}

00406664 <__aeabi_dcmpeq>:
  406664:	f84d ed08 	str.w	lr, [sp, #-8]!
  406668:	f7ff fff4 	bl	406654 <__aeabi_cdcmpeq>
  40666c:	bf0c      	ite	eq
  40666e:	2001      	moveq	r0, #1
  406670:	2000      	movne	r0, #0
  406672:	f85d fb08 	ldr.w	pc, [sp], #8
  406676:	bf00      	nop

00406678 <__aeabi_dcmplt>:
  406678:	f84d ed08 	str.w	lr, [sp, #-8]!
  40667c:	f7ff ffea 	bl	406654 <__aeabi_cdcmpeq>
  406680:	bf34      	ite	cc
  406682:	2001      	movcc	r0, #1
  406684:	2000      	movcs	r0, #0
  406686:	f85d fb08 	ldr.w	pc, [sp], #8
  40668a:	bf00      	nop

0040668c <__aeabi_dcmple>:
  40668c:	f84d ed08 	str.w	lr, [sp, #-8]!
  406690:	f7ff ffe0 	bl	406654 <__aeabi_cdcmpeq>
  406694:	bf94      	ite	ls
  406696:	2001      	movls	r0, #1
  406698:	2000      	movhi	r0, #0
  40669a:	f85d fb08 	ldr.w	pc, [sp], #8
  40669e:	bf00      	nop

004066a0 <__aeabi_dcmpge>:
  4066a0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4066a4:	f7ff ffce 	bl	406644 <__aeabi_cdrcmple>
  4066a8:	bf94      	ite	ls
  4066aa:	2001      	movls	r0, #1
  4066ac:	2000      	movhi	r0, #0
  4066ae:	f85d fb08 	ldr.w	pc, [sp], #8
  4066b2:	bf00      	nop

004066b4 <__aeabi_dcmpgt>:
  4066b4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4066b8:	f7ff ffc4 	bl	406644 <__aeabi_cdrcmple>
  4066bc:	bf34      	ite	cc
  4066be:	2001      	movcc	r0, #1
  4066c0:	2000      	movcs	r0, #0
  4066c2:	f85d fb08 	ldr.w	pc, [sp], #8
  4066c6:	bf00      	nop

004066c8 <__aeabi_dcmpun>:
  4066c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4066cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4066d0:	d102      	bne.n	4066d8 <__aeabi_dcmpun+0x10>
  4066d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4066d6:	d10a      	bne.n	4066ee <__aeabi_dcmpun+0x26>
  4066d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4066dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4066e0:	d102      	bne.n	4066e8 <__aeabi_dcmpun+0x20>
  4066e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4066e6:	d102      	bne.n	4066ee <__aeabi_dcmpun+0x26>
  4066e8:	f04f 0000 	mov.w	r0, #0
  4066ec:	4770      	bx	lr
  4066ee:	f04f 0001 	mov.w	r0, #1
  4066f2:	4770      	bx	lr

004066f4 <__aeabi_d2iz>:
  4066f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4066f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4066fc:	d215      	bcs.n	40672a <__aeabi_d2iz+0x36>
  4066fe:	d511      	bpl.n	406724 <__aeabi_d2iz+0x30>
  406700:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  406704:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  406708:	d912      	bls.n	406730 <__aeabi_d2iz+0x3c>
  40670a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40670e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  406712:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  406716:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40671a:	fa23 f002 	lsr.w	r0, r3, r2
  40671e:	bf18      	it	ne
  406720:	4240      	negne	r0, r0
  406722:	4770      	bx	lr
  406724:	f04f 0000 	mov.w	r0, #0
  406728:	4770      	bx	lr
  40672a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40672e:	d105      	bne.n	40673c <__aeabi_d2iz+0x48>
  406730:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  406734:	bf08      	it	eq
  406736:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40673a:	4770      	bx	lr
  40673c:	f04f 0000 	mov.w	r0, #0
  406740:	4770      	bx	lr
  406742:	bf00      	nop
  406744:	594d      	ldr	r5, [r1, r5]
  406746:	0000      	movs	r0, r0
  406748:	4449      	add	r1, r9
  40674a:	0000      	movs	r0, r0
  40674c:	4843      	ldr	r0, [pc, #268]	; (40685c <__mprec_tens+0x3c>)
  40674e:	0000      	movs	r0, r0
  406750:	5252      	strh	r2, [r2, r1]
  406752:	0000      	movs	r0, r0
  406754:	4c50      	ldr	r4, [pc, #320]	; (406898 <__mprec_tens+0x78>)
  406756:	0000      	movs	r0, r0
  406758:	4143      	adcs	r3, r0
  40675a:	0000      	movs	r0, r0
  40675c:	4d4d      	ldr	r5, [pc, #308]	; (406894 <__mprec_tens+0x74>)
  40675e:	0000      	movs	r0, r0
  406760:	4e52      	ldr	r6, [pc, #328]	; (4068ac <__mprec_tens+0x8c>)
  406762:	0000      	movs	r0, r0
  406764:	5257      	strh	r7, [r2, r1]
  406766:	0000      	movs	r0, r0
  406768:	4442      	add	r2, r8
  40676a:	0000      	movs	r0, r0
  40676c:	00006425 	.word	0x00006425
  406770:	6e696c42 	.word	0x6e696c42
  406774:	6177206b 	.word	0x6177206b
  406778:	28207469 	.word	0x28207469
  40677c:	3a29736d 	.word	0x3a29736d
  406780:	00000020 	.word	0x00000020
  406784:	20746f4e 	.word	0x20746f4e
  406788:	65636572 	.word	0x65636572
  40678c:	6e697669 	.word	0x6e697669
  406790:	00000067 	.word	0x00000067
  406794:	00000043 	.word	0x00000043

00406798 <_global_impure_ptr>:
  406798:	20000418                                ... 

0040679c <zeroes.7035>:
  40679c:	30303030 30303030 30303030 30303030     0000000000000000
  4067ac:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
  4067bc:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  4067cc:	00000000 33323130 37363534 62613938     ....0123456789ab
  4067dc:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
  4067ec:	00000030                                0...

004067f0 <blanks.7034>:
  4067f0:	20202020 20202020 20202020 20202020                     
  406800:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  406810:	49534f50 00000058 0000002e 00000000     POSIX...........

00406820 <__mprec_tens>:
  406820:	00000000 3ff00000 00000000 40240000     .......?......$@
  406830:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  406840:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  406850:	00000000 412e8480 00000000 416312d0     .......A......cA
  406860:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  406870:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  406880:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  406890:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  4068a0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  4068b0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  4068c0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  4068d0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  4068e0:	79d99db4 44ea7843                       ...yCx.D

004068e8 <__mprec_bigtens>:
  4068e8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  4068f8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  406908:	7f73bf3c 75154fdd                       <.s..O.u

00406910 <p05.5373>:
  406910:	00000005 00000019 0000007d              ........}...

0040691c <_init>:
  40691c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40691e:	bf00      	nop
  406920:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406922:	bc08      	pop	{r3}
  406924:	469e      	mov	lr, r3
  406926:	4770      	bx	lr

00406928 <__init_array_start>:
  406928:	00403f39 	.word	0x00403f39

0040692c <__frame_dummy_init_array_entry>:
  40692c:	004000f1                                ..@.

00406930 <_fini>:
  406930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406932:	bf00      	nop
  406934:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406936:	bc08      	pop	{r3}
  406938:	469e      	mov	lr, r3
  40693a:	4770      	bx	lr

0040693c <__fini_array_start>:
  40693c:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <Font08px_58>:
2000000c:	4401 0000                                   .D..

20000010 <Font08px_59>:
20000010:	c401 0000                                   ....

20000014 <Font08px_UY>:
20000014:	0605 f008 0608 0000                         ........

2000001c <Font08px_91>:
2000001c:	fe03 8282                                   ....

20000020 <Font08px_92>:
20000020:	0603 c038                                   ..8.

20000024 <Font08px_93>:
20000024:	8203 fe82                                   ....

20000028 <Font08px_94>:
20000028:	0403 0402                                   ....

2000002c <Font08px_95>:
2000002c:	8003 8080                                   ....

20000030 <Font08px_96>:
20000030:	0202 0004                                   ....

20000034 <font_table>:
20000034:	0244 2000 0248 2000 024c 2000 0250 2000     D.. H.. L.. P.. 
20000044:	0258 2000 0260 2000 0268 2000 0270 2000     X.. `.. h.. p.. 
20000054:	0334 2000 0338 2000 033c 2000 0340 2000     4.. 8.. <.. @.. 
20000064:	0344 2000 0348 2000 034c 2000 0350 2000     D.. H.. L.. P.. 
20000074:	02e4 2000 02ec 2000 02f4 2000 02fc 2000     ... ... ... ... 
20000084:	01b0 2000 030c 2000 0234 2000 01b8 2000     ... ... 4.. ... 
20000094:	0324 2000 01c0 2000 000c 2000 0010 2000     $.. ... ... ... 
200000a4:	01c8 2000 01d0 2000 01d8 2000 01e0 2000     ... ... ... ... 
200000b4:	01e8 2000 0274 2000 027c 2000 0284 2000     ... t.. |.. ... 
200000c4:	01f4 2000 01fc 2000 0204 2000 020c 2000     ... ... ... ... 
200000d4:	02a0 2000 02a8 2000 02ac 2000 02b4 2000     ... ... ... ... 
200000e4:	02bc 2000 02c4 2000 02cc 2000 02d4 2000     ... ... ... ... 
200000f4:	02dc 2000 0214 2000 021c 2000 0224 2000     ... ... ... $.. 
20000104:	022c 2000 0304 2000 023c 2000 0314 2000     ,.. ... <.. ... 
20000114:	031c 2000 0014 2000 032c 2000 001c 2000     ... ... ,.. ... 
20000124:	0020 2000 0024 2000 0028 2000 002c 2000      .. $.. (.. ,.. 
20000134:	0030 2000 0354 2000 035c 2000 0364 2000     0.. T.. \.. d.. 
20000144:	036c 2000 0374 2000 037c 2000 0380 2000     l.. t.. |.. ... 
20000154:	0388 2000 0390 2000 0394 2000 0398 2000     ... ... ... ... 
20000164:	03a0 2000 03a4 2000 03ac 2000 03b4 2000     ... ... ... ... 
20000174:	03bc 2000 03c4 2000 03cc 2000 03d0 2000     ... ... ... ... 
20000184:	03d8 2000 03dc 2000 03e4 2000 03ec 2000     ... ... ... ... 
20000194:	03f4 2000 03fc 2000 0404 2000 028c 2000     ... ... ... ... 
200001a4:	0290 2000 0294 2000 0298 2000               ... ... ... 

200001b0 <Font08px_N4>:
200001b0:	3005 2428 20fe 0000                         .0($. ..

200001b8 <Font08px_N7>:
200001b8:	0205 f202 060a 0000                         ........

200001c0 <Font08px_N9>:
200001c0:	4c05 9292 7c92 0000                         .L...|..

200001c8 <Font08px_60>:
200001c8:	1004 4428 0082 0000                         ..(D....

200001d0 <Font08px_61>:
200001d0:	2804 2828 0028 0000                         .((((...

200001d8 <Font08px_62>:
200001d8:	8204 2844 0010 0000                         ..D(....

200001e0 <Font08px_63>:
200001e0:	0405 a202 0c12 0000                         ........

200001e8 <Font08px_64>:
200001e8:	3808 9244 aaaa 24ba 0018 0000               .8D....$....

200001f4 <Font08px_UD>:
200001f4:	fe04 8282 007c 0000                         ....|...

200001fc <Font08px_UE>:
200001fc:	fe04 9292 0082 0000                         ........

20000204 <Font08px_UF>:
20000204:	fe04 1212 0002 0000                         ........

2000020c <Font08px_UG>:
2000020c:	7c05 9282 f492 0000                         .|......

20000214 <Font08px_UQ>:
20000214:	7c05 a282 bc42 0000                         .|..B...

2000021c <Font08px_UR>:
2000021c:	fe04 3212 00cc 0000                         ...2....

20000224 <Font08px_US>:
20000224:	4c04 9292 0064 0000                         .L..d...

2000022c <Font08px_UT>:
2000022c:	0205 fe02 0202 0000                         ........

20000234 <Font08px_N6>:
20000234:	7c05 9292 6492 0000                         .|...d..

2000023c <Font08px_UV>:
2000023c:	0e05 c030 0e30 0000                         ..0.0...

20000244 <Font08px_32>:
20000244:	0002 0000                                   ....

20000248 <Font08px_33>:
20000248:	be01 0000                                   ....

2000024c <Font08px_34>:
2000024c:	0603 0600                                   ....

20000250 <Font08px_35>:
20000250:	2805 28fe 28fe 0000                         .(.(.(..

20000258 <Font08px_36>:
20000258:	4805 fe54 2454 0000                         .HT.T$..

20000260 <Font08px_37>:
20000260:	4605 1026 c4c8 0000                         .F&.....

20000268 <Font08px_38>:
20000268:	6c05 ac92 a040 0000                         .l..@...

20000270 <Font08px_39>:
20000270:	0601 0000                                   ....

20000274 <Font08px_UA>:
20000274:	f805 1214 f814 0000                         ........

2000027c <Font08px_UB>:
2000027c:	fe04 9292 006c 0000                         ....l...

20000284 <Font08px_UC>:
20000284:	7c04 8282 0044 0000                         .|..D...

2000028c <Font08px_123>:
2000028c:	1003 826c                                   ..l.

20000290 <Font08px_124>:
20000290:	fe01 0000                                   ....

20000294 <Font08px_125>:
20000294:	8203 106c                                   ..l.

20000298 <Font08px_126>:
20000298:	1005 1008 1020 0000                         .... ...

200002a0 <Font08px_UH>:
200002a0:	fe04 1010 00fe 0000                         ........

200002a8 <Font08px_UI>:
200002a8:	8203 82fe                                   ....

200002ac <Font08px_UJ>:
200002ac:	4004 8080 007e 0000                         .@..~...

200002b4 <Font08px_UK>:
200002b4:	fe05 2810 8244 0000                         ...(D...

200002bc <Font08px_UL>:
200002bc:	fe04 8080 0080 0000                         ........

200002c4 <Font08px_UM>:
200002c4:	fe05 0804 fe04 0000                         ........

200002cc <Font08px_UN>:
200002cc:	fe05 1804 fe60 0000                         ....`...

200002d4 <Font08px_UO>:
200002d4:	7c04 8282 007c 0000                         .|..|...

200002dc <Font08px_UP>:
200002dc:	fe04 1212 000c 0000                         ........

200002e4 <Font08px_N0>:
200002e4:	7c05 92a2 7c8a 0000                         .|...|..

200002ec <Font08px_N1>:
200002ec:	0005 fe84 0080 0000                         ........

200002f4 <Font08px_N2>:
200002f4:	8405 a2c2 8c92 0000                         ........

200002fc <Font08px_N3>:
200002fc:	4405 9282 6c92 0000                         .D...l..

20000304 <Font08px_UU>:
20000304:	7e04 8080 007e 0000                         .~..~...

2000030c <Font08px_N5>:
2000030c:	5e05 8a8a 728a 0000                         .^...r..

20000314 <Font08px_UW>:
20000314:	3e05 38c0 3ec0 0000                         .>.8.>..

2000031c <Font08px_UX>:
2000031c:	c605 1028 c628 0000                         ..(.(...

20000324 <Font08px_N8>:
20000324:	6c05 9292 6c92 0000                         .l...l..

2000032c <Font08px_UZ>:
2000032c:	c205 92a2 868a 0000                         ........

20000334 <Font08px_40>:
20000334:	3803 8244                                   .8D.

20000338 <Font08px_41>:
20000338:	8203 3844                                   ..D8

2000033c <Font08px_42>:
2000033c:	2803 2810                                   .(.(

20000340 <Font08px_43>:
20000340:	1003 1038                                   ..8.

20000344 <Font08px_44>:
20000344:	c001 0000                                   ....

20000348 <Font08px_45>:
20000348:	1003 1010                                   ....

2000034c <Font08px_46>:
2000034c:	8001 0000                                   ....

20000350 <Font08px_47>:
20000350:	c003 0638                                   ..8.

20000354 <Font08px_la>:
20000354:	7004 8888 00f8 0000                         .p......

2000035c <Font08px_lb>:
2000035c:	fe04 8888 0070 0000                         ....p...

20000364 <Font08px_lc>:
20000364:	7004 8888 0088 0000                         .p......

2000036c <Font08px_ld>:
2000036c:	7004 8888 00fe 0000                         .p......

20000374 <Font08px_le>:
20000374:	7004 a8a8 0030 0000                         .p..0...

2000037c <Font08px_lf>:
2000037c:	fc03 0212                                   ....

20000380 <Font08px_lg>:
20000380:	1004 a8a8 0078 0000                         ....x...

20000388 <Font08px_lh>:
20000388:	fe04 0810 00f0 0000                         ........

20000390 <Font08px_li>:
20000390:	fa01 0000                                   ....

20000394 <Font08px_lj>:
20000394:	8002 007a                                   ..z.

20000398 <Font08px_lk>:
20000398:	fe04 5020 0088 0000                         .. P....

200003a0 <Font08px_ll>:
200003a0:	fe01 0000                                   ....

200003a4 <Font08px_lm>:
200003a4:	f805 f008 f008 0000                         ........

200003ac <Font08px_ln>:
200003ac:	f804 0810 00f0 0000                         ........

200003b4 <Font08px_lo>:
200003b4:	7004 8888 0070 0000                         .p..p...

200003bc <Font08px_lp>:
200003bc:	f804 2828 0010 0000                         ..((....

200003c4 <Font08px_lq>:
200003c4:	1004 2828 00f8 0000                         ..((....

200003cc <Font08px_lr>:
200003cc:	f803 0810                                   ....

200003d0 <Font08px_ls>:
200003d0:	9004 a8a8 0048 0000                         ....H...

200003d8 <Font08px_lt>:
200003d8:	0803 887c                                   ..|.

200003dc <Font08px_lu>:
200003dc:	7804 8080 00f8 0000                         .x......

200003e4 <Font08px_lv>:
200003e4:	1805 8060 1860 0000                         ..`.`...

200003ec <Font08px_lw>:
200003ec:	3805 30c0 38c0 0000                         .8.0.8..

200003f4 <Font08px_lx>:
200003f4:	8805 2050 8850 0000                         ..P P...

200003fc <Font08px_ly>:
200003fc:	1804 a0a0 0078 0000                         ....x...

20000404 <Font08px_lz>:
20000404:	c803 98a8                                   ....

20000408 <SystemCoreClock>:
20000408:	0900 003d                                   ..=.

2000040c <blink_wait>:
2000040c:	07d0 0000                                   ....

20000410 <msg_state>:
20000410:	0001 0000 0000 0000                         ........

20000418 <impure_data>:
20000418:	0000 0000 0704 2000 076c 2000 07d4 2000     ....... l.. ... 
	...
2000044c:	6794 0040 0000 0000 0000 0000 0000 0000     .g@.............
	...
200004c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200004d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000840 <_impure_ptr>:
20000840:	0418 2000                                   ... 

20000844 <lconv>:
20000844:	6818 0040 67cc 0040 67cc 0040 67cc 0040     .h@..g@..g@..g@.
20000854:	67cc 0040 67cc 0040 67cc 0040 67cc 0040     .g@..g@..g@..g@.
20000864:	67cc 0040 67cc 0040 ffff ffff ffff ffff     .g@..g@.........
20000874:	ffff ffff ffff 0000                         ........

2000087c <__malloc_av_>:
	...
20000884:	087c 2000 087c 2000 0884 2000 0884 2000     |.. |.. ... ... 
20000894:	088c 2000 088c 2000 0894 2000 0894 2000     ... ... ... ... 
200008a4:	089c 2000 089c 2000 08a4 2000 08a4 2000     ... ... ... ... 
200008b4:	08ac 2000 08ac 2000 08b4 2000 08b4 2000     ... ... ... ... 
200008c4:	08bc 2000 08bc 2000 08c4 2000 08c4 2000     ... ... ... ... 
200008d4:	08cc 2000 08cc 2000 08d4 2000 08d4 2000     ... ... ... ... 
200008e4:	08dc 2000 08dc 2000 08e4 2000 08e4 2000     ... ... ... ... 
200008f4:	08ec 2000 08ec 2000 08f4 2000 08f4 2000     ... ... ... ... 
20000904:	08fc 2000 08fc 2000 0904 2000 0904 2000     ... ... ... ... 
20000914:	090c 2000 090c 2000 0914 2000 0914 2000     ... ... ... ... 
20000924:	091c 2000 091c 2000 0924 2000 0924 2000     ... ... $.. $.. 
20000934:	092c 2000 092c 2000 0934 2000 0934 2000     ,.. ,.. 4.. 4.. 
20000944:	093c 2000 093c 2000 0944 2000 0944 2000     <.. <.. D.. D.. 
20000954:	094c 2000 094c 2000 0954 2000 0954 2000     L.. L.. T.. T.. 
20000964:	095c 2000 095c 2000 0964 2000 0964 2000     \.. \.. d.. d.. 
20000974:	096c 2000 096c 2000 0974 2000 0974 2000     l.. l.. t.. t.. 
20000984:	097c 2000 097c 2000 0984 2000 0984 2000     |.. |.. ... ... 
20000994:	098c 2000 098c 2000 0994 2000 0994 2000     ... ... ... ... 
200009a4:	099c 2000 099c 2000 09a4 2000 09a4 2000     ... ... ... ... 
200009b4:	09ac 2000 09ac 2000 09b4 2000 09b4 2000     ... ... ... ... 
200009c4:	09bc 2000 09bc 2000 09c4 2000 09c4 2000     ... ... ... ... 
200009d4:	09cc 2000 09cc 2000 09d4 2000 09d4 2000     ... ... ... ... 
200009e4:	09dc 2000 09dc 2000 09e4 2000 09e4 2000     ... ... ... ... 
200009f4:	09ec 2000 09ec 2000 09f4 2000 09f4 2000     ... ... ... ... 
20000a04:	09fc 2000 09fc 2000 0a04 2000 0a04 2000     ... ... ... ... 
20000a14:	0a0c 2000 0a0c 2000 0a14 2000 0a14 2000     ... ... ... ... 
20000a24:	0a1c 2000 0a1c 2000 0a24 2000 0a24 2000     ... ... $.. $.. 
20000a34:	0a2c 2000 0a2c 2000 0a34 2000 0a34 2000     ,.. ,.. 4.. 4.. 
20000a44:	0a3c 2000 0a3c 2000 0a44 2000 0a44 2000     <.. <.. D.. D.. 
20000a54:	0a4c 2000 0a4c 2000 0a54 2000 0a54 2000     L.. L.. T.. T.. 
20000a64:	0a5c 2000 0a5c 2000 0a64 2000 0a64 2000     \.. \.. d.. d.. 
20000a74:	0a6c 2000 0a6c 2000 0a74 2000 0a74 2000     l.. l.. t.. t.. 
20000a84:	0a7c 2000 0a7c 2000 0a84 2000 0a84 2000     |.. |.. ... ... 
20000a94:	0a8c 2000 0a8c 2000 0a94 2000 0a94 2000     ... ... ... ... 
20000aa4:	0a9c 2000 0a9c 2000 0aa4 2000 0aa4 2000     ... ... ... ... 
20000ab4:	0aac 2000 0aac 2000 0ab4 2000 0ab4 2000     ... ... ... ... 
20000ac4:	0abc 2000 0abc 2000 0ac4 2000 0ac4 2000     ... ... ... ... 
20000ad4:	0acc 2000 0acc 2000 0ad4 2000 0ad4 2000     ... ... ... ... 
20000ae4:	0adc 2000 0adc 2000 0ae4 2000 0ae4 2000     ... ... ... ... 
20000af4:	0aec 2000 0aec 2000 0af4 2000 0af4 2000     ... ... ... ... 
20000b04:	0afc 2000 0afc 2000 0b04 2000 0b04 2000     ... ... ... ... 
20000b14:	0b0c 2000 0b0c 2000 0b14 2000 0b14 2000     ... ... ... ... 
20000b24:	0b1c 2000 0b1c 2000 0b24 2000 0b24 2000     ... ... $.. $.. 
20000b34:	0b2c 2000 0b2c 2000 0b34 2000 0b34 2000     ,.. ,.. 4.. 4.. 
20000b44:	0b3c 2000 0b3c 2000 0b44 2000 0b44 2000     <.. <.. D.. D.. 
20000b54:	0b4c 2000 0b4c 2000 0b54 2000 0b54 2000     L.. L.. T.. T.. 
20000b64:	0b5c 2000 0b5c 2000 0b64 2000 0b64 2000     \.. \.. d.. d.. 
20000b74:	0b6c 2000 0b6c 2000 0b74 2000 0b74 2000     l.. l.. t.. t.. 
20000b84:	0b7c 2000 0b7c 2000 0b84 2000 0b84 2000     |.. |.. ... ... 
20000b94:	0b8c 2000 0b8c 2000 0b94 2000 0b94 2000     ... ... ... ... 
20000ba4:	0b9c 2000 0b9c 2000 0ba4 2000 0ba4 2000     ... ... ... ... 
20000bb4:	0bac 2000 0bac 2000 0bb4 2000 0bb4 2000     ... ... ... ... 
20000bc4:	0bbc 2000 0bbc 2000 0bc4 2000 0bc4 2000     ... ... ... ... 
20000bd4:	0bcc 2000 0bcc 2000 0bd4 2000 0bd4 2000     ... ... ... ... 
20000be4:	0bdc 2000 0bdc 2000 0be4 2000 0be4 2000     ... ... ... ... 
20000bf4:	0bec 2000 0bec 2000 0bf4 2000 0bf4 2000     ... ... ... ... 
20000c04:	0bfc 2000 0bfc 2000 0c04 2000 0c04 2000     ... ... ... ... 
20000c14:	0c0c 2000 0c0c 2000 0c14 2000 0c14 2000     ... ... ... ... 
20000c24:	0c1c 2000 0c1c 2000 0c24 2000 0c24 2000     ... ... $.. $.. 
20000c34:	0c2c 2000 0c2c 2000 0c34 2000 0c34 2000     ,.. ,.. 4.. 4.. 
20000c44:	0c3c 2000 0c3c 2000 0c44 2000 0c44 2000     <.. <.. D.. D.. 
20000c54:	0c4c 2000 0c4c 2000 0c54 2000 0c54 2000     L.. L.. T.. T.. 
20000c64:	0c5c 2000 0c5c 2000 0c64 2000 0c64 2000     \.. \.. d.. d.. 
20000c74:	0c6c 2000 0c6c 2000 0c74 2000 0c74 2000     l.. l.. t.. t.. 

20000c84 <__malloc_trim_threshold>:
20000c84:	0000 0002                                   ....

20000c88 <__malloc_sbrk_base>:
20000c88:	ffff ffff                                   ....
